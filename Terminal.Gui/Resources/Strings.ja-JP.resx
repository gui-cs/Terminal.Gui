<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ctxSelectAll" xml:space="preserve">
    <value>全て選択 (_S)</value>
  </data>
  <data name="ctxDeleteAll" xml:space="preserve">
    <value>全て削除 (_D)</value>
  </data>
  <data name="ctxCopy" xml:space="preserve">
    <value>コピー (_C)</value>
  </data>
  <data name="ctxCut" xml:space="preserve">
    <value>切り取り (_T)</value>
  </data>
  <data name="ctxPaste" xml:space="preserve">
    <value>貼り付け (_P)</value>
  </data>
  <data name="ctxUndo" xml:space="preserve">
    <value>元に戻す (_U)</value>
  </data>
  <data name="ctxRedo" xml:space="preserve">
    <value>やり直し (_R)</value>
  </data>
  <data name="fdDirectory" xml:space="preserve">
    <value>ディレクトリ</value>
  </data>
  <data name="fdFile" xml:space="preserve">
    <value>ファイル</value>
  </data>
  <data name="fdSave" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="fdSaveAs" xml:space="preserve">
    <value>名前を付けて保存</value>
  </data>
  <data name="fdOpen" xml:space="preserve">
    <value>開く</value>
  </data>
  <data name="fdSelectFolder" xml:space="preserve">
    <value>フォルダーを選択 (_S)</value>
  </data>
  <data name="fdSelectMixed" xml:space="preserve">
    <value>混在選択 (_S)</value>
  </data>
  <data name="wzBack" xml:space="preserve">
    <value>戻る (_B)</value>
  </data>
  <data name="wzFinish" xml:space="preserve">
    <value>終わる (_N)</value>
  </data>
  <data name="wzNext" xml:space="preserve">
    <value>次に (_N)...</value>
  </data>
  <data name="fdDirectoryAlreadyExistsFeedback" xml:space="preserve">
    <value>同じ名前のディレクトリはすでに存在しました</value>
  </data>
  <data name="fdDirectoryMustExistFeedback" xml:space="preserve">
    <value>すでに存在したディレクトリを選択してください</value>
  </data>
  <data name="fdFileAlreadyExistsFeedback" xml:space="preserve">
    <value>同じ名前のファイルはすでに存在しました</value>
  </data>
  <data name="fdFileMustExistFeedback" xml:space="preserve">
    <value>すでに存在したファイルを選択してください</value>
  </data>
  <data name="fdFilename" xml:space="preserve">
    <value>ファイル名</value>
  </data>
  <data name="fdFileOrDirectoryMustExistFeedback" xml:space="preserve">
    <value>すでに存在したファイルまたはディレクトリを選択してください</value>
  </data>
  <data name="fdModified" xml:space="preserve">
    <value>変更日時</value>
  </data>
  <data name="fdPathCaption" xml:space="preserve">
    <value>パスを入力</value>
  </data>
  <data name="fdSearchCaption" xml:space="preserve">
    <value>検索を入力</value>
  </data>
  <data name="fdSize" xml:space="preserve">
    <value>サイズ</value>
  </data>
  <data name="fdType" xml:space="preserve">
    <value>タイプ</value>
  </data>
  <data name="fdWrongFileTypeFeedback" xml:space="preserve">
    <value>ファイルタイプが間違っでいます</value>
  </data>
  <data name="fdAnyFiles" xml:space="preserve">
    <value>任意ファイル</value>
  </data>
  <data name="fdDeleteBody" xml:space="preserve">
    <value>“{0}”を削除もよろしいですか？この操作は元に戻りません</value>
  </data>
  <data name="fdDeleteFailedTitle" xml:space="preserve">
    <value>削除失敗</value>
  </data>
  <data name="fdDeleteTitle" xml:space="preserve">
    <value>{0} を削除</value>
  </data>
  <data name="fdNewFailed" xml:space="preserve">
    <value>新規失敗</value>
  </data>
  <data name="fdNewTitle" xml:space="preserve">
    <value>新規ディレクトリ</value>
  </data>
  <data name="btnNo" xml:space="preserve">
    <value>いいえ (_N)</value>
  </data>
  <data name="fdRenameFailedTitle" xml:space="preserve">
    <value>変更失敗</value>
  </data>
  <data name="fdRenamePrompt" xml:space="preserve">
    <value>名前：</value>
  </data>
  <data name="fdRenameTitle" xml:space="preserve">
    <value>名前を変更</value>
  </data>
  <data name="btnYes" xml:space="preserve">
    <value>はい (_Y)</value>
  </data>
  <data name="fdExisting" xml:space="preserve">
    <value>既存</value>
  </data>
  <data name="btnOpen" xml:space="preserve">
    <value>開く (_O)</value>
  </data>
  <data name="btnSave" xml:space="preserve">
    <value>保存 (_S)</value>
  </data>
  <data name="btnSaveAs" xml:space="preserve">
    <value>名前を付けて保存 (_S)</value>
  </data>
  <data name="btnOk" xml:space="preserve">
    <value>OK (_O)</value>
  </data>
  <data name="btnCancel" xml:space="preserve">
    <value>キャンセル (_C)</value>
  </data>
  <data name="fdCtxDelete" xml:space="preserve">
    <value>削除 (_D)</value>
  </data>
  <data name="fdCtxHide" xml:space="preserve">
    <value>{0}を隠す (_H)</value>
  </data>
  <data name="fdCtxNew" xml:space="preserve">
    <value>新規 (_N)</value>
  </data>
  <data name="fdCtxRename" xml:space="preserve">
    <value>名前変更 (_R)</value>
  </data>
  <data name="fdCtxSortAsc" xml:space="preserve">
    <value>{0}で昇順ソート (_S)</value>
  </data>
  <data name="fdCtxSortDesc" xml:space="preserve">
    <value>{0}で降順ソート (_S)</value>
  </data>
  <data name="dpTitle" xml:space="preserve">
    <value>日付ピッカー</value>
  </data>
  <data name="ctxColors" xml:space="preserve">
    <value>絵の具 (_L)</value>
  </data>
</root>