namespace Terminal.Gui.ViewsTests;

public class ColorPickerTests
{
    [Fact]
    public void Constructors ()
    {
        var colorPicker = new ColorPicker ();
<<<<<<< HEAD
        Assert.Equal (new Color (ColorName.Black), colorPicker.SelectedColor);
        Assert.Equal (new Point (0, 0), colorPicker.Cursor);
=======
        Assert.Equal (ColorName.Black, colorPicker.SelectedColor);
        Assert.Equal (Point.Empty, colorPicker.Cursor);
>>>>>>> v2_develop
        Assert.True (colorPicker.CanFocus);

        colorPicker.BeginInit ();
        colorPicker.EndInit ();
        colorPicker.LayoutSubviews ();
        Assert.Equal (new (0, 0, 32, 4), colorPicker.Frame);
    }

    [Fact]
    public void KeyBindings_Command ()
    {
        var colorPicker = new ColorPicker ();
        Assert.Equal (Color.Black, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorRight));
<<<<<<< HEAD
        Assert.Equal (Color.Blue, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorDown));
        Assert.Equal (Color.BrightBlue, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorLeft));
        Assert.Equal (Color.DarkGray, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorUp));
        Assert.Equal (Color.Black, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorLeft)); // stay
        Assert.Equal (Color.Black, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorUp)); // stay
        Assert.Equal (Color.Black, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.End));
        Assert.Equal (Color.White, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorDown)); // stay
        Assert.Equal (Color.White, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorRight)); // stay
        Assert.Equal (Color.White, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorUp));
        Assert.Equal (Color.Gray, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorRight)); // wrap
        Assert.Equal (Color.DarkGray, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.Home));
        Assert.Equal (Color.Black, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.End));
        Assert.Equal (Color.White, colorPicker.SelectedColor);
=======
        Assert.Equal (ColorName.Blue, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorDown));
        Assert.Equal (ColorName.BrightBlue, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorLeft));
        Assert.Equal (ColorName.DarkGray, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorUp));
        Assert.Equal (ColorName.Black, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorLeft));
        Assert.Equal (ColorName.Black, colorPicker.SelectedColor);

        Assert.True (colorPicker.NewKeyDownEvent (Key.CursorUp));
        Assert.Equal (ColorName.Black, colorPicker.SelectedColor);
>>>>>>> v2_develop
    }

    [Fact]
    [AutoInitShutdown]
    public void MouseEvents ()
    {
<<<<<<< HEAD
        var colorPicker = new ColorPicker
        {
            X = 0,
            Y = 0,
            Height = 4,
            Width = 32
        };
        Assert.Equal (new Color (ColorName.Black), colorPicker.SelectedColor);
        Application.Top.Add (colorPicker);
        Application.Begin (Application.Top);
=======
        var colorPicker = new ColorPicker { X = 0, Y = 0, Height = 4, Width = 32 };
        Assert.Equal (ColorName.Black, colorPicker.SelectedColor);
        var top = new Toplevel ();
        top.Add (colorPicker);
        Application.Begin (top);
>>>>>>> v2_develop

        Assert.False (colorPicker.NewMouseEvent (new ()));

<<<<<<< HEAD
        Assert.True (colorPicker.MouseEvent (new MouseEvent { Flags = MouseFlags.Button1Clicked, X = 4, Y = 1 }));
        Assert.Equal (Color.Blue, colorPicker.SelectedColor);
=======
        Assert.True (colorPicker.NewMouseEvent (new() { Position = new (4, 1), Flags = MouseFlags.Button1Clicked }));
        Assert.Equal (ColorName.Blue, colorPicker.SelectedColor);
        top.Dispose ();
>>>>>>> v2_develop
    }

    [Fact]
    public void SelectedColorAndCursor ()
    {
        var colorPicker = new ColorPicker ();
        colorPicker.SelectedColor = new Color (ColorName.White);
        Assert.Equal (7, colorPicker.Cursor.X);
        Assert.Equal (1, colorPicker.Cursor.Y);

        colorPicker.SelectedColor = new Color (Color.Black);
        Assert.Equal (0, colorPicker.Cursor.X);
        Assert.Equal (0, colorPicker.Cursor.Y);

<<<<<<< HEAD
        colorPicker.Cursor = new Point (7, 1);
        Assert.Equal (new Color (ColorName.White), colorPicker.SelectedColor);

        colorPicker.Cursor = new Point (0, 0);
        Assert.Equal (new Color (ColorName.Black), colorPicker.SelectedColor);
=======
        colorPicker.Cursor = new (7, 1);
        Assert.Equal (ColorName.White, colorPicker.SelectedColor);

        colorPicker.Cursor = Point.Empty;
        Assert.Equal (ColorName.Black, colorPicker.SelectedColor);
>>>>>>> v2_develop
    }
}
