{
  "api/Terminal.Gui/Terminal.Gui.Application.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Application.html",
    "title": "Class Application",
    "keywords": "Class Application A static, singelton class provding the main application driver for Terminal.Gui apps. Inheritance System.Object Application Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public static class Application Remarks Creates a instance of MainLoop to process input events, handle timers and other sources of data. It is accessible via the MainLoop property. You can hook up to the Iteration event to have your method invoked on each iteration of the MainLoop . When invoked sets the SynchronizationContext to one that is tied to the mainloop, allowing user code to use async/await. Examples // A simple Terminal.Gui app that creates a window with a frame and title with // 5 rows/columns of padding. Application.Init(); var win = new Window (\"Hello World - CTRL-Q to quit\") { X = 5, Y = 5, Width = Dim.Fill (5), Height = Dim.Fill (5) }; Application.Top.Add(win); Application.Run(); Fields Driver The current ConsoleDriver in use. Declaration public static ConsoleDriver Driver Field Value Type Description ConsoleDriver Iteration This event is raised on each iteration of the MainLoop Declaration public static Action Iteration Field Value Type Description System.Action Remarks See also System.Threading.Timeout Resized Invoked when the terminal was resized. The new size of the terminal is provided. Declaration public static Action<Application.ResizedEventArgs> Resized Field Value Type Description System.Action < Application.ResizedEventArgs > RootMouseEvent Merely a debugging aid to see the raw mouse events Declaration public static Action<MouseEvent> RootMouseEvent Field Value Type Description System.Action < MouseEvent > UseSystemConsole If set, it forces the use of the System.Console-based driver. Declaration public static bool UseSystemConsole Field Value Type Description System.Boolean Properties AlwaysSetPosition Used only by Terminal.Gui.NetDriver to forcing always moving the cursor position when writing to the screen. Declaration public static bool AlwaysSetPosition { get; set; } Property Value Type Description System.Boolean Current The current Toplevel object. This is updated when Run(Func<Exception, Boolean>) enters and leaves to point to the current Toplevel . Declaration public static Toplevel Current { get; } Property Value Type Description Toplevel The current. HeightAsBuffer The current HeightAsBuffer used in the terminal. Declaration public static bool HeightAsBuffer { get; set; } Property Value Type Description System.Boolean MainLoop The MainLoop driver for the application Declaration public static MainLoop MainLoop { get; } Property Value Type Description MainLoop The main loop. Top The Toplevel object used for the application on startup ( Top ) Declaration public static Toplevel Top { get; } Property Value Type Description Toplevel The top. Methods Begin(Toplevel) Building block API: Prepares the provided Toplevel for execution. Declaration public static Application.RunState Begin(Toplevel toplevel) Parameters Type Name Description Toplevel toplevel Toplevel to prepare execution for. Returns Type Description Application.RunState The runstate handle that needs to be passed to the End(Application.RunState) method upon completion. Remarks This method prepares the provided toplevel for running with the focus, it adds this to the list of toplevels, sets up the mainloop to process the event, lays out the subviews, focuses the first element, and draws the toplevel in the screen. This is usually followed by executing the RunLoop(Application.RunState, Boolean) method, and then the End(Application.RunState) method upon termination which will undo these changes. End(Application.RunState) Building block API: completes the execution of a Toplevel that was started with Begin(Toplevel) . Declaration public static void End(Application.RunState runState) Parameters Type Name Description Application.RunState runState The runstate returned by the Begin(Toplevel) method. GrabMouse(View) Grabs the mouse, forcing all mouse events to be routed to the specified view until UngrabMouse is called. Declaration public static void GrabMouse(View view) Parameters Type Name Description View view View that will receive all mouse events until UngrabMouse is invoked. Init(ConsoleDriver, IMainLoopDriver) Initializes a new instance of Terminal.Gui Application. Declaration public static void Init(ConsoleDriver driver = null, IMainLoopDriver mainLoopDriver = null) Parameters Type Name Description ConsoleDriver driver IMainLoopDriver mainLoopDriver Remarks Call this method once per instance (or after Shutdown() has been called). Loads the right ConsoleDriver for the platform. Creates a Toplevel and assigns it to Top MakeCenteredRect(Size) Returns a rectangle that is centered in the screen for the provided size. Declaration public static Rect MakeCenteredRect(Size size) Parameters Type Name Description Size size Size for the rectangle. Returns Type Description Rect The centered rect. Refresh() Triggers a refresh of the entire display. Declaration public static void Refresh() RequestStop() Stops running the most recent Toplevel . Declaration public static void RequestStop() Remarks This will cause Run(Func<Exception, Boolean>) to return. Calling RequestStop() is equivalent to setting the Running property on the curently running Toplevel to false. Run(Func<Exception, Boolean>) Runs the application by calling Run(Toplevel, Func<Exception, Boolean>) with the value of Top Declaration public static void Run(Func<Exception, bool> errorHandler = null) Parameters Type Name Description System.Func < System.Exception , System.Boolean > errorHandler Run(Toplevel, Func<Exception, Boolean>) Runs the main loop on the given Toplevel container. Declaration public static void Run(Toplevel view, Func<Exception, bool> errorHandler = null) Parameters Type Name Description Toplevel view The Toplevel tu run modally. System.Func < System.Exception , System.Boolean > errorHandler Handler for any unhandled exceptions (resumes when returns true, rethrows when null). Remarks This method is used to start processing events for the main application, but it is also used to run other modal View s such as Dialog boxes. To make a Run(Toplevel, Func<Exception, Boolean>) stop execution, call RequestStop() . Calling Run(Toplevel, Func<Exception, Boolean>) is equivalent to calling Begin(Toplevel) , followed by RunLoop(Application.RunState, Boolean) , and then calling End(Application.RunState) . Alternatively, to have a program control the main loop and process events manually, call Begin(Toplevel) to set things up manually and then repeatedly call RunLoop(Application.RunState, Boolean) with the wait parameter set to false. By doing this the RunLoop(Application.RunState, Boolean) method will only process any pending events, timers, idle handlers and then return control immediately. When errorHandler is null the exception is rethrown, when it returns true the application is resumed and when false method exits gracefully. Run<T>(Func<Exception, Boolean>) Runs the application by calling Run(Toplevel, Func<Exception, Boolean>) with a new instance of the specified Toplevel -derived class Declaration public static void Run<T>(Func<Exception, bool> errorHandler = null) where T : Toplevel, new() Parameters Type Name Description System.Func < System.Exception , System.Boolean > errorHandler Type Parameters Name Description T RunLoop(Application.RunState, Boolean) Building block API: Runs the main loop for the created dialog Declaration public static void RunLoop(Application.RunState state, bool wait = true) Parameters Type Name Description Application.RunState state The state returned by the Begin method. System.Boolean wait By default this is true which will execute the runloop waiting for events, if you pass false, you can use this method to run a single iteration of the events. Remarks Use the wait parameter to control whether this is a blocking or non-blocking call. Shutdown() Shutdown an application initialized with Init(ConsoleDriver, IMainLoopDriver) Declaration public static void Shutdown() UngrabMouse() Releases the mouse grab, so mouse events will be routed to the view on which the mouse is. Declaration public static void UngrabMouse()"
  },
  "api/Terminal.Gui/Terminal.Gui.Application.ResizedEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Application.ResizedEventArgs.html",
    "title": "Class Application.ResizedEventArgs",
    "keywords": "Class Application.ResizedEventArgs Event arguments for the Resized event. Inheritance System.Object System.EventArgs Application.ResizedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ResizedEventArgs : EventArgs Properties Cols The number of columns in the resized terminal. Declaration public int Cols { get; set; } Property Value Type Description System.Int32 Rows The number of rows in the resized terminal. Declaration public int Rows { get; set; } Property Value Type Description System.Int32"
  },
  "api/Terminal.Gui/Terminal.Gui.Application.RunState.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Application.RunState.html",
    "title": "Class Application.RunState",
    "keywords": "Class Application.RunState Captures the execution state for the provided Terminal.Gui.Application.RunState.Toplevel view. Inheritance System.Object Application.RunState Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class RunState : IDisposable Constructors RunState(Toplevel) Initializes a new Application.RunState class. Declaration public RunState(Toplevel view) Parameters Type Name Description Toplevel view Methods Dispose() Releases alTop = l resource used by the Application.RunState object. Declaration public void Dispose() Remarks Call Dispose() when you are finished using the Application.RunState . The Dispose() method leaves the Application.RunState in an unusable state. After calling Dispose() , you must release all references to the Application.RunState so the garbage collector can reclaim the memory that the Application.RunState was occupying. Dispose(Boolean) Dispose the specified disposing. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing If set to true disposing. Implements System.IDisposable"
  },
  "api/Terminal.Gui/Terminal.Gui.AspectGetterDelegate-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.AspectGetterDelegate-1.html",
    "title": "Delegate AspectGetterDelegate<T>",
    "keywords": "Delegate AspectGetterDelegate<T> Delegates of this type are used to fetch string representations of user's model objects Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public delegate string AspectGetterDelegate<T>(T toRender) where T : class; Parameters Type Name Description T toRender The object that is being rendered Returns Type Description System.String Type Parameters Name Description T"
  },
  "api/Terminal.Gui/Terminal.Gui.Attribute.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Attribute.html",
    "title": "Struct Attribute",
    "keywords": "Struct Attribute Attributes are used as elements that contain both a foreground and a background or platform specific features Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public struct Attribute Remarks Attribute s are needed to map colors to terminal capabilities that might lack colors, on color scenarios, they encode both the foreground and the background color and are used in the ColorScheme class to define color schemes that can be used in your application. Constructors Attribute(Int32, Color, Color) Initializes a new instance of the Attribute struct. Declaration public Attribute(int value, Color foreground = Color.Black, Color background = Color.Black) Parameters Type Name Description System.Int32 value Value. Color foreground Foreground Color background Background Attribute(Color, Color) Initializes a new instance of the Attribute struct. Declaration public Attribute(Color foreground = Color.Black, Color background = Color.Black) Parameters Type Name Description Color foreground Foreground Color background Background Properties Background The background color. Declaration public Color Background { get; } Property Value Type Description Color Foreground The foreground color. Declaration public Color Foreground { get; } Property Value Type Description Color Value The color attribute value. Declaration public int Value { get; } Property Value Type Description System.Int32 Methods Get() Gets the current Attribute from the driver. Declaration public static Attribute Get() Returns Type Description Attribute The current attribute. Make(Color, Color) Creates an Attribute from the specified foreground and background. Declaration public static Attribute Make(Color foreground, Color background) Parameters Type Name Description Color foreground Foreground color to use. Color background Background color to use. Returns Type Description Attribute The make. Operators Implicit(Int32 to Attribute) Implicitly convert an integer value into an Attribute Declaration public static implicit operator Attribute(int v) Parameters Type Name Description System.Int32 v value Returns Type Description Attribute An attribute with the specified integer value. Implicit(Attribute to Int32) Implicit conversion from an Attribute to the underlying Int32 representation Declaration public static implicit operator int (Attribute c) Parameters Type Name Description Attribute c The attribute to convert Returns Type Description System.Int32 The integer value stored in the attribute."
  },
  "api/Terminal.Gui/Terminal.Gui.Button.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Button.html",
    "title": "Class Button",
    "keywords": "Class Button Button is a View that provides an item that invokes an System.Action when activated by the user. Inheritance System.Object Responder View Button Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.Redraw(Rect) View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Button : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks Provides a button showing text invokes an System.Action when clicked on with a mouse or when the user presses SPACE, ENTER, or hotkey. The hotkey is the first letter or digit following the first underscore ('_') in the button text. Use HotKeySpecifier to change the hotkey specifier from the default of ('_'). If no hotkey specifier is found, the first uppercase letter encountered will be used as the hotkey. When the button is configured as the default ( IsDefault ) and the user presses the ENTER key, if no other View processes the KeyEvent , the Button 's System.Action will be invoked. Constructors Button() Initializes a new instance of Button using Computed layout. Declaration public Button() Remarks The width of the Button is computed based on the text length. The height will always be 1. Button(ustring, Boolean) Initializes a new instance of Button using Computed layout. Declaration public Button(ustring text, bool is_default = false) Parameters Type Name Description NStack.ustring text The button's text System.Boolean is_default If true , a special decoration is used, and the user pressing the enter key in a Dialog will implicitly activate this button. Remarks The width of the Button is computed based on the text length. The height will always be 1. Button(Int32, Int32, ustring) Initializes a new instance of Button using Absolute layout, based on the given text Declaration public Button(int x, int y, ustring text) Parameters Type Name Description System.Int32 x X position where the button will be shown. System.Int32 y Y position where the button will be shown. NStack.ustring text The button's text Remarks The width of the Button is computed based on the text length. The height will always be 1. Button(Int32, Int32, ustring, Boolean) Initializes a new instance of Button using Absolute layout, based on the given text. Declaration public Button(int x, int y, ustring text, bool is_default) Parameters Type Name Description System.Int32 x X position where the button will be shown. System.Int32 y Y position where the button will be shown. NStack.ustring text The button's text System.Boolean is_default If true , a special decoration is used, and the user pressing the enter key in a Dialog will implicitly activate this button. Remarks The width of the Button is computed based on the text length. The height will always be 1. Properties IsDefault Gets or sets whether the Button is the default action to activate in a dialog. Declaration public bool IsDefault { get; set; } Property Value Type Description System.Boolean true if is default; otherwise, false . Text The text displayed by this Button . Declaration public ustring Text { get; set; } Property Value Type Description NStack.ustring Methods MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) PositionCursor() Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessColdKey(KeyEvent) Declaration public override bool ProcessColdKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessColdKey(KeyEvent) ProcessHotKey(KeyEvent) Declaration public override bool ProcessHotKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessHotKey(KeyEvent) ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Events Clicked Clicked System.Action , raised when the user clicks the primary mouse button within the Bounds of this View or if the user presses the action key while this view is focused. (TODO: IsDefault) Declaration public event Action Clicked Event Type Type Description System.Action Remarks Client code can hook up to this event, it is raised when the button is activated either with the mouse or the keyboard. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.CellActivatedEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.CellActivatedEventArgs.html",
    "title": "Class CellActivatedEventArgs",
    "keywords": "Class CellActivatedEventArgs Defines the event arguments for CellActivated event Inheritance System.Object System.EventArgs CellActivatedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class CellActivatedEventArgs : EventArgs Constructors CellActivatedEventArgs(DataTable, Int32, Int32) Creates a new instance of arguments describing a cell being activated in TableView Declaration public CellActivatedEventArgs(DataTable t, int col, int row) Parameters Type Name Description System.Data.DataTable t System.Int32 col System.Int32 row Properties Col The column index of the Table cell that is being activated Declaration public int Col { get; } Property Value Type Description System.Int32 Row The row index of the Table cell that is being activated Declaration public int Row { get; } Property Value Type Description System.Int32 Table The current table to which the new indexes refer. May be null e.g. if selection change is the result of clearing the table from the view Declaration public DataTable Table { get; } Property Value Type Description System.Data.DataTable"
  },
  "api/Terminal.Gui/Terminal.Gui.CheckBox.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.CheckBox.html",
    "title": "Class CheckBox",
    "keywords": "Class CheckBox The CheckBox View shows an on/off toggle that the user can set Inheritance System.Object Responder View CheckBox Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class CheckBox : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors CheckBox() Initializes a new instance of CheckBox based on the given text, using Computed layout. Declaration public CheckBox() CheckBox(ustring, Boolean) Initializes a new instance of CheckBox based on the given text, using Computed layout. Declaration public CheckBox(ustring s, bool is_checked = false) Parameters Type Name Description NStack.ustring s S. System.Boolean is_checked If set to true is checked. CheckBox(Int32, Int32, ustring) Initializes a new instance of CheckBox using Absolute layout. Declaration public CheckBox(int x, int y, ustring s) Parameters Type Name Description System.Int32 x System.Int32 y NStack.ustring s Remarks The size of CheckBox is computed based on the text length. This CheckBox is not toggled. CheckBox(Int32, Int32, ustring, Boolean) Initializes a new instance of CheckBox using Absolute layout. Declaration public CheckBox(int x, int y, ustring s, bool is_checked) Parameters Type Name Description System.Int32 x System.Int32 y NStack.ustring s System.Boolean is_checked Remarks The size of CheckBox is computed based on the text length. Properties Checked The state of the CheckBox Declaration public bool Checked { get; set; } Property Value Type Description System.Boolean Text The text displayed by this CheckBox Declaration public ustring Text { get; set; } Property Value Type Description NStack.ustring Methods MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) OnToggled(Boolean) Called when the Checked property changes. Invokes the Toggled event. Declaration public virtual void OnToggled(bool previousChecked) Parameters Type Name Description System.Boolean previousChecked PositionCursor() Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Events Toggled Toggled event, raised when the CheckBox is toggled. Declaration public event Action<bool> Toggled Event Type Type Description System.Action < System.Boolean > Remarks Client code can hook up to this event, it is raised when the CheckBox is activated either with the mouse or the keyboard. The passed bool contains the previous state. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.Clipboard.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Clipboard.html",
    "title": "Class Clipboard",
    "keywords": "Class Clipboard Provides cut, copy, and paste support for the clipboard. NOTE: Currently not implemented. Inheritance System.Object Clipboard Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public static class Clipboard Properties Contents Declaration public static ustring Contents { get; set; } Property Value Type Description NStack.ustring"
  },
  "api/Terminal.Gui/Terminal.Gui.Color.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Color.html",
    "title": "Enum Color",
    "keywords": "Enum Color Basic colors that can be used to set the foreground and background colors in console applications. Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public enum Color Fields Name Description Black The black color. Blue The blue color. BrightBlue The bright bBlue color. BrightCyan The bright cyan color. BrightGreen The bright green color. BrightMagenta The bright magenta color. BrightRed The bright red color. BrightYellow The bright yellow color. Brown The brown color. Cyan The cyan color. DarkGray The dark gray color. Gray The gray color. Green The green color. Magenta The magenta color. Red The red color. White The White color."
  },
  "api/Terminal.Gui/Terminal.Gui.Colors.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Colors.html",
    "title": "Class Colors",
    "keywords": "Class Colors The default ColorScheme s for the application. Inheritance System.Object Colors Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public static class Colors Properties Base The base color scheme, for the default toplevel views. Declaration public static ColorScheme Base { get; set; } Property Value Type Description ColorScheme Remarks This API will be deprecated in the future. Use ColorSchemes instead (e.g. edit.ColorScheme = Colors.ColorSchemes[\"Base\"]; ColorSchemes Provides the defined ColorScheme s. Declaration public static Dictionary<string, ColorScheme> ColorSchemes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , ColorScheme > Dialog The dialog color scheme, for standard popup dialog boxes Declaration public static ColorScheme Dialog { get; set; } Property Value Type Description ColorScheme Remarks This API will be deprecated in the future. Use ColorSchemes instead (e.g. edit.ColorScheme = Colors.ColorSchemes[\"Dialog\"]; Error The color scheme for showing errors. Declaration public static ColorScheme Error { get; set; } Property Value Type Description ColorScheme Remarks This API will be deprecated in the future. Use ColorSchemes instead (e.g. edit.ColorScheme = Colors.ColorSchemes[\"Error\"]; Menu The menu bar color Declaration public static ColorScheme Menu { get; set; } Property Value Type Description ColorScheme Remarks This API will be deprecated in the future. Use ColorSchemes instead (e.g. edit.ColorScheme = Colors.ColorSchemes[\"Menu\"]; TopLevel The application toplevel color scheme, for the default toplevel views. Declaration public static ColorScheme TopLevel { get; set; } Property Value Type Description ColorScheme Remarks This API will be deprecated in the future. Use ColorSchemes instead (e.g. edit.ColorScheme = Colors.ColorSchemes[\"TopLevel\"];"
  },
  "api/Terminal.Gui/Terminal.Gui.ColorScheme.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ColorScheme.html",
    "title": "Class ColorScheme",
    "keywords": "Class ColorScheme Color scheme definitions, they cover some common scenarios and are used typically in containers such as Window and FrameView to set the scheme that is used by all the views contained inside. Inheritance System.Object ColorScheme Implements System.IEquatable < ColorScheme > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ColorScheme : IEquatable<ColorScheme> Properties Disabled The default color for text, when the view is disabled. Declaration public Attribute Disabled { get; set; } Property Value Type Description Attribute Focus The color for text when the view has the focus. Declaration public Attribute Focus { get; set; } Property Value Type Description Attribute HotFocus The color for the hotkey when the view is focused. Declaration public Attribute HotFocus { get; set; } Property Value Type Description Attribute HotNormal The color for the hotkey when a view is not focused Declaration public Attribute HotNormal { get; set; } Property Value Type Description Attribute Normal The default color for text, when the view is not focused. Declaration public Attribute Normal { get; set; } Property Value Type Description Attribute Methods Equals(Object) Compares two ColorScheme objects for equality. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean true if the two objects are equal Overrides System.Object.Equals(System.Object) Equals(ColorScheme) Compares two ColorScheme objects for equality. Declaration public bool Equals(ColorScheme other) Parameters Type Name Description ColorScheme other Returns Type Description System.Boolean true if the two objects are equal GetHashCode() Returns a hashcode for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 hashcode for this instance Overrides System.Object.GetHashCode() Operators Equality(ColorScheme, ColorScheme) Compares two ColorScheme objects for equality. Declaration public static bool operator ==(ColorScheme left, ColorScheme right) Parameters Type Name Description ColorScheme left ColorScheme right Returns Type Description System.Boolean true if the two objects are equivalent Inequality(ColorScheme, ColorScheme) Compares two ColorScheme objects for inequality. Declaration public static bool operator !=(ColorScheme left, ColorScheme right) Parameters Type Name Description ColorScheme left ColorScheme right Returns Type Description System.Boolean true if the two objects are not equivalent Implements System.IEquatable<T>"
  },
  "api/Terminal.Gui/Terminal.Gui.ColumnStyle.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ColumnStyle.html",
    "title": "Class ColumnStyle",
    "keywords": "Class ColumnStyle Describes how to render a given column in a TableView including Alignment and textual representation of cells (e.g. date formats) See TableView Deep Dive for more information . Inheritance System.Object ColumnStyle Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ColumnStyle Fields AlignmentGetter Defines a delegate for returning custom alignment per cell based on cell values. When specified this will override Alignment Declaration public Func<object, TextAlignment> AlignmentGetter Field Value Type Description System.Func < System.Object , TextAlignment > RepresentationGetter Defines a delegate for returning custom representations of cell values. If not set then System.Object.ToString() is used. Return values from your delegate may be truncated e.g. based on MaxWidth Declaration public Func<object, string> RepresentationGetter Field Value Type Description System.Func < System.Object , System.String > Properties Alignment Defines the default alignment for all values rendered in this column. For custom alignment based on cell contents use AlignmentGetter . Declaration public TextAlignment Alignment { get; set; } Property Value Type Description TextAlignment Format Defines the format for values e.g. \"yyyy-MM-dd\" for dates Declaration public string Format { get; set; } Property Value Type Description System.String MaxWidth Set the maximum width of the column in characters. This value will be ignored if more than the tables MaxCellWidth . Defaults to DefaultMaxCellWidth Declaration public int MaxWidth { get; set; } Property Value Type Description System.Int32 MinWidth Set the minimum width of the column in characters. This value will be ignored if more than the tables MaxCellWidth or the MaxWidth Declaration public int MinWidth { get; set; } Property Value Type Description System.Int32 Methods GetAlignment(Object) Returns the alignment for the cell based on cellValue and AlignmentGetter / Alignment Declaration public TextAlignment GetAlignment(object cellValue) Parameters Type Name Description System.Object cellValue Returns Type Description TextAlignment GetRepresentation(Object) Returns the full string to render (which may be truncated if too long) that the current style says best represents the given value Declaration public string GetRepresentation(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "api/Terminal.Gui/Terminal.Gui.ComboBox.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ComboBox.html",
    "title": "Class ComboBox",
    "keywords": "Class ComboBox ComboBox control Inheritance System.Object Responder View ComboBox Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.Focused View.MostFocused View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ComboBox : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors ComboBox() Public constructor Declaration public ComboBox() ComboBox(ustring) Public constructor Declaration public ComboBox(ustring text) Parameters Type Name Description NStack.ustring text ComboBox(Rect, IList) Public constructor Declaration public ComboBox(Rect rect, IList source) Parameters Type Name Description Rect rect System.Collections.IList source Properties ColorScheme Declaration public ColorScheme ColorScheme { get; set; } Property Value Type Description ColorScheme SelectedItem Gets the index of the currently selected item in the Source Declaration public int SelectedItem { get; } Property Value Type Description System.Int32 The selected item or -1 none selected. Source Gets or sets the IListDataSource backing this ComboBox , enabling custom rendering. Declaration public IListDataSource Source { get; set; } Property Value Type Description IListDataSource The source. Remarks Use SetSource(IList) to set a new System.Collections.IList source. Text The currently selected list item Declaration public ustring Text { get; set; } Property Value Type Description NStack.ustring Methods MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) OnLeave(View) Declaration public override bool OnLeave(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnLeave(View) OnOpenSelectedItem() Invokes the OnOpenSelectedItem event if it is defined. Declaration public virtual bool OnOpenSelectedItem() Returns Type Description System.Boolean OnSelectedChanged() Invokes the SelectedChanged event if it is defined. Declaration public virtual bool OnSelectedChanged() Returns Type Description System.Boolean ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent e) Parameters Type Name Description KeyEvent e Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) SetSource(IList) Sets the source of the ComboBox to an System.Collections.IList . Declaration public void SetSource(IList source) Parameters Type Name Description System.Collections.IList source Remarks Use the Source property to set a new IListDataSource source and use custome rendering. Events OpenSelectedItem This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item. Declaration public event Action<ListViewItemEventArgs> OpenSelectedItem Event Type Type Description System.Action < ListViewItemEventArgs > SelectedItemChanged This event is raised when the selected item in the ComboBox has changed. Declaration public event Action<ListViewItemEventArgs> SelectedItemChanged Event Type Type Description System.Action < ListViewItemEventArgs > Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.ConsoleDriver.DiagnosticFlags.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ConsoleDriver.DiagnosticFlags.html",
    "title": "Enum ConsoleDriver.DiagnosticFlags",
    "keywords": "Enum ConsoleDriver.DiagnosticFlags Enables diagnostic functions Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax [Flags] public enum DiagnosticFlags : uint Fields Name Description FramePadding When Enabled, DrawWindowFrame(Rect, Int32, Int32, Int32, Int32, Boolean, Boolean) will use 'L', 'R', 'T', and 'B' for padding instead of ' '. FrameRuler When enabled, DrawWindowFrame(Rect, Int32, Int32, Int32, Int32, Boolean, Boolean) will draw a ruler in the frame for any side with a padding value greater than 0. Off All diagnostics off"
  },
  "api/Terminal.Gui/Terminal.Gui.ConsoleDriver.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ConsoleDriver.html",
    "title": "Class ConsoleDriver",
    "keywords": "Class ConsoleDriver ConsoleDriver is an abstract class that defines the requirements for a console driver. There are currently three implementations: Terminal.Gui.CursesDriver (for Unix and Mac), Terminal.Gui.WindowsDriver , and Terminal.Gui.NetDriver that uses the .NET Console API. Inheritance System.Object ConsoleDriver FakeDriver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public abstract class ConsoleDriver Fields BottomTee The bottom tee. Declaration public Rune BottomTee Field Value Type Description System.Rune Checked Checkmark. Declaration public Rune Checked Field Value Type Description System.Rune Diamond Diamond character Declaration public Rune Diamond Field Value Type Description System.Rune DownArrow Down Arrow. Declaration public Rune DownArrow Field Value Type Description System.Rune HLine Horizontal line character. Declaration public Rune HLine Field Value Type Description System.Rune LeftArrow Left Arrow. Declaration public Rune LeftArrow Field Value Type Description System.Rune LeftBracket Left frame/bracket (e.g. '[' for Button ). Declaration public Rune LeftBracket Field Value Type Description System.Rune LeftDefaultIndicator Left indicator for default action (e.g. for Button ). Declaration public Rune LeftDefaultIndicator Field Value Type Description System.Rune LeftTee Left tee Declaration public Rune LeftTee Field Value Type Description System.Rune LLCorner Lower left corner Declaration public Rune LLCorner Field Value Type Description System.Rune LRCorner Lower right corner Declaration public Rune LRCorner Field Value Type Description System.Rune OffMeterSegement Off Segment indicator for meter views (e.g. ProgressBar . Declaration public Rune OffMeterSegement Field Value Type Description System.Rune OnMeterSegment On Segment indicator for meter views (e.g. ProgressBar . Declaration public Rune OnMeterSegment Field Value Type Description System.Rune RightArrow Right Arrow. Declaration public Rune RightArrow Field Value Type Description System.Rune RightBracket Right frame/bracket (e.g. ']' for Button ). Declaration public Rune RightBracket Field Value Type Description System.Rune RightDefaultIndicator Right indicator for default action (e.g. for Button ). Declaration public Rune RightDefaultIndicator Field Value Type Description System.Rune RightTee Right tee Declaration public Rune RightTee Field Value Type Description System.Rune Selected Selected mark. Declaration public Rune Selected Field Value Type Description System.Rune Stipple Stipple pattern Declaration public Rune Stipple Field Value Type Description System.Rune TerminalResized The handler fired when the terminal is resized. Declaration protected Action TerminalResized Field Value Type Description System.Action TopTee Top tee Declaration public Rune TopTee Field Value Type Description System.Rune ULCorner Upper left corner Declaration public Rune ULCorner Field Value Type Description System.Rune UnChecked Un-checked checkmark. Declaration public Rune UnChecked Field Value Type Description System.Rune UnSelected Un-selected selected mark. Declaration public Rune UnSelected Field Value Type Description System.Rune UpArrow Up Arrow. Declaration public Rune UpArrow Field Value Type Description System.Rune URCorner Upper right corner Declaration public Rune URCorner Field Value Type Description System.Rune VLine Vertical line character. Declaration public Rune VLine Field Value Type Description System.Rune Properties Clip Controls the current clipping region that AddRune/AddStr is subject to. Declaration public Rect Clip { get; set; } Property Value Type Description Rect The clip. Cols The current number of columns in the terminal. Declaration public abstract int Cols { get; } Property Value Type Description System.Int32 Diagnostics Set flags to enable/disable ConsoleDriver diagnostics. Declaration public static ConsoleDriver.DiagnosticFlags Diagnostics { get; set; } Property Value Type Description ConsoleDriver.DiagnosticFlags HeightAsBuffer If false height is measured by the window height and thus no scrolling. If true then height is measured by the buffer height, enabling scrolling. Declaration public abstract bool HeightAsBuffer { get; set; } Property Value Type Description System.Boolean Rows The current number of rows in the terminal. Declaration public abstract int Rows { get; } Property Value Type Description System.Int32 Top The current top in the terminal. Declaration public abstract int Top { get; } Property Value Type Description System.Int32 Methods AddRune(Rune) Adds the specified rune to the display at the current cursor position Declaration public abstract void AddRune(Rune rune) Parameters Type Name Description System.Rune rune Rune to add. AddStr(ustring) Adds the specified Declaration public abstract void AddStr(ustring str) Parameters Type Name Description NStack.ustring str String. CookMouse() Enables the cooked event processing from the mouse driver Declaration public abstract void CookMouse() DrawFrame(Rect, Int32, Boolean) Draws a frame on the specified region with the specified padding around the frame. Declaration public virtual void DrawFrame(Rect region, int padding, bool fill) Parameters Type Name Description Rect region Screen relative region where the frame will be drawn. System.Int32 padding Padding to add on the sides. System.Boolean fill If set to true it will clear the contents with the current color, otherwise the contents will be left untouched. Remarks This API has been superseded by DrawWindowFrame(Rect, Int32, Int32, Int32, Int32, Boolean, Boolean) . DrawWindowFrame(Rect, Int32, Int32, Int32, Int32, Boolean, Boolean) Draws a frame for a window with padding and an optional visible border inside the padding. Declaration public virtual void DrawWindowFrame(Rect region, int paddingLeft = 0, int paddingTop = 0, int paddingRight = 0, int paddingBottom = 0, bool border = true, bool fill = false) Parameters Type Name Description Rect region Screen relative region where the frame will be drawn. System.Int32 paddingLeft Number of columns to pad on the left (if 0 the border will not appear on the left). System.Int32 paddingTop Number of rows to pad on the top (if 0 the border and title will not appear on the top). System.Int32 paddingRight Number of columns to pad on the right (if 0 the border will not appear on the right). System.Int32 paddingBottom Number of rows to pad on the bottom (if 0 the border will not appear on the bottom). System.Boolean border If set to true and any padding dimension is > 0 the border will be drawn. System.Boolean fill If set to true it will clear the content area (the area inside the padding) with the current color, otherwise the content area will be left untouched. DrawWindowTitle(Rect, ustring, Int32, Int32, Int32, Int32, TextAlignment) Draws the title for a Window-style view incorporating padding. Declaration public virtual void DrawWindowTitle(Rect region, ustring title, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, TextAlignment textAlignment = TextAlignment.Left) Parameters Type Name Description Rect region Screen relative region where the frame will be drawn. NStack.ustring title The title for the window. The title will only be drawn if title is not null or empty and paddingTop is greater than 0. System.Int32 paddingLeft Number of columns to pad on the left (if 0 the border will not appear on the left). System.Int32 paddingTop Number of rows to pad on the top (if 0 the border and title will not appear on the top). System.Int32 paddingRight Number of columns to pad on the right (if 0 the border will not appear on the right). System.Int32 paddingBottom Number of rows to pad on the bottom (if 0 the border will not appear on the bottom). TextAlignment textAlignment Not yet implemented. End() Ends the execution of the console driver. Declaration public abstract void End() EnsureCursorVisibility() Ensure the cursor visibility Declaration public abstract bool EnsureCursorVisibility() Returns Type Description System.Boolean true upon success GetAttribute() Gets the current Attribute . Declaration public abstract Attribute GetAttribute() Returns Type Description Attribute The current attribute. GetCursorVisibility(out CursorVisibility) Retreive the cursor caret visibility Declaration public abstract bool GetCursorVisibility(out CursorVisibility visibility) Parameters Type Name Description CursorVisibility visibility The current CursorVisibility Returns Type Description System.Boolean true upon success Init(Action) Initializes the driver Declaration public abstract void Init(Action terminalResized) Parameters Type Name Description System.Action terminalResized Method to invoke when the terminal is resized. MakeAttribute(Color, Color) Make the attribute for the foreground and background colors. Declaration public abstract Attribute MakeAttribute(Color fore, Color back) Parameters Type Name Description Color fore Foreground. Color back Background. Returns Type Description Attribute MakePrintable(Rune) Ensures a Rune is not a control character and can be displayed by translating characters below 0x20 to equivalent, printable, Unicode chars. Declaration public static Rune MakePrintable(Rune c) Parameters Type Name Description System.Rune c Rune to translate Returns Type Description System.Rune Move(Int32, Int32) Moves the cursor to the specified column and row. Declaration public abstract void Move(int col, int row) Parameters Type Name Description System.Int32 col Column to move the cursor to. System.Int32 row Row to move the cursor to. PrepareToRun(MainLoop, Action<KeyEvent>, Action<KeyEvent>, Action<KeyEvent>, Action<MouseEvent>) Prepare the driver and set the key and mouse events handlers. Declaration public abstract void PrepareToRun(MainLoop mainLoop, Action<KeyEvent> keyHandler, Action<KeyEvent> keyDownHandler, Action<KeyEvent> keyUpHandler, Action<MouseEvent> mouseHandler) Parameters Type Name Description MainLoop mainLoop The main loop. System.Action < KeyEvent > keyHandler The handler for ProcessKey System.Action < KeyEvent > keyDownHandler The handler for key down events System.Action < KeyEvent > keyUpHandler The handler for key up events System.Action < MouseEvent > mouseHandler The handler for mouse events Refresh() Updates the screen to reflect all the changes that have been done to the display buffer Declaration public abstract void Refresh() SetAttribute(Attribute) Selects the specified attribute as the attribute to use for future calls to AddRune, AddString. Declaration public abstract void SetAttribute(Attribute c) Parameters Type Name Description Attribute c C. SetColors(ConsoleColor, ConsoleColor) Set Colors from limit sets of colors. Declaration public abstract void SetColors(ConsoleColor foreground, ConsoleColor background) Parameters Type Name Description System.ConsoleColor foreground Foreground. System.ConsoleColor background Background. SetColors(Int16, Int16) Advanced uses - set colors to any pre-set pairs, you would need to init_color that independently with the R, G, B values. Declaration public abstract void SetColors(short foregroundColorId, short backgroundColorId) Parameters Type Name Description System.Int16 foregroundColorId Foreground color identifier. System.Int16 backgroundColorId Background color identifier. SetCursorVisibility(CursorVisibility) Change the cursor caret visibility Declaration public abstract bool SetCursorVisibility(CursorVisibility visibility) Parameters Type Name Description CursorVisibility visibility The wished CursorVisibility Returns Type Description System.Boolean true upon success SetTerminalResized(Action) Set the handler when the terminal is resized. Declaration public void SetTerminalResized(Action terminalResized) Parameters Type Name Description System.Action terminalResized StartReportingMouseMoves() Start of mouse moves. Declaration public abstract void StartReportingMouseMoves() StopReportingMouseMoves() Stop reporting mouses moves. Declaration public abstract void StopReportingMouseMoves() Suspend() Suspend the application, typically needs to save the state, suspend the app and upon return, reset the console driver. Declaration public abstract void Suspend() UncookMouse() Disables the cooked event processing from the mouse driver. At startup, it is assumed mouse events are cooked. Declaration public abstract void UncookMouse() UpdateCursor() Updates the location of the cursor position Declaration public abstract void UpdateCursor() UpdateScreen() Redraws the physical screen with the contents that have been queued up via any of the printing commands. Declaration public abstract void UpdateScreen()"
  },
  "api/Terminal.Gui/Terminal.Gui.CursorVisibility.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.CursorVisibility.html",
    "title": "Enum CursorVisibility",
    "keywords": "Enum CursorVisibility Cursors Visibility that are displayed Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public enum CursorVisibility Fields Name Description Box Cursor caret is displayed as a blinking block ▉ BoxFix Cursor caret is displayed a block ▉ Default Cursor caret has default Invisible Cursor caret is hidden Underline Cursor caret is normally shown as a blinking underline bar _ UnderlineFix Cursor caret is normally shown as a underline bar _ Vertical Cursor caret is displayed a blinking vertical bar | VerticalFix Cursor caret is displayed a blinking vertical bar |"
  },
  "api/Terminal.Gui/Terminal.Gui.DateField.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.DateField.html",
    "title": "Class DateField",
    "keywords": "Class DateField Simple Date editing View Inheritance System.Object Responder View TextField DateField Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members TextField.Used TextField.ReadOnly TextField.TextChanging TextField.TextChanged TextField.OnLeave(View) TextField.Frame TextField.Text TextField.Secret TextField.CursorPosition TextField.PositionCursor() TextField.Redraw(Rect) TextField.CanFocus TextField.SelectedStart TextField.SelectedLength TextField.SelectedText TextField.ClearAllSelection() TextField.Copy() TextField.Cut() TextField.Paste() TextField.OnTextChanging(ustring) TextField.DesiredCursorVisibility TextField.OnEnter(View) View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class DateField : TextField, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The DateField View provides date editing functionality with mouse support. Constructors DateField() Initializes a new instance of DateField using Computed layout. Declaration public DateField() DateField(DateTime) Initializes a new instance of DateField using Computed layout. Declaration public DateField(DateTime date) Parameters Type Name Description System.DateTime date DateField(Int32, Int32, DateTime, Boolean) Initializes a new instance of DateField using Absolute layout. Declaration public DateField(int x, int y, DateTime date, bool isShort = false) Parameters Type Name Description System.Int32 x The x coordinate. System.Int32 y The y coordinate. System.DateTime date Initial date contents. System.Boolean isShort If true, shows only two digits for the year. Properties Date Gets or sets the date of the DateField . Declaration public DateTime Date { get; set; } Property Value Type Description System.DateTime Remarks IsShortFormat Get or set the date format for the widget. Declaration public bool IsShortFormat { get; set; } Property Value Type Description System.Boolean Methods MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent ev) Parameters Type Name Description MouseEvent ev Returns Type Description System.Boolean Overrides TextField.MouseEvent(MouseEvent) OnDateChanged(DateTimeEventArgs<DateTime>) Event firing method for the DateChanged event. Declaration public virtual void OnDateChanged(DateTimeEventArgs<DateTime> args) Parameters Type Name Description DateTimeEventArgs < System.DateTime > args Event arguments ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides TextField.ProcessKey(KeyEvent) Events DateChanged DateChanged event, raised when the Date property has changed. Declaration public event Action<DateTimeEventArgs<DateTime>> DateChanged Event Type Type Description System.Action < DateTimeEventArgs < System.DateTime >> Remarks This event is raised when the Date property changes. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.DateTimeEventArgs-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.DateTimeEventArgs-1.html",
    "title": "Class DateTimeEventArgs<T>",
    "keywords": "Class DateTimeEventArgs<T> Defines the event arguments for DateChanged and TimeChanged events. Inheritance System.Object System.EventArgs DateTimeEventArgs<T> Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class DateTimeEventArgs<T> : EventArgs Type Parameters Name Description T Constructors DateTimeEventArgs(T, T, String) Initializes a new instance of DateTimeEventArgs<T> Declaration public DateTimeEventArgs(T oldValue, T newValue, string format) Parameters Type Name Description T oldValue The old DateField or TimeField value. T newValue The new DateField or TimeField value. System.String format The DateField or TimeField format string. Properties Format The DateField or TimeField format. Declaration public string Format { get; } Property Value Type Description System.String NewValue The new DateField or TimeField value. Declaration public T NewValue { get; } Property Value Type Description T OldValue The old DateField or TimeField value. Declaration public T OldValue { get; } Property Value Type Description T"
  },
  "api/Terminal.Gui/Terminal.Gui.DelegateTreeBuilder-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.DelegateTreeBuilder-1.html",
    "title": "Class DelegateTreeBuilder<T>",
    "keywords": "Class DelegateTreeBuilder<T> Implementation of ITreeBuilder<T> that uses user defined functions Inheritance System.Object TreeBuilder <T> DelegateTreeBuilder<T> Implements ITreeBuilder <T> Inherited Members TreeBuilder<T>.SupportsCanExpand System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class DelegateTreeBuilder<T> : TreeBuilder<T>, ITreeBuilder<T> Type Parameters Name Description T Constructors DelegateTreeBuilder(Func<T, IEnumerable<T>>) Constructs an implementation of ITreeBuilder<T> that calls the user defined method childGetter to determine children Declaration public DelegateTreeBuilder(Func<T, IEnumerable<T>> childGetter) Parameters Type Name Description System.Func <T, System.Collections.Generic.IEnumerable <T>> childGetter DelegateTreeBuilder(Func<T, IEnumerable<T>>, Func<T, Boolean>) Constructs an implementation of ITreeBuilder<T> that calls the user defined method childGetter to determine children and canExpand to determine expandability Declaration public DelegateTreeBuilder(Func<T, IEnumerable<T>> childGetter, Func<T, bool> canExpand) Parameters Type Name Description System.Func <T, System.Collections.Generic.IEnumerable <T>> childGetter System.Func <T, System.Boolean > canExpand Methods CanExpand(T) Returns whether a node can be expanded based on the delegate passed during construction Declaration public override bool CanExpand(T toExpand) Parameters Type Name Description T toExpand Returns Type Description System.Boolean Overrides Terminal.Gui.TreeBuilder<T>.CanExpand(T) GetChildren(T) Returns children using the delegate method passed during construction Declaration public override IEnumerable<T> GetChildren(T forObject) Parameters Type Name Description T forObject Returns Type Description System.Collections.Generic.IEnumerable <T> Overrides Terminal.Gui.TreeBuilder<T>.GetChildren(T) Implements ITreeBuilder<T>"
  },
  "api/Terminal.Gui/Terminal.Gui.Dialog.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Dialog.html",
    "title": "Class Dialog",
    "keywords": "Class Dialog The Dialog View is a Window that by default is centered and contains one or more Button s. It defaults to the Dialog color scheme and has a 1 cell padding around the edges. Inheritance System.Object Responder View Toplevel Window Dialog FileDialog Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members Window.Title Window.Add(View) Window.Remove(View) Window.RemoveAll() Window.Redraw(Rect) Window.MouseEvent(MouseEvent) Window.Text Window.TextAlignment Toplevel.Running Toplevel.Loaded Toplevel.Ready Toplevel.Unloaded Toplevel.Create() Toplevel.CanFocus Toplevel.Modal Toplevel.MenuBar Toplevel.StatusBar Toplevel.OnKeyDown(KeyEvent) Toplevel.OnKeyUp(KeyEvent) Toplevel.ProcessColdKey(KeyEvent) Toplevel.WillPresent() View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Dialog : Window, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks To run the Dialog modally, create the Dialog , and pass it to Run(Func<Exception, Boolean>) . This will execute the dialog until it terminates via the [ESC] or [CTRL-Q] key, or when one of the views or buttons added to the dialog calls RequestStop() . Constructors Dialog() Initializes a new instance of the Dialog class using Computed . Declaration public Dialog() Remarks Te Dialog will be vertically and horizontally centered in the container and the size will be 85% of the container. After initialzation use X , Y , Width , and Height to override this with a location or size. Use AddButton(Button) to add buttons to the dialog. Dialog(ustring, Int32, Int32, Button[]) Initializes a new instance of the Dialog class using Computed positioning and an optional set of Button s to display Declaration public Dialog(ustring title, int width, int height, params Button[] buttons) Parameters Type Name Description NStack.ustring title Title for the dialog. System.Int32 width Width for the dialog. System.Int32 height Height for the dialog. Button [] buttons Optional buttons to lay out at the bottom of the dialog. Remarks if width and height are both 0, the Dialog will be vertically and horizontally centered in the container and the size will be 85% of the container. After initialzation use X , Y , Width , and Height to override this with a location or size. Dialog(ustring, Button[]) Initializes a new instance of the Dialog class using Computed positioning and with an optional set of Button s to display Declaration public Dialog(ustring title, params Button[] buttons) Parameters Type Name Description NStack.ustring title Title for the dialog. Button [] buttons Optional buttons to lay out at the bottom of the dialog. Remarks Te Dialog will be vertically and horizontally centered in the container and the size will be 85% of the container. After initialzation use X , Y , Width , and Height to override this with a location or size. Methods AddButton(Button) Adds a Button to the Dialog , its layout will be controlled by the Dialog Declaration public void AddButton(Button button) Parameters Type Name Description Button button Button to add. ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides Toplevel.ProcessKey(KeyEvent) Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.Dim.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Dim.html",
    "title": "Class Dim",
    "keywords": "Class Dim Dim properties of a View to control the position. Inheritance System.Object Dim Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Dim Remarks Use the Dim objects on the Width or Height properties of a View to control the position. These can be used to set the absolute position, when merely assigning an integer value (via the implicit integer to Pos conversion), and they can be combined to produce more useful layouts, like: Pos.Center - 3, which would shift the position of the View 3 characters to the left after centering for example. Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false . Overrides System.Object.Equals(System.Object) Fill(Int32) Initializes a new instance of the Dim class that fills the dimension, but leaves the specified number of colums for a margin. Declaration public static Dim Fill(int margin = 0) Parameters Type Name Description System.Int32 margin Margin to use. Returns Type Description Dim The Fill dimension. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Overrides System.Object.GetHashCode() Height(View) Returns a Dim object tracks the Height of the specified View . Declaration public static Dim Height(View view) Parameters Type Name Description View view The view that will be tracked. Returns Type Description Dim The Dim of the other View . Percent(Single, Boolean) Creates a percentage Dim object Declaration public static Dim Percent(float n, bool r = false) Parameters Type Name Description System.Single n A value between 0 and 100 representing the percentage. System.Boolean r If true the Percent is computed based on the remaining space after the X/Y anchor positions. If false is computed based on the whole original space. Returns Type Description Dim The percent Dim object. Examples This initializes a TextField that is centered horizontally, is 50% of the way down, is 30% the height, and is 80% the width of the View it added to. var textView = new TextView () { X = Pos.Center (), Y = Pos.Percent (50), Width = Dim.Percent (80), Height = Dim.Percent (30), }; Sized(Int32) Creates an Absolute Dim from the specified integer value. Declaration public static Dim Sized(int n) Parameters Type Name Description System.Int32 n The value to convert to the Dim . Returns Type Description Dim The Absolute Dim . Width(View) Returns a Dim object tracks the Width of the specified View . Declaration public static Dim Width(View view) Parameters Type Name Description View view The view that will be tracked. Returns Type Description Dim The Dim of the other View . Operators Addition(Dim, Dim) Adds a Dim to a Dim , yielding a new Dim . Declaration public static Dim operator +(Dim left, Dim right) Parameters Type Name Description Dim left The first Dim to add. Dim right The second Dim to add. Returns Type Description Dim The Dim that is the sum of the values of left and right . Implicit(Int32 to Dim) Creates an Absolute Dim from the specified integer value. Declaration public static implicit operator Dim(int n) Parameters Type Name Description System.Int32 n The value to convert to the pos. Returns Type Description Dim The Absolute Dim . Subtraction(Dim, Dim) Subtracts a Dim from a Dim , yielding a new Dim . Declaration public static Dim operator -(Dim left, Dim right) Parameters Type Name Description Dim left The Dim to subtract from (the minuend). Dim right The Dim to subtract (the subtrahend). Returns Type Description Dim The Dim that is the left minus right ."
  },
  "api/Terminal.Gui/Terminal.Gui.DisplayModeLayout.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.DisplayModeLayout.html",
    "title": "Enum DisplayModeLayout",
    "keywords": "Enum DisplayModeLayout Used for choose the display mode of this RadioGroup Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public enum DisplayModeLayout Fields Name Description Horizontal Horizontal mode display. Vertical Vertical mode display. It's the default."
  },
  "api/Terminal.Gui/Terminal.Gui.FakeConsole.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.FakeConsole.html",
    "title": "Class FakeConsole",
    "keywords": "Class FakeConsole Inheritance System.Object FakeConsole Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public static class FakeConsole Fields MockKeyPresses Declaration public static Stack<ConsoleKeyInfo> MockKeyPresses Field Value Type Description System.Collections.Generic.Stack < System.ConsoleKeyInfo > Properties BackgroundColor Declaration public static ConsoleColor BackgroundColor { get; set; } Property Value Type Description System.ConsoleColor BufferHeight Declaration public static int BufferHeight { get; set; } Property Value Type Description System.Int32 BufferWidth Declaration public static int BufferWidth { get; set; } Property Value Type Description System.Int32 CapsLock Declaration public static bool CapsLock { get; } Property Value Type Description System.Boolean CursorLeft Declaration public static int CursorLeft { get; set; } Property Value Type Description System.Int32 CursorSize Declaration public static int CursorSize { get; set; } Property Value Type Description System.Int32 CursorTop Declaration public static int CursorTop { get; set; } Property Value Type Description System.Int32 CursorVisible Declaration public static bool CursorVisible { get; set; } Property Value Type Description System.Boolean Error Declaration public static TextWriter Error { get; } Property Value Type Description System.IO.TextWriter ForegroundColor Declaration public static ConsoleColor ForegroundColor { get; set; } Property Value Type Description System.ConsoleColor In Declaration public static TextReader In { get; } Property Value Type Description System.IO.TextReader InputEncoding Declaration public static Encoding InputEncoding { get; set; } Property Value Type Description System.Text.Encoding IsErrorRedirected Declaration public static bool IsErrorRedirected { get; } Property Value Type Description System.Boolean IsInputRedirected Declaration public static bool IsInputRedirected { get; } Property Value Type Description System.Boolean IsOutputRedirected Declaration public static bool IsOutputRedirected { get; } Property Value Type Description System.Boolean KeyAvailable Declaration public static bool KeyAvailable { get; } Property Value Type Description System.Boolean LargestWindowHeight Declaration public static int LargestWindowHeight { get; } Property Value Type Description System.Int32 LargestWindowWidth Declaration public static int LargestWindowWidth { get; } Property Value Type Description System.Int32 NumberLock Declaration public static bool NumberLock { get; } Property Value Type Description System.Boolean Out Declaration public static TextWriter Out { get; } Property Value Type Description System.IO.TextWriter OutputEncoding Declaration public static Encoding OutputEncoding { get; set; } Property Value Type Description System.Text.Encoding Title Declaration public static string Title { get; set; } Property Value Type Description System.String TreatControlCAsInput Declaration public static bool TreatControlCAsInput { get; set; } Property Value Type Description System.Boolean WindowHeight Declaration public static int WindowHeight { get; set; } Property Value Type Description System.Int32 WindowLeft Declaration public static int WindowLeft { get; set; } Property Value Type Description System.Int32 WindowTop Declaration public static int WindowTop { get; set; } Property Value Type Description System.Int32 WindowWidth Declaration public static int WindowWidth { get; set; } Property Value Type Description System.Int32 Methods Beep() Declaration public static void Beep() Beep(Int32, Int32) Declaration public static void Beep(int frequency, int duration) Parameters Type Name Description System.Int32 frequency System.Int32 duration Clear() Declaration public static void Clear() MoveBufferArea(Int32, Int32, Int32, Int32, Int32, Int32) Declaration public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop) Parameters Type Name Description System.Int32 sourceLeft System.Int32 sourceTop System.Int32 sourceWidth System.Int32 sourceHeight System.Int32 targetLeft System.Int32 targetTop MoveBufferArea(Int32, Int32, Int32, Int32, Int32, Int32, Char, ConsoleColor, ConsoleColor) Declaration public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor) Parameters Type Name Description System.Int32 sourceLeft System.Int32 sourceTop System.Int32 sourceWidth System.Int32 sourceHeight System.Int32 targetLeft System.Int32 targetTop System.Char sourceChar System.ConsoleColor sourceForeColor System.ConsoleColor sourceBackColor OpenStandardError() Declaration public static Stream OpenStandardError() Returns Type Description System.IO.Stream OpenStandardError(Int32) Declaration public static Stream OpenStandardError(int bufferSize) Parameters Type Name Description System.Int32 bufferSize Returns Type Description System.IO.Stream OpenStandardInput() Declaration public static Stream OpenStandardInput() Returns Type Description System.IO.Stream OpenStandardInput(Int32) Declaration public static Stream OpenStandardInput(int bufferSize) Parameters Type Name Description System.Int32 bufferSize Returns Type Description System.IO.Stream OpenStandardOutput() Declaration public static Stream OpenStandardOutput() Returns Type Description System.IO.Stream OpenStandardOutput(Int32) Declaration public static Stream OpenStandardOutput(int bufferSize) Parameters Type Name Description System.Int32 bufferSize Returns Type Description System.IO.Stream Read() Declaration public static int Read() Returns Type Description System.Int32 ReadKey() Declaration public static ConsoleKeyInfo ReadKey() Returns Type Description System.ConsoleKeyInfo ReadKey(Boolean) Declaration public static ConsoleKeyInfo ReadKey(bool intercept) Parameters Type Name Description System.Boolean intercept Returns Type Description System.ConsoleKeyInfo ReadLine() Declaration public static string ReadLine() Returns Type Description System.String ResetColor() Declaration public static void ResetColor() SetBufferSize(Int32, Int32) Declaration public static void SetBufferSize(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height SetCursorPosition(Int32, Int32) Declaration public static void SetCursorPosition(int left, int top) Parameters Type Name Description System.Int32 left System.Int32 top SetError(TextWriter) Declaration public static void SetError(TextWriter newError) Parameters Type Name Description System.IO.TextWriter newError SetIn(TextReader) Declaration public static void SetIn(TextReader newIn) Parameters Type Name Description System.IO.TextReader newIn SetOut(TextWriter) Declaration public static void SetOut(TextWriter newOut) Parameters Type Name Description System.IO.TextWriter newOut SetWindowPosition(Int32, Int32) Declaration public static void SetWindowPosition(int left, int top) Parameters Type Name Description System.Int32 left System.Int32 top SetWindowSize(Int32, Int32) Declaration public static void SetWindowSize(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height Write(Boolean) Declaration public static void Write(bool value) Parameters Type Name Description System.Boolean value Write(Char) Declaration public static void Write(char value) Parameters Type Name Description System.Char value Write(Char[]) Declaration public static void Write(char[] buffer) Parameters Type Name Description System.Char [] buffer Write(Char[], Int32, Int32) Declaration public static void Write(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count Write(Decimal) Declaration public static void Write(decimal value) Parameters Type Name Description System.Decimal value Write(Double) Declaration public static void Write(double value) Parameters Type Name Description System.Double value Write(Int32) Declaration public static void Write(int value) Parameters Type Name Description System.Int32 value Write(Int64) Declaration public static void Write(long value) Parameters Type Name Description System.Int64 value Write(Object) Declaration public static void Write(object value) Parameters Type Name Description System.Object value Write(Single) Declaration public static void Write(float value) Parameters Type Name Description System.Single value Write(String) Declaration public static void Write(string value) Parameters Type Name Description System.String value Write(String, Object) Declaration public static void Write(string format, object arg0) Parameters Type Name Description System.String format System.Object arg0 Write(String, Object, Object) Declaration public static void Write(string format, object arg0, object arg1) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 Write(String, Object, Object, Object) Declaration public static void Write(string format, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 Write(String, Object, Object, Object, Object) Declaration public static void Write(string format, object arg0, object arg1, object arg2, object arg3) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 System.Object arg3 Write(String, Object[]) Declaration public static void Write(string format, params object[] arg) Parameters Type Name Description System.String format System.Object [] arg Write(UInt32) Declaration public static void Write(uint value) Parameters Type Name Description System.UInt32 value Write(UInt64) Declaration public static void Write(ulong value) Parameters Type Name Description System.UInt64 value WriteLine() Declaration public static void WriteLine() WriteLine(Boolean) Declaration public static void WriteLine(bool value) Parameters Type Name Description System.Boolean value WriteLine(Char) Declaration public static void WriteLine(char value) Parameters Type Name Description System.Char value WriteLine(Char[]) Declaration public static void WriteLine(char[] buffer) Parameters Type Name Description System.Char [] buffer WriteLine(Char[], Int32, Int32) Declaration public static void WriteLine(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count WriteLine(Decimal) Declaration public static void WriteLine(decimal value) Parameters Type Name Description System.Decimal value WriteLine(Double) Declaration public static void WriteLine(double value) Parameters Type Name Description System.Double value WriteLine(Int32) Declaration public static void WriteLine(int value) Parameters Type Name Description System.Int32 value WriteLine(Int64) Declaration public static void WriteLine(long value) Parameters Type Name Description System.Int64 value WriteLine(Object) Declaration public static void WriteLine(object value) Parameters Type Name Description System.Object value WriteLine(Single) Declaration public static void WriteLine(float value) Parameters Type Name Description System.Single value WriteLine(String) Declaration public static void WriteLine(string value) Parameters Type Name Description System.String value WriteLine(String, Object) Declaration public static void WriteLine(string format, object arg0) Parameters Type Name Description System.String format System.Object arg0 WriteLine(String, Object, Object) Declaration public static void WriteLine(string format, object arg0, object arg1) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 WriteLine(String, Object, Object, Object) Declaration public static void WriteLine(string format, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 WriteLine(String, Object, Object, Object, Object) Declaration public static void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 System.Object arg3 WriteLine(String, Object[]) Declaration public static void WriteLine(string format, params object[] arg) Parameters Type Name Description System.String format System.Object [] arg WriteLine(UInt32) Declaration public static void WriteLine(uint value) Parameters Type Name Description System.UInt32 value WriteLine(UInt64) Declaration public static void WriteLine(ulong value) Parameters Type Name Description System.UInt64 value"
  },
  "api/Terminal.Gui/Terminal.Gui.FakeDriver.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.FakeDriver.html",
    "title": "Class FakeDriver",
    "keywords": "Class FakeDriver Implements a mock ConsoleDriver for unit testing Inheritance System.Object ConsoleDriver FakeDriver Inherited Members ConsoleDriver.TerminalResized ConsoleDriver.MakePrintable(Rune) ConsoleDriver.SetTerminalResized(Action) ConsoleDriver.DrawWindowTitle(Rect, ustring, Int32, Int32, Int32, Int32, TextAlignment) ConsoleDriver.Diagnostics ConsoleDriver.DrawWindowFrame(Rect, Int32, Int32, Int32, Int32, Boolean, Boolean) ConsoleDriver.DrawFrame(Rect, Int32, Boolean) ConsoleDriver.Clip ConsoleDriver.HLine ConsoleDriver.VLine ConsoleDriver.Stipple ConsoleDriver.Diamond ConsoleDriver.ULCorner ConsoleDriver.LLCorner ConsoleDriver.URCorner ConsoleDriver.LRCorner ConsoleDriver.LeftTee ConsoleDriver.RightTee ConsoleDriver.TopTee ConsoleDriver.BottomTee ConsoleDriver.Checked ConsoleDriver.UnChecked ConsoleDriver.Selected ConsoleDriver.UnSelected ConsoleDriver.RightArrow ConsoleDriver.LeftArrow ConsoleDriver.DownArrow ConsoleDriver.UpArrow ConsoleDriver.LeftDefaultIndicator ConsoleDriver.RightDefaultIndicator ConsoleDriver.LeftBracket ConsoleDriver.RightBracket ConsoleDriver.OnMeterSegment ConsoleDriver.OffMeterSegement System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class FakeDriver : ConsoleDriver Constructors FakeDriver() Declaration public FakeDriver() Properties Cols Declaration public override int Cols { get; } Property Value Type Description System.Int32 Overrides ConsoleDriver.Cols HeightAsBuffer Declaration public override bool HeightAsBuffer { get; set; } Property Value Type Description System.Boolean Overrides ConsoleDriver.HeightAsBuffer Rows Declaration public override int Rows { get; } Property Value Type Description System.Int32 Overrides ConsoleDriver.Rows Top Declaration public override int Top { get; } Property Value Type Description System.Int32 Overrides ConsoleDriver.Top Methods AddRune(Rune) Declaration public override void AddRune(Rune rune) Parameters Type Name Description System.Rune rune Overrides ConsoleDriver.AddRune(Rune) AddStr(ustring) Declaration public override void AddStr(ustring str) Parameters Type Name Description NStack.ustring str Overrides ConsoleDriver.AddStr(ustring) CookMouse() Declaration public override void CookMouse() Overrides ConsoleDriver.CookMouse() End() Declaration public override void End() Overrides ConsoleDriver.End() EnsureCursorVisibility() Declaration public override bool EnsureCursorVisibility() Returns Type Description System.Boolean Overrides ConsoleDriver.EnsureCursorVisibility() GetAttribute() Declaration public override Attribute GetAttribute() Returns Type Description Attribute Overrides ConsoleDriver.GetAttribute() GetCursorVisibility(out CursorVisibility) Declaration public override bool GetCursorVisibility(out CursorVisibility visibility) Parameters Type Name Description CursorVisibility visibility Returns Type Description System.Boolean Overrides ConsoleDriver.GetCursorVisibility(out CursorVisibility) Init(Action) Declaration public override void Init(Action terminalResized) Parameters Type Name Description System.Action terminalResized Overrides ConsoleDriver.Init(Action) MakeAttribute(Color, Color) Declaration public override Attribute MakeAttribute(Color fore, Color back) Parameters Type Name Description Color fore Color back Returns Type Description Attribute Overrides ConsoleDriver.MakeAttribute(Color, Color) Move(Int32, Int32) Declaration public override void Move(int col, int row) Parameters Type Name Description System.Int32 col System.Int32 row Overrides ConsoleDriver.Move(Int32, Int32) PrepareToRun(MainLoop, Action<KeyEvent>, Action<KeyEvent>, Action<KeyEvent>, Action<MouseEvent>) Declaration public override void PrepareToRun(MainLoop mainLoop, Action<KeyEvent> keyHandler, Action<KeyEvent> keyDownHandler, Action<KeyEvent> keyUpHandler, Action<MouseEvent> mouseHandler) Parameters Type Name Description MainLoop mainLoop System.Action < KeyEvent > keyHandler System.Action < KeyEvent > keyDownHandler System.Action < KeyEvent > keyUpHandler System.Action < MouseEvent > mouseHandler Overrides ConsoleDriver.PrepareToRun(MainLoop, Action<KeyEvent>, Action<KeyEvent>, Action<KeyEvent>, Action<MouseEvent>) Refresh() Declaration public override void Refresh() Overrides ConsoleDriver.Refresh() SetAttribute(Attribute) Declaration public override void SetAttribute(Attribute c) Parameters Type Name Description Attribute c Overrides ConsoleDriver.SetAttribute(Attribute) SetColors(ConsoleColor, ConsoleColor) Declaration public override void SetColors(ConsoleColor foreground, ConsoleColor background) Parameters Type Name Description System.ConsoleColor foreground System.ConsoleColor background Overrides ConsoleDriver.SetColors(ConsoleColor, ConsoleColor) SetColors(Int16, Int16) Declaration public override void SetColors(short foregroundColorId, short backgroundColorId) Parameters Type Name Description System.Int16 foregroundColorId System.Int16 backgroundColorId Overrides ConsoleDriver.SetColors(Int16, Int16) SetCursorVisibility(CursorVisibility) Declaration public override bool SetCursorVisibility(CursorVisibility visibility) Parameters Type Name Description CursorVisibility visibility Returns Type Description System.Boolean Overrides ConsoleDriver.SetCursorVisibility(CursorVisibility) StartReportingMouseMoves() Declaration public override void StartReportingMouseMoves() Overrides ConsoleDriver.StartReportingMouseMoves() StopReportingMouseMoves() Declaration public override void StopReportingMouseMoves() Overrides ConsoleDriver.StopReportingMouseMoves() Suspend() Declaration public override void Suspend() Overrides ConsoleDriver.Suspend() UncookMouse() Declaration public override void UncookMouse() Overrides ConsoleDriver.UncookMouse() UpdateCursor() Declaration public override void UpdateCursor() Overrides ConsoleDriver.UpdateCursor() UpdateScreen() Declaration public override void UpdateScreen() Overrides ConsoleDriver.UpdateScreen()"
  },
  "api/Terminal.Gui/Terminal.Gui.FakeMainLoop.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.FakeMainLoop.html",
    "title": "Class FakeMainLoop",
    "keywords": "Class FakeMainLoop Mainloop intended to be used with the .NET System.Console API, and can be used on Windows and Unix, it is cross platform but lacks things like file descriptor monitoring. Inheritance System.Object FakeMainLoop Implements IMainLoopDriver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class FakeMainLoop : IMainLoopDriver Remarks This implementation is used for FakeDriver. Constructors FakeMainLoop(Func<ConsoleKeyInfo>) Initializes the class. Declaration public FakeMainLoop(Func<ConsoleKeyInfo> consoleKeyReaderFn = null) Parameters Type Name Description System.Func < System.ConsoleKeyInfo > consoleKeyReaderFn The method to be called to get a key from the console. Remarks Passing a consoleKeyReaderfn is provided to support unit test scenarios. Fields KeyPressed Invoked when a Key is pressed. Declaration public Action<ConsoleKeyInfo> KeyPressed Field Value Type Description System.Action < System.ConsoleKeyInfo > Explicit Interface Implementations IMainLoopDriver.EventsPending(Boolean) Declaration bool IMainLoopDriver.EventsPending(bool wait) Parameters Type Name Description System.Boolean wait Returns Type Description System.Boolean IMainLoopDriver.MainIteration() Declaration void IMainLoopDriver.MainIteration() IMainLoopDriver.Setup(MainLoop) Declaration void IMainLoopDriver.Setup(MainLoop mainLoop) Parameters Type Name Description MainLoop mainLoop IMainLoopDriver.Wakeup() Declaration void IMainLoopDriver.Wakeup() Implements IMainLoopDriver"
  },
  "api/Terminal.Gui/Terminal.Gui.FileDialog.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.FileDialog.html",
    "title": "Class FileDialog",
    "keywords": "Class FileDialog Base class for the OpenDialog and the SaveDialog Inheritance System.Object Responder View Toplevel Window Dialog FileDialog OpenDialog SaveDialog Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members Dialog.AddButton(Button) Dialog.ProcessKey(KeyEvent) Window.Title Window.Add(View) Window.Remove(View) Window.RemoveAll() Window.Redraw(Rect) Window.MouseEvent(MouseEvent) Window.Text Window.TextAlignment Toplevel.Running Toplevel.Loaded Toplevel.Ready Toplevel.Unloaded Toplevel.Create() Toplevel.CanFocus Toplevel.Modal Toplevel.MenuBar Toplevel.StatusBar Toplevel.OnKeyDown(KeyEvent) Toplevel.OnKeyUp(KeyEvent) Toplevel.ProcessColdKey(KeyEvent) View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class FileDialog : Dialog, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors FileDialog() Initializes a new FileDialog . Declaration public FileDialog() FileDialog(ustring, ustring, ustring, ustring) Initializes a new instance of FileDialog Declaration public FileDialog(ustring title, ustring prompt, ustring nameFieldLabel, ustring message) Parameters Type Name Description NStack.ustring title The title. NStack.ustring prompt The prompt. NStack.ustring nameFieldLabel The name field label. NStack.ustring message The message. Properties AllowedFileTypes The array of filename extensions allowed, or null if all file extensions are allowed. Declaration public string[] AllowedFileTypes { get; set; } Property Value Type Description System.String [] The allowed file types. AllowsOtherFileTypes Gets or sets a value indicating whether this FileDialog allows the file to be saved with a different extension Declaration public bool AllowsOtherFileTypes { get; set; } Property Value Type Description System.Boolean true if allows other file types; otherwise, false . Canceled Check if the dialog was or not canceled. Declaration public bool Canceled { get; } Property Value Type Description System.Boolean CanCreateDirectories Gets or sets a value indicating whether this FileDialog can create directories. Declaration public bool CanCreateDirectories { get; set; } Property Value Type Description System.Boolean true if can create directories; otherwise, false . DirectoryPath Gets or sets the directory path for this panel Declaration public ustring DirectoryPath { get; set; } Property Value Type Description NStack.ustring The directory path. FilePath The File path that is currently shown on the panel Declaration public ustring FilePath { get; set; } Property Value Type Description NStack.ustring The absolute file path for the file path entered. IsExtensionHidden Gets or sets a value indicating whether this FileDialog is extension hidden. Declaration public bool IsExtensionHidden { get; set; } Property Value Type Description System.Boolean true if is extension hidden; otherwise, false . Message Gets or sets the message displayed to the user, defaults to nothing Declaration public ustring Message { get; set; } Property Value Type Description NStack.ustring The message. NameFieldLabel Gets or sets the name field label. Declaration public ustring NameFieldLabel { get; set; } Property Value Type Description NStack.ustring The name field label. Prompt Gets or sets the prompt label for the Button displayed to the user Declaration public ustring Prompt { get; set; } Property Value Type Description NStack.ustring The prompt. Methods WillPresent() Declaration public override void WillPresent() Overrides Toplevel.WillPresent() Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.FrameView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.FrameView.html",
    "title": "Class FrameView",
    "keywords": "Class FrameView The FrameView is a container frame that draws a frame around the contents. It is similar to a GroupBox in Windows. Inheritance System.Object Responder View FrameView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessKey(KeyEvent) View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.MouseEvent(MouseEvent) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class FrameView : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors FrameView() Initializes a new instance of the FrameView class using Computed layout. Declaration public FrameView() FrameView(ustring) Initializes a new instance of the FrameView class using Computed layout. Declaration public FrameView(ustring title) Parameters Type Name Description NStack.ustring title Title. FrameView(Rect, ustring) Initializes a new instance of the FrameView class using Absolute layout. Declaration public FrameView(Rect frame, ustring title = null) Parameters Type Name Description Rect frame Frame. NStack.ustring title Title. FrameView(Rect, ustring, View[]) Initializes a new instance of the FrameView class using Computed layout. Declaration public FrameView(Rect frame, ustring title, View[] views) Parameters Type Name Description Rect frame Frame. NStack.ustring title Title. View [] views Views. Properties Text The text displayed by the Label . Declaration public override ustring Text { get; set; } Property Value Type Description NStack.ustring Overrides View.Text TextAlignment Controls the text-alignment property of the label, changing it will redisplay the Label . Declaration public override TextAlignment TextAlignment { get; set; } Property Value Type Description TextAlignment The text alignment. Overrides View.TextAlignment Title The title to be displayed for this FrameView . Declaration public ustring Title { get; set; } Property Value Type Description NStack.ustring The title. Methods Add(View) Add the specified View to this container. Declaration public override void Add(View view) Parameters Type Name Description View view View to add to this container Overrides View.Add(View) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Remove(View) Removes a View from this container. Declaration public override void Remove(View view) Parameters Type Name Description View view Overrides View.Remove(View) Remarks RemoveAll() Removes all View s from this container. Declaration public override void RemoveAll() Overrides View.RemoveAll() Remarks Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.HexView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.HexView.html",
    "title": "Class HexView",
    "keywords": "Class HexView An hex viewer and editor View over a System.IO.Stream Inheritance System.Object Responder View HexView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.MouseEvent(MouseEvent) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class HexView : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks HexView provides a hex editor on top of a seekable System.IO.Stream with the left side showing an hex dump of the values in the System.IO.Stream and the right side showing the contents (filtered to non-control sequence ASCII characters). Users can switch from one side to the other by using the tab key. To enable editing, set AllowEdits to true. When AllowEdits is true the user can make changes to the hexadecimal values of the System.IO.Stream . Any changes are tracked in the Edits property (a System.Collections.Generic.SortedDictionary`2 ) indicating the position where the changes were made and the new values. A convenience method, ApplyEdits() will apply the edits to the System.IO.Stream . Control the first byte shown by setting the DisplayStart property to an offset in the stream. Constructors HexView() Initialzies a HexView class using Computed layout. Declaration public HexView() HexView(Stream) Initialzies a HexView class using Computed layout. Declaration public HexView(Stream source) Parameters Type Name Description System.IO.Stream source The System.IO.Stream to view and edit as hex, this System.IO.Stream must support seeking, or an exception will be thrown. Properties AllowEdits Gets or sets whether this HexView allow editing of the System.IO.Stream of the underlying System.IO.Stream . Declaration public bool AllowEdits { get; set; } Property Value Type Description System.Boolean true if allow edits; otherwise, false . DesiredCursorVisibility Get / Set the wished cursor when the field is focused Declaration public CursorVisibility DesiredCursorVisibility { get; set; } Property Value Type Description CursorVisibility DisplayStart Sets or gets the offset into the System.IO.Stream that will displayed at the top of the HexView Declaration public long DisplayStart { get; set; } Property Value Type Description System.Int64 The display start. Edits Gets a System.Collections.Generic.SortedDictionary`2 describing the edits done to the HexView . Each Key indicates an offset where an edit was made and the Value is the changed byte. Declaration public IReadOnlyDictionary<long, byte> Edits { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int64 , System.Byte > The edits. Frame Declaration public override Rect Frame { get; set; } Property Value Type Description Rect Overrides View.Frame Source Sets or gets the System.IO.Stream the HexView is operating on; the stream must support seeking ( System.IO.Stream.CanSeek == true). Declaration public Stream Source { get; set; } Property Value Type Description System.IO.Stream The source. Methods ApplyEdits() This method applies andy edits made to the System.IO.Stream and resets the contents of the Edits property Declaration public void ApplyEdits() PositionCursor() Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.html",
    "title": "Namespace Terminal.Gui",
    "keywords": "Namespace Terminal.Gui Classes Application A static, singelton class provding the main application driver for Terminal.Gui apps. Application.ResizedEventArgs Event arguments for the Resized event. Application.RunState Captures the execution state for the provided Terminal.Gui.Application.RunState.Toplevel view. Button Button is a View that provides an item that invokes an System.Action when activated by the user. CellActivatedEventArgs Defines the event arguments for CellActivated event CheckBox The CheckBox View shows an on/off toggle that the user can set Clipboard Provides cut, copy, and paste support for the clipboard. NOTE: Currently not implemented. Colors The default ColorScheme s for the application. ColorScheme Color scheme definitions, they cover some common scenarios and are used typically in containers such as Window and FrameView to set the scheme that is used by all the views contained inside. ColumnStyle Describes how to render a given column in a TableView including Alignment and textual representation of cells (e.g. date formats) See TableView Deep Dive for more information . ComboBox ComboBox control ConsoleDriver ConsoleDriver is an abstract class that defines the requirements for a console driver. There are currently three implementations: Terminal.Gui.CursesDriver (for Unix and Mac), Terminal.Gui.WindowsDriver , and Terminal.Gui.NetDriver that uses the .NET Console API. DateField Simple Date editing View DateTimeEventArgs<T> Defines the event arguments for DateChanged and TimeChanged events. DelegateTreeBuilder<T> Implementation of ITreeBuilder<T> that uses user defined functions Dialog The Dialog View is a Window that by default is centered and contains one or more Button s. It defaults to the Dialog color scheme and has a 1 cell padding around the edges. Dim Dim properties of a View to control the position. FakeConsole FakeDriver Implements a mock ConsoleDriver for unit testing FakeMainLoop Mainloop intended to be used with the .NET System.Console API, and can be used on Windows and Unix, it is cross platform but lacks things like file descriptor monitoring. FileDialog Base class for the OpenDialog and the SaveDialog FrameView The FrameView is a container frame that draws a frame around the contents. It is similar to a GroupBox in Windows. HexView An hex viewer and editor View over a System.IO.Stream KeyEvent Describes a keyboard event. KeyModifiers Identifies the state of the \"shift\"-keys within a event. Label The Label View displays a string at a given position and supports multiple lines separted by newline characters. Multi-line Labels support word wrap. ListView ListView View renders a scrollable list of data where each item can be activated to perform an action. ListViewItemEventArgs System.EventArgs for ListView events. ListWrapper Implements an IListDataSource that renders arbitrary System.Collections.IList instances for ListView . MainLoop Simple main loop implementation that can be used to monitor file descriptor, run timers and idle handlers. MenuBar The MenuBar provides a menu for Terminal.Gui applications. MenuBarItem A MenuBarItem contains MenuBarItem s or MenuItem s. MenuItem A MenuItem has a title, an associated help text, and an action to execute on activation. MessageBox MessageBox displays a modal message to the user, with a title, a message and a series of options that the user can choose from. ObjectActivatedEventArgs<T> Event args for the ObjectActivated event OpenDialog The OpenDialog provides an interactive dialog box for users to select files or directories. Pos Describes the position of a View which can be an absolute value, a percentage, centered, or relative to the ending dimension. Integer values are implicitly convertible to an absolute Pos . These objects are created using the static methods Percent, AnchorEnd, and Center. The Pos objects can be combined with the addition and subtraction operators. ProgressBar A Progress Bar view that can indicate progress of an activity visually. RadioGroup RadioGroup shows a group of radio labels, only one of those can be selected at a given time RadioGroup.SelectedItemChangedArgs Event arguments for the SelectedItemChagned event. Responder Responder base class implemented by objects that want to participate on keyboard and mouse input. SaveDialog The SaveDialog provides an interactive dialog box for users to pick a file to save. ScrollBarView ScrollBarViews are views that display a 1-character scrollbar, either horizontal or vertical ScrollView Scrollviews are views that present a window into a virtual space where subviews are added. Similar to the iOS UIScrollView. SelectedCellChangedEventArgs Defines the event arguments for SelectedCellChanged SelectionChangedEventArgs<T> Event arguments describing a change in selected object in a tree view ShortcutHelper Represents a helper to manipulate shortcut keys used on views. StatusBar A status bar is a View that snaps to the bottom of a Toplevel displaying set of StatusItem s. The StatusBar should be context sensitive. This means, if the main menu and an open text editor are visible, the items probably shown will be ~F1~ Help ~F2~ Save ~F3~ Load. While a dialog to ask a file to load is executed, the remaining commands will probably be ~F1~ Help. So for each context must be a new instance of a statusbar. StatusItem StatusItem objects are contained by StatusBar View s. Each StatusItem has a title, a shortcut (hotkey), and an Action that will be invoked when the Shortcut is pressed. The Shortcut will be a global hotkey for the application in the current context of the screen. The colour of the Title will be changed after each ~. A Title set to `~F1~ Help` will render as *F1* using HotNormal and *Help* as HotNormal . TableSelection Describes a selected region of the table TableStyle Defines rendering options that affect how the table is displayed. See TableView Deep Dive for more information . TableView View for tabular data based on a System.Data.DataTable . See TableView Deep Dive for more information . TextChangingEventArgs An System.EventArgs which allows passing a cancelable new text value event. TextField Single-line text entry View TextFormatter Provides text formatting capabilities for console apps. Supports, hotkeys, horizontal alignment, multiple lines, and word-based line wrap. TextView Multi-line text editing View TimeField Time editing View Toplevel Toplevel views can be modally executed. TreeBuilder<T> Abstract implementation of ITreeBuilder<T> . TreeNode Simple class for representing nodes, use with regular (non generic) TreeView . TreeNodeBuilder ITreeBuilder<T> implementation for ITreeNode objects TreeStyle Defines rendering options that affect how the tree is displayed TreeView Convenience implementation of generic TreeView<T> for any tree were all nodes implement ITreeNode . See TreeView Deep Dive for more information . TreeView<T> Hierarchical tree view with expandable branches. Branch objects are dynamically determined when expanded using a user defined ITreeBuilder<T> See TreeView Deep Dive for more information . View View is the base class for all views on the screen and represents a visible element that can render itself and contains zero or more nested views. View.FocusEventArgs Defines the event arguments for Terminal.Gui.View.SetFocus(Terminal.Gui.View) View.KeyEventEventArgs Defines the event arguments for KeyEvent View.LayoutEventArgs Event arguments for the LayoutComplete event. View.MouseEventArgs Specifies the event arguments for MouseEvent Window A Toplevel View that draws a border around its Frame with a Title at the top. Structs Attribute Attributes are used as elements that contain both a foreground and a background or platform specific features MouseEvent Describes a mouse event Point Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane. Rect Stores a set of four integers that represent the location and size of a rectangle Size Stores an ordered pair of integers, which specify a Height and Width. Interfaces IListDataSource Implement IListDataSource to provide custom rendering for a ListView . IMainLoopDriver Public interface to create your own platform specific main loop driver. ITreeBuilder<T> Interface for supplying data to a TreeView<T> on demand as root level nodes are expanded by the user ITreeNode Interface to implement when you want the regular (non generic) TreeView to automatically determine children for your class (without having to specify an ITreeBuilder<T> ) ITreeView Interface for all non generic members of TreeView<T> See TreeView Deep Dive for more information . Enums Color Basic colors that can be used to set the foreground and background colors in console applications. ConsoleDriver.DiagnosticFlags Enables diagnostic functions CursorVisibility Cursors Visibility that are displayed DisplayModeLayout Used for choose the display mode of this RadioGroup Key The Key enumeration contains special encoding for some keys, but can also encode all the unicode values that can be passed. LayoutStyle Determines the LayoutStyle for a view, if Absolute, during LayoutSubviews, the value from the Frame will be used, if the value is Computed, then the Frame will be updated from the X, Y Pos objects and the Width and Height Dim objects. MenuItemCheckStyle Specifies how a MenuItem shows selection state. MouseFlags Mouse flags reported in MouseEvent . TextAlignment Text alignment enumeration, controls how text is displayed. Delegates AspectGetterDelegate<T> Delegates of this type are used to fetch string representations of user's model objects"
  },
  "api/Terminal.Gui/Terminal.Gui.IListDataSource.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.IListDataSource.html",
    "title": "Interface IListDataSource",
    "keywords": "Interface IListDataSource Implement IListDataSource to provide custom rendering for a ListView . Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public interface IListDataSource Properties Count Returns the number of elements to display Declaration int Count { get; } Property Value Type Description System.Int32 Length Returns the maximum length of elements to display Declaration int Length { get; } Property Value Type Description System.Int32 Methods IsMarked(Int32) Should return whether the specified item is currently marked. Declaration bool IsMarked(int item) Parameters Type Name Description System.Int32 item Item index. Returns Type Description System.Boolean true , if marked, false otherwise. Render(ListView, ConsoleDriver, Boolean, Int32, Int32, Int32, Int32, Int32) This method is invoked to render a specified item, the method should cover the entire provided width. Declaration void Render(ListView container, ConsoleDriver driver, bool selected, int item, int col, int line, int width, int start = 0) Parameters Type Name Description ListView container The list view to render. ConsoleDriver driver The console driver to render. System.Boolean selected Describes whether the item being rendered is currently selected by the user. System.Int32 item The index of the item to render, zero for the first item and so on. System.Int32 col The column where the rendering will start System.Int32 line The line where the rendering will be done. System.Int32 width The width that must be filled out. System.Int32 start The index of the string to be displayed. Remarks The default color will be set before this method is invoked, and will be based on whether the item is selected or not. SetMark(Int32, Boolean) Flags the item as marked. Declaration void SetMark(int item, bool value) Parameters Type Name Description System.Int32 item Item index. System.Boolean value If set to true value. ToList() Return the source as IList. Declaration IList ToList() Returns Type Description System.Collections.IList"
  },
  "api/Terminal.Gui/Terminal.Gui.IMainLoopDriver.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.IMainLoopDriver.html",
    "title": "Interface IMainLoopDriver",
    "keywords": "Interface IMainLoopDriver Public interface to create your own platform specific main loop driver. Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public interface IMainLoopDriver Methods EventsPending(Boolean) Must report whether there are any events pending, or even block waiting for events. Declaration bool EventsPending(bool wait) Parameters Type Name Description System.Boolean wait If set to true wait until an event is available, otherwise return immediately. Returns Type Description System.Boolean true , if there were pending events, false otherwise. MainIteration() The interation function. Declaration void MainIteration() Setup(MainLoop) Initializes the main loop driver, gets the calling main loop for the initialization. Declaration void Setup(MainLoop mainLoop) Parameters Type Name Description MainLoop mainLoop Main loop. Wakeup() Wakes up the mainloop that might be waiting on input, must be thread safe. Declaration void Wakeup()"
  },
  "api/Terminal.Gui/Terminal.Gui.ITreeBuilder-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ITreeBuilder-1.html",
    "title": "Interface ITreeBuilder<T>",
    "keywords": "Interface ITreeBuilder<T> Interface for supplying data to a TreeView<T> on demand as root level nodes are expanded by the user Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public interface ITreeBuilder<T> Type Parameters Name Description T Properties SupportsCanExpand Returns true if CanExpand(T) is implemented by this class Declaration bool SupportsCanExpand { get; } Property Value Type Description System.Boolean Methods CanExpand(T) Returns true/false for whether a model has children. This method should be implemented when GetChildren(T) is an expensive operation otherwise SupportsCanExpand should return false (in which case this method will not be called) Declaration bool CanExpand(T toExpand) Parameters Type Name Description T toExpand Returns Type Description System.Boolean Remarks Only implement this method if you have a very fast way of determining whether an object can have children e.g. checking a Type (directories can always be expanded) GetChildren(T) Returns all children of a given forObject which should be added to the tree as new branches underneath it Declaration IEnumerable<T> GetChildren(T forObject) Parameters Type Name Description T forObject Returns Type Description System.Collections.Generic.IEnumerable <T>"
  },
  "api/Terminal.Gui/Terminal.Gui.ITreeNode.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ITreeNode.html",
    "title": "Interface ITreeNode",
    "keywords": "Interface ITreeNode Interface to implement when you want the regular (non generic) TreeView to automatically determine children for your class (without having to specify an ITreeBuilder<T> ) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public interface ITreeNode Properties Children The children of your class which should be rendered underneath it when expanded Declaration IList<ITreeNode> Children { get; } Property Value Type Description System.Collections.Generic.IList < ITreeNode > Tag Optionally allows you to store some custom data/class here. Declaration object Tag { get; set; } Property Value Type Description System.Object Text Text to display when rendering the node Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Terminal.Gui/Terminal.Gui.ITreeView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ITreeView.html",
    "title": "Interface ITreeView",
    "keywords": "Interface ITreeView Interface for all non generic members of TreeView<T> See TreeView Deep Dive for more information . Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public interface ITreeView Properties Style Contains options for changing how the tree is rendered Declaration TreeStyle Style { get; set; } Property Value Type Description TreeStyle Methods ClearObjects() Removes all objects from the tree and clears selection Declaration void ClearObjects() SetNeedsDisplay() Sets a flag indicating this view needs to be redisplayed because its state has changed. Declaration void SetNeedsDisplay()"
  },
  "api/Terminal.Gui/Terminal.Gui.Key.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Key.html",
    "title": "Enum Key",
    "keywords": "Enum Key The Key enumeration contains special encoding for some keys, but can also encode all the unicode values that can be passed. Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax [Flags] public enum Key : uint Remarks If the SpecialMask is set, then the value is that of the special mask, otherwise, the value is the one of the lower bits (as extracted by CharMask ) Numerics keys are the values between 48 and 57 corresponding to 0 to 9 Upper alpha keys are the values between 65 and 90 corresponding to A to Z Unicode runes are also stored here, the letter 'A\" for example is encoded as a value 65 (not surfaced in the enum). Fields Name Description A The key code for the user pressing Shift-A AltMask When this value is set, the Key encodes the sequence Alt-KeyValue. And the actual value must be extracted by removing the AltMask. B The key code for the user pressing Shift-B Backspace Backspace key. BackTab Shift-tab key (backwards tab key). C The key code for the user pressing Shift-C CharMask Mask that indicates that this is a character value, values outside this range indicate special characters like Alt-key combinations or special keys on the keyboard like function keys, arrows keys and so on. CtrlMask When this value is set, the Key encodes the sequence Ctrl-KeyValue. And the actual value must be extracted by removing the CtrlMask. CursorDown Cursor down key. CursorLeft Cursor left key. CursorRight Cursor right key. CursorUp Cursor up key D The key code for the user pressing Shift-D D0 Digit 0. D1 Digit 1. D2 Digit 2. D3 Digit 3. D4 Digit 4. D5 Digit 5. D6 Digit 6. D7 Digit 7. D8 Digit 8. D9 Digit 9. Delete The key code for the user pressing the delete key. DeleteChar Delete character key E The key code for the user pressing Shift-E End End key Enter The key code for the user pressing the return key. Esc The key code for the user pressing the escape key F The key code for the user pressing Shift-F F1 F1 key. F10 F10 key. F11 F11 key. F12 F12 key. F2 F2 key. F3 F3 key. F4 F4 key. F5 F5 key. F6 F6 key. F7 F7 key. F8 F8 key. F9 F9 key. G The key code for the user pressing Shift-G H The key code for the user pressing Shift-H Home Home key I The key code for the user pressing Shift-I InsertChar Insert character key J The key code for the user pressing Shift-J K The key code for the user pressing Shift-K L The key code for the user pressing Shift-L M The key code for the user pressing Shift-M N The key code for the user pressing Shift-N Null The key code representing null or empty O The key code for the user pressing Shift-O P The key code for the user pressing Shift-P PageDown Page Down key. PageUp Page Up key. Q The key code for the user pressing Shift-Q R The key code for the user pressing Shift-R S The key code for the user pressing Shift-S ShiftMask When this value is set, the Key encodes the sequence Shift-KeyValue. Space The key code for the user pressing the space bar SpecialMask If the SpecialMask is set, then the value is that of the special mask, otherwise, the value is the one of the lower bits (as extracted by CharMask ). T The key code for the user pressing Shift-T Tab The key code for the user pressing the tab key (forwards tab key). U The key code for the user pressing Shift-U Unknown A key with an unknown mapping was raised. V The key code for the user pressing Shift-V W The key code for the user pressing Shift-W X The key code for the user pressing Shift-X Y The key code for the user pressing Shift-Y Z The key code for the user pressing Shift-Z"
  },
  "api/Terminal.Gui/Terminal.Gui.KeyEvent.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.KeyEvent.html",
    "title": "Class KeyEvent",
    "keywords": "Class KeyEvent Describes a keyboard event. Inheritance System.Object KeyEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class KeyEvent Constructors KeyEvent() Constructs a new KeyEvent Declaration public KeyEvent() KeyEvent(Key, KeyModifiers) Constructs a new KeyEvent from the provided Key value - can be a rune cast into a Key value Declaration public KeyEvent(Key k, KeyModifiers km) Parameters Type Name Description Key k KeyModifiers km Fields Key Symb olid definition for the key. Declaration public Key Key Field Value Type Description Key Properties IsAlt Gets a value indicating whether the Alt key was pressed (real or synthesized) Declaration public bool IsAlt { get; } Property Value Type Description System.Boolean true if is alternate; otherwise, false . IsCapslock Gets a value indicating whether the Caps lock key was pressed (real or synthesized) Declaration public bool IsCapslock { get; } Property Value Type Description System.Boolean true if is alternate; otherwise, false . IsCtrl Determines whether the value is a control key (and NOT just the ctrl key) Declaration public bool IsCtrl { get; } Property Value Type Description System.Boolean true if is ctrl; otherwise, false . IsNumlock Gets a value indicating whether the Num lock key was pressed (real or synthesized) Declaration public bool IsNumlock { get; } Property Value Type Description System.Boolean true if is alternate; otherwise, false . IsScrolllock Gets a value indicating whether the Scroll lock key was pressed (real or synthesized) Declaration public bool IsScrolllock { get; } Property Value Type Description System.Boolean true if is alternate; otherwise, false . IsShift Gets a value indicating whether the Shift key was pressed. Declaration public bool IsShift { get; } Property Value Type Description System.Boolean true if is shift; otherwise, false . KeyValue The key value cast to an integer, you will typical use this for extracting the Unicode rune value out of a key, when none of the symbolic options are in use. Declaration public int KeyValue { get; } Property Value Type Description System.Int32 Methods ToString() Pretty prints the KeyEvent Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Terminal.Gui/Terminal.Gui.KeyModifiers.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.KeyModifiers.html",
    "title": "Class KeyModifiers",
    "keywords": "Class KeyModifiers Identifies the state of the \"shift\"-keys within a event. Inheritance System.Object KeyModifiers Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class KeyModifiers Fields Alt Check if the Alt key was pressed or not. Declaration public bool Alt Field Value Type Description System.Boolean Capslock Check if the Caps lock key was pressed or not. Declaration public bool Capslock Field Value Type Description System.Boolean Ctrl Check if the Ctrl key was pressed or not. Declaration public bool Ctrl Field Value Type Description System.Boolean Numlock Check if the Num lock key was pressed or not. Declaration public bool Numlock Field Value Type Description System.Boolean Scrolllock Check if the Scroll lock key was pressed or not. Declaration public bool Scrolllock Field Value Type Description System.Boolean Shift Check if the Shift key was pressed or not. Declaration public bool Shift Field Value Type Description System.Boolean"
  },
  "api/Terminal.Gui/Terminal.Gui.Label.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Label.html",
    "title": "Class Label",
    "keywords": "Class Label The Label View displays a string at a given position and supports multiple lines separted by newline characters. Multi-line Labels support word wrap. Inheritance System.Object Responder View Label Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.Redraw(Rect) View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessKey(KeyEvent) View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.MouseEvent(MouseEvent) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Label : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The Label view is functionality identical to View and is included for API backwards compatibility. Constructors Label() Declaration public Label() Label(ustring) Declaration public Label(ustring text) Parameters Type Name Description NStack.ustring text Label(Int32, Int32, ustring) Declaration public Label(int x, int y, ustring text) Parameters Type Name Description System.Int32 x System.Int32 y NStack.ustring text Label(Rect) Declaration public Label(Rect frame) Parameters Type Name Description Rect frame Label(Rect, ustring) Declaration public Label(Rect rect, ustring text) Parameters Type Name Description Rect rect NStack.ustring text Methods OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) OnMouseEvent(MouseEvent) Method invoked when a mouse event is generated Declaration public override bool OnMouseEvent(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Returns Type Description System.Boolean true , if the event was handled, false otherwise. Overrides View.OnMouseEvent(MouseEvent) Events Clicked Clicked System.Action , raised when the user clicks the primary mouse button within the Bounds of this View or if the user presses the action key while this view is focused. (TODO: IsDefault) Declaration public event Action Clicked Event Type Type Description System.Action Remarks Client code can hook up to this event, it is raised when the button is activated either with the mouse or the keyboard. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.LayoutStyle.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.LayoutStyle.html",
    "title": "Enum LayoutStyle",
    "keywords": "Enum LayoutStyle Determines the LayoutStyle for a view, if Absolute, during LayoutSubviews, the value from the Frame will be used, if the value is Computed, then the Frame will be updated from the X, Y Pos objects and the Width and Height Dim objects. Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public enum LayoutStyle Fields Name Description Absolute The position and size of the view are based on the Frame value. Computed The position and size of the view will be computed based on the X, Y, Width and Height properties and set on the Frame."
  },
  "api/Terminal.Gui/Terminal.Gui.ListView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ListView.html",
    "title": "Class ListView",
    "keywords": "Class ListView ListView View renders a scrollable list of data where each item can be activated to perform an action. Inheritance System.Object Responder View ListView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ListView : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The ListView displays lists of data and allows the user to scroll through the data. Items in the can be activated firing an event (with the ENTER key or a mouse double-click). If the AllowsMarking property is true, elements of the list can be marked by the user. By default ListView uses System.Object.ToString() to render the items of any System.Collections.IList object (e.g. arrays, System.Collections.Generic.List<T> , and other collections). Alternatively, an object that implements the IListDataSource interface can be provided giving full control of what is rendered. ListView can display any object that implements the System.Collections.IList interface. System.String values are converted into NStack.ustring values before rendering, and other values are converted into System.String by calling System.Object.ToString() and then converting to NStack.ustring . To change the contents of the ListView, set the Source property (when providing custom rendering via IListDataSource ) or call SetSource(IList) an System.Collections.IList is being used. When AllowsMarking is set to true the rendering will prefix the rendered items with [x] or [ ] and bind the SPACE key to toggle the selection. To implement a different marking style set AllowsMarking to false and implement custom rendering. Constructors ListView() Initializes a new instance of ListView . Set the Source property to display something. Declaration public ListView() ListView(IList) Initializes a new instance of ListView that will display the contents of the object implementing the System.Collections.IList interface, with relative positioning. Declaration public ListView(IList source) Parameters Type Name Description System.Collections.IList source An System.Collections.IList data source, if the elements are strings or ustrings, the string is rendered, otherwise the ToString() method is invoked on the result. ListView(IListDataSource) Initializes a new instance of ListView that will display the provided data source, using relative positioning. Declaration public ListView(IListDataSource source) Parameters Type Name Description IListDataSource source IListDataSource object that provides a mechanism to render the data. The number of elements on the collection should not change, if you must change, set the \"Source\" property to reset the internal settings of the ListView. ListView(Rect, IList) Initializes a new instance of ListView that will display the contents of the object implementing the System.Collections.IList interface with an absolute position. Declaration public ListView(Rect rect, IList source) Parameters Type Name Description Rect rect Frame for the listview. System.Collections.IList source An IList data source, if the elements of the IList are strings or ustrings, the string is rendered, otherwise the ToString() method is invoked on the result. ListView(Rect, IListDataSource) Initializes a new instance of ListView with the provided data source and an absolute position Declaration public ListView(Rect rect, IListDataSource source) Parameters Type Name Description Rect rect Frame for the listview. IListDataSource source IListDataSource object that provides a mechanism to render the data. The number of elements on the collection should not change, if you must change, set the \"Source\" property to reset the internal settings of the ListView. Properties AllowsMarking Gets or sets whether this ListView allows items to be marked. Declaration public bool AllowsMarking { get; set; } Property Value Type Description System.Boolean true if allows marking elements of the list; otherwise, false . Remarks If set to true, ListView will render items marked items with \"[x]\", and unmarked items with \"[ ]\" spaces. SPACE key will toggle marking. AllowsMultipleSelection If set to true allows more than one item to be selected. If false only allow one item selected. Declaration public bool AllowsMultipleSelection { get; set; } Property Value Type Description System.Boolean LeftItem Gets or sets the left column where the item start to be displayed at on the ListView . Declaration public int LeftItem { get; set; } Property Value Type Description System.Int32 The left position. Maxlength Gets the widest item. Declaration public int Maxlength { get; } Property Value Type Description System.Int32 SelectedItem Gets or sets the index of the currently selected item. Declaration public int SelectedItem { get; set; } Property Value Type Description System.Int32 The selected item. Source Gets or sets the IListDataSource backing this ListView , enabling custom rendering. Declaration public IListDataSource Source { get; set; } Property Value Type Description IListDataSource The source. Remarks Use SetSource(IList) to set a new System.Collections.IList source. TopItem Gets or sets the item that is displayed at the top of the ListView . Declaration public int TopItem { get; set; } Property Value Type Description System.Int32 The top item. Methods AllowsAll() Prevents marking if it's not allowed mark and if it's not allows multiple selection. Declaration public virtual bool AllowsAll() Returns Type Description System.Boolean MarkUnmarkRow() Marks an unmarked row. Declaration public virtual bool MarkUnmarkRow() Returns Type Description System.Boolean MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) MoveDown() Moves the selected item index to the next row. Declaration public virtual bool MoveDown() Returns Type Description System.Boolean MoveEnd() Moves the selected item index to the last row. Declaration public virtual bool MoveEnd() Returns Type Description System.Boolean MoveHome() Moves the selected item index to the first row. Declaration public virtual bool MoveHome() Returns Type Description System.Boolean MovePageDown() Moves the selected item index to the previous page. Declaration public virtual bool MovePageDown() Returns Type Description System.Boolean MovePageUp() Moves the selected item index to the next page. Declaration public virtual bool MovePageUp() Returns Type Description System.Boolean MoveUp() Moves the selected item index to the previous row. Declaration public virtual bool MoveUp() Returns Type Description System.Boolean OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) OnLeave(View) Declaration public override bool OnLeave(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnLeave(View) OnOpenSelectedItem() Invokes the OnOpenSelectedItem event if it is defined. Declaration public virtual bool OnOpenSelectedItem() Returns Type Description System.Boolean OnSelectedChanged() Invokes the SelectedChanged event if it is defined. Declaration public virtual bool OnSelectedChanged() Returns Type Description System.Boolean PositionCursor() Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) ScrollDown(Int32) Scrolls the view down. Declaration public virtual void ScrollDown(int lines) Parameters Type Name Description System.Int32 lines Number of lines to scroll down. ScrollLeft(Int32) Scrolls the view left. Declaration public virtual void ScrollLeft(int cols) Parameters Type Name Description System.Int32 cols Number of columns to scroll left. ScrollRight(Int32) Scrolls the view right. Declaration public virtual void ScrollRight(int cols) Parameters Type Name Description System.Int32 cols Number of columns to scroll right. ScrollUp(Int32) Scrolls the view up. Declaration public virtual void ScrollUp(int lines) Parameters Type Name Description System.Int32 lines Number of lines to scroll up. SetSource(IList) Sets the source of the ListView to an System.Collections.IList . Declaration public void SetSource(IList source) Parameters Type Name Description System.Collections.IList source Remarks Use the Source property to set a new IListDataSource source and use custome rendering. SetSourceAsync(IList) Sets the source to an System.Collections.IList value asynchronously. Declaration public Task SetSourceAsync(IList source) Parameters Type Name Description System.Collections.IList source Returns Type Description System.Threading.Tasks.Task An item implementing the IList interface. Remarks Use the Source property to set a new IListDataSource source and use custom rendering. Events OpenSelectedItem This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item. Declaration public event Action<ListViewItemEventArgs> OpenSelectedItem Event Type Type Description System.Action < ListViewItemEventArgs > SelectedItemChanged This event is raised when the selected item in the ListView has changed. Declaration public event Action<ListViewItemEventArgs> SelectedItemChanged Event Type Type Description System.Action < ListViewItemEventArgs > Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.ListViewItemEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ListViewItemEventArgs.html",
    "title": "Class ListViewItemEventArgs",
    "keywords": "Class ListViewItemEventArgs System.EventArgs for ListView events. Inheritance System.Object System.EventArgs ListViewItemEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ListViewItemEventArgs : EventArgs Constructors ListViewItemEventArgs(Int32, Object) Initializes a new instance of ListViewItemEventArgs Declaration public ListViewItemEventArgs(int item, object value) Parameters Type Name Description System.Int32 item The index of the ListView item. System.Object value The ListView item Properties Item The index of the ListView item. Declaration public int Item { get; } Property Value Type Description System.Int32 Value The ListView item. Declaration public object Value { get; } Property Value Type Description System.Object"
  },
  "api/Terminal.Gui/Terminal.Gui.ListWrapper.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ListWrapper.html",
    "title": "Class ListWrapper",
    "keywords": "Class ListWrapper Implements an IListDataSource that renders arbitrary System.Collections.IList instances for ListView . Inheritance System.Object ListWrapper Implements IListDataSource Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ListWrapper : IListDataSource Remarks Implements support for rendering marked items. Constructors ListWrapper(IList) Initializes a new instance of ListWrapper given an System.Collections.IList Declaration public ListWrapper(IList source) Parameters Type Name Description System.Collections.IList source Properties Count Gets the number of items in the System.Collections.IList . Declaration public int Count { get; } Property Value Type Description System.Int32 Length Gets the maximum item length in the System.Collections.IList . Declaration public int Length { get; } Property Value Type Description System.Int32 Methods IsMarked(Int32) Returns true if the item is marked, false otherwise. Declaration public bool IsMarked(int item) Parameters Type Name Description System.Int32 item The item. Returns Type Description System.Boolean true If is marked. false otherwise. Render(ListView, ConsoleDriver, Boolean, Int32, Int32, Int32, Int32, Int32) Renders a ListView item to the appropriate type. Declaration public void Render(ListView container, ConsoleDriver driver, bool marked, int item, int col, int line, int width, int start = 0) Parameters Type Name Description ListView container The ListView. ConsoleDriver driver The driver used by the caller. System.Boolean marked Informs if it's marked or not. System.Int32 item The item. System.Int32 col The col where to move. System.Int32 line The line where to move. System.Int32 width The item width. System.Int32 start The index of the string to be displayed. SetMark(Int32, Boolean) Sets the item as marked or unmarked based on the value is true or false, respectively. Declaration public void SetMark(int item, bool value) Parameters Type Name Description System.Int32 item The item System.Boolean value Marks the item. Unmarked the item. The value. ToList() Returns the source as IList. Declaration public IList ToList() Returns Type Description System.Collections.IList Implements IListDataSource"
  },
  "api/Terminal.Gui/Terminal.Gui.MainLoop.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MainLoop.html",
    "title": "Class MainLoop",
    "keywords": "Class MainLoop Simple main loop implementation that can be used to monitor file descriptor, run timers and idle handlers. Inheritance System.Object MainLoop Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class MainLoop Remarks Monitoring of file descriptors is only available on Unix, there does not seem to be a way of supporting this on Windows. Constructors MainLoop(IMainLoopDriver) Creates a new Mainloop. Declaration public MainLoop(IMainLoopDriver driver) Parameters Type Name Description IMainLoopDriver driver Should match the ConsoleDriver (one of the implementations UnixMainLoop, NetMainLoop or WindowsMainLoop). Properties Driver The current IMainLoopDriver in use. Declaration public IMainLoopDriver Driver { get; } Property Value Type Description IMainLoopDriver The driver. Methods AddIdle(Func<Boolean>) Adds specified idle handler function to mainloop processing. The handler function will be called once per iteration of the main loop after other events have been handled. Declaration public Func<bool> AddIdle(Func<bool> idleHandler) Parameters Type Name Description System.Func < System.Boolean > idleHandler Token that can be used to remove the idle handler with RemoveIdle(Func<Boolean>) . Returns Type Description System.Func < System.Boolean > Remarks Remove an idle hander by calling RemoveIdle(Func<Boolean>) with the token this method returns. If the idleHandler returns false it will be removed and not called subsequently. AddTimeout(TimeSpan, Func<MainLoop, Boolean>) Adds a timeout to the mainloop. Declaration public object AddTimeout(TimeSpan time, Func<MainLoop, bool> callback) Parameters Type Name Description System.TimeSpan time System.Func < MainLoop , System.Boolean > callback Returns Type Description System.Object Remarks When time time specified passes, the callback will be invoked. If the callback returns true, the timeout will be reset, repeating the invocation. If it returns false, the timeout will stop and be removed. The returned value is a token that can be used to stop the timeout by calling RemoveTimeout(Object) . EventsPending(Boolean) Determines whether there are pending events to be processed. Declaration public bool EventsPending(bool wait = false) Parameters Type Name Description System.Boolean wait Returns Type Description System.Boolean Remarks You can use this method if you want to probe if events are pending. Typically used if you need to flush the input queue while still running some of your own code in your main thread. Invoke(Action) Runs action on the thread that is processing events Declaration public void Invoke(Action action) Parameters Type Name Description System.Action action the action to be invoked on the main processing thread. MainIteration() Runs one iteration of timers and file watches Declaration public void MainIteration() Remarks You use this to process all pending events (timers, idle handlers and file watches). You can use it like this: while (main.EvensPending ()) MainIteration (); RemoveIdle(Func<Boolean>) Removes an idle handler added with AddIdle(Func<Boolean>) from processing. Declaration public void RemoveIdle(Func<bool> token) Parameters Type Name Description System.Func < System.Boolean > token A token returned by AddIdle(Func<Boolean>) RemoveTimeout(Object) Removes a previously scheduled timeout Declaration public void RemoveTimeout(object token) Parameters Type Name Description System.Object token Remarks The token parameter is the value returned by AddTimeout. Run() Runs the mainloop. Declaration public void Run() Stop() Stops the mainloop. Declaration public void Stop()"
  },
  "api/Terminal.Gui/Terminal.Gui.MenuBar.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MenuBar.html",
    "title": "Class MenuBar",
    "keywords": "Class MenuBar The MenuBar provides a menu for Terminal.Gui applications. Inheritance System.Object Responder View MenuBar Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class MenuBar : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The MenuBar appears on the first row of the terminal. The MenuBar provides global hotkeys for the application. Constructors MenuBar() Initializes a new instance of the MenuBar . Declaration public MenuBar() MenuBar(MenuBarItem[]) Initializes a new instance of the MenuBar class with the specified set of toplevel menu items. Declaration public MenuBar(MenuBarItem[] menus) Parameters Type Name Description MenuBarItem [] menus Individual menu items; a null item will result in a separator being drawn. Properties IsMenuOpen True if the menu is open; otherwise false. Declaration public bool IsMenuOpen { get; protected set; } Property Value Type Description System.Boolean LastFocused Get the lasted focused view before open the menu. Declaration public View LastFocused { get; } Property Value Type Description View Menus Gets or sets the array of MenuBarItem s for the menu. Only set this when the MenuBar is vislble. Declaration public MenuBarItem[] Menus { get; set; } Property Value Type Description MenuBarItem [] The menu array. ShortcutDelimiter Used for change the shortcut delimiter separator. Declaration public static ustring ShortcutDelimiter { get; set; } Property Value Type Description NStack.ustring UseKeysUpDownAsKeysLeftRight Used for change the navigation key style. Declaration public bool UseKeysUpDownAsKeysLeftRight { get; set; } Property Value Type Description System.Boolean Methods CloseMenu() Closes the current Menu programatically, if open. Declaration public void CloseMenu() MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) OnKeyDown(KeyEvent) Declaration public override bool OnKeyDown(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.OnKeyDown(KeyEvent) OnKeyUp(KeyEvent) Declaration public override bool OnKeyUp(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.OnKeyUp(KeyEvent) OnLeave(View) Declaration public override bool OnLeave(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnLeave(View) OnMenuClosing() Virtual method that will invoke the MenuClosing Declaration public virtual void OnMenuClosing() OnMenuOpening() Virtual method that will invoke the MenuOpening Declaration public virtual void OnMenuOpening() OpenMenu() Opens the current Menu programatically. Declaration public void OpenMenu() PositionCursor() Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessColdKey(KeyEvent) Declaration public override bool ProcessColdKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessColdKey(KeyEvent) ProcessHotKey(KeyEvent) Declaration public override bool ProcessHotKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessHotKey(KeyEvent) ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Events MenuClosing Raised when a menu is closing. Declaration public event Action MenuClosing Event Type Type Description System.Action MenuOpening Raised as a menu is opening. Declaration public event Action MenuOpening Event Type Type Description System.Action Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.MenuBarItem.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MenuBarItem.html",
    "title": "Class MenuBarItem",
    "keywords": "Class MenuBarItem A MenuBarItem contains MenuBarItem s or MenuItem s. Inheritance System.Object MenuItem MenuBarItem Inherited Members MenuItem.HotKey MenuItem.Shortcut MenuItem.ShortcutTag MenuItem.Title MenuItem.Help MenuItem.Action MenuItem.CanExecute MenuItem.IsEnabled() MenuItem.Checked MenuItem.CheckType MenuItem.Parent MenuItem.GetMenuItem() MenuItem.GetMenuBarItem() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class MenuBarItem : MenuItem Constructors MenuBarItem() Initializes a new MenuBarItem . Declaration public MenuBarItem() MenuBarItem(ustring, ustring, Action, Func<Boolean>, MenuItem) Initializes a new MenuBarItem as a MenuItem . Declaration public MenuBarItem(ustring title, ustring help, Action action, Func<bool> canExecute = null, MenuItem parent = null) Parameters Type Name Description NStack.ustring title Title for the menu item. NStack.ustring help Help text to display. System.Action action Action to invoke when the menu item is activated. System.Func < System.Boolean > canExecute Function to determine if the action can currently be executed. MenuItem parent The parent MenuItem of this if exist, otherwise is null. MenuBarItem(ustring, List<MenuItem[]>, MenuItem) Initializes a new MenuBarItem with separate list of items. Declaration public MenuBarItem(ustring title, List<MenuItem[]> children, MenuItem parent = null) Parameters Type Name Description NStack.ustring title Title for the menu item. System.Collections.Generic.List < MenuItem []> children The list of items in the current menu. MenuItem parent The parent MenuItem of this if exist, otherwise is null. MenuBarItem(ustring, MenuItem[], MenuItem) Initializes a new MenuBarItem . Declaration public MenuBarItem(ustring title, MenuItem[] children, MenuItem parent = null) Parameters Type Name Description NStack.ustring title Title for the menu item. MenuItem [] children The items in the current menu. MenuItem parent The parent MenuItem of this if exist, otherwise is null. MenuBarItem(MenuItem[]) Initializes a new MenuBarItem . Declaration public MenuBarItem(MenuItem[] children) Parameters Type Name Description MenuItem [] children The items in the current menu. Properties Children Gets or sets an array of MenuItem objects that are the children of this MenuBarItem Declaration public MenuItem[] Children { get; set; } Property Value Type Description MenuItem [] The children. Methods GetChildrenIndex(MenuItem) Get the index of the MenuItem parameter. Declaration public int GetChildrenIndex(MenuItem children) Parameters Type Name Description MenuItem children Returns Type Description System.Int32 Returns a value bigger than -1 if the MenuItem is a child of this. IsSubMenuOf(MenuItem) Check if the MenuItem parameter is a child of this. Declaration public bool IsSubMenuOf(MenuItem menuItem) Parameters Type Name Description MenuItem menuItem Returns Type Description System.Boolean Returns true if it is a child of this. false otherwise. SubMenu(MenuItem) Check if the children parameter is a MenuBarItem . Declaration public MenuBarItem SubMenu(MenuItem children) Parameters Type Name Description MenuItem children Returns Type Description MenuBarItem Returns a MenuBarItem or null otherwise."
  },
  "api/Terminal.Gui/Terminal.Gui.MenuItem.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MenuItem.html",
    "title": "Class MenuItem",
    "keywords": "Class MenuItem A MenuItem has a title, an associated help text, and an action to execute on activation. Inheritance System.Object MenuItem MenuBarItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class MenuItem Constructors MenuItem(ustring, ustring, Action, Func<Boolean>, MenuItem, Key) Initializes a new instance of MenuItem . Declaration public MenuItem(ustring title, ustring help, Action action, Func<bool> canExecute = null, MenuItem parent = null, Key shortcut = Key.Null) Parameters Type Name Description NStack.ustring title Title for the menu item. NStack.ustring help Help text to display. System.Action action Action to invoke when the menu item is activated. System.Func < System.Boolean > canExecute Function to determine if the action can currently be executed. MenuItem parent The Parent of this menu item. Key shortcut The Shortcut keystroke combination. MenuItem(Key) Initializes a new instance of MenuItem Declaration public MenuItem(Key shortcut = Key.Null) Parameters Type Name Description Key shortcut Fields HotKey The HotKey is used when the menu is active, the shortcut can be triggered when the menu is not active. For example HotKey would be \"N\" when the File Menu is open (assuming there is a \"_New\" entry if the Shortcut is set to \"Control-N\", this would be a global hotkey that would trigger as well Declaration public Rune HotKey Field Value Type Description System.Rune Properties Action Gets or sets the action to be invoked when the menu is triggered Declaration public Action Action { get; set; } Property Value Type Description System.Action Method to invoke. CanExecute Gets or sets the action to be invoked if the menu can be triggered Declaration public Func<bool> CanExecute { get; set; } Property Value Type Description System.Func < System.Boolean > Function to determine if action is ready to be executed. Checked Sets or gets whether the MenuItem shows a check indicator or not. See MenuItemCheckStyle . Declaration public bool Checked { get; set; } Property Value Type Description System.Boolean CheckType Sets or gets the type selection indicator the menu item will be displayed with. Declaration public MenuItemCheckStyle CheckType { get; set; } Property Value Type Description MenuItemCheckStyle Help Gets or sets the help text for the menu item. Declaration public ustring Help { get; set; } Property Value Type Description NStack.ustring The help text. Parent Gets or sets the parent for this MenuItem . Declaration public MenuItem Parent { get; } Property Value Type Description MenuItem The parent. Shortcut This is the global setting that can be used as a global Shortcut to invoke the action on the menu. Declaration public Key Shortcut { get; set; } Property Value Type Description Key ShortcutTag The keystroke combination used in the ShortcutTag as string. Declaration public ustring ShortcutTag { get; } Property Value Type Description NStack.ustring Title Gets or sets the title. Declaration public ustring Title { get; set; } Property Value Type Description NStack.ustring The title. Methods GetMenuBarItem() Merely a debugging aid to see the interaction with main Declaration public bool GetMenuBarItem() Returns Type Description System.Boolean GetMenuItem() Merely a debugging aid to see the interaction with main Declaration public MenuItem GetMenuItem() Returns Type Description MenuItem IsEnabled() Shortcut to check if the menu item is enabled Declaration public bool IsEnabled() Returns Type Description System.Boolean"
  },
  "api/Terminal.Gui/Terminal.Gui.MenuItemCheckStyle.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MenuItemCheckStyle.html",
    "title": "Enum MenuItemCheckStyle",
    "keywords": "Enum MenuItemCheckStyle Specifies how a MenuItem shows selection state. Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax [Flags] public enum MenuItemCheckStyle Fields Name Description Checked The menu item will indicate checked/un-checked state (see Checked . NoCheck The menu item will be shown normally, with no check indicator. Radio The menu item is part of a menu radio group (see Checked and will indicate selected state."
  },
  "api/Terminal.Gui/Terminal.Gui.MessageBox.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MessageBox.html",
    "title": "Class MessageBox",
    "keywords": "Class MessageBox MessageBox displays a modal message to the user, with a title, a message and a series of options that the user can choose from. Inheritance System.Object MessageBox Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public static class MessageBox Examples var n = MessageBox.Query (\"Quit Demo\", \"Are you sure you want to quit this demo?\", \"Yes\", \"No\"); if (n == 0) quit = true; else quit = false; Methods ErrorQuery(ustring, ustring, ustring[]) Presents an error MessageBox with the specified title and message and a list of buttons to show to the user. Declaration public static int ErrorQuery(ustring title, ustring message, params ustring[] buttons) Parameters Type Name Description NStack.ustring title Title for the query. NStack.ustring message Message to display, might contain multiple lines. NStack.ustring [] buttons Array of buttons to add. Returns Type Description System.Int32 The index of the selected button, or -1 if the user pressed ESC to close the dialog. Remarks The message box will be vertically and horizontally centered in the container and the size will be automatically determined from the size of the title, message. and buttons. ErrorQuery(Int32, Int32, ustring, ustring, ustring[]) Presents an error MessageBox with the specified title and message and a list of buttons to show to the user. Declaration public static int ErrorQuery(int width, int height, ustring title, ustring message, params ustring[] buttons) Parameters Type Name Description System.Int32 width Width for the window. System.Int32 height Height for the window. NStack.ustring title Title for the query. NStack.ustring message Message to display, might contain multiple lines. NStack.ustring [] buttons Array of buttons to add. Returns Type Description System.Int32 The index of the selected button, or -1 if the user pressed ESC to close the dialog. Remarks Use ErrorQuery(ustring, ustring, ustring[]) instead; it automatically sizes the MessageBox based on the contents. Query(ustring, ustring, ustring[]) Presents an error MessageBox with the specified title and message and a list of buttons to show to the user. Declaration public static int Query(ustring title, ustring message, params ustring[] buttons) Parameters Type Name Description NStack.ustring title Title for the query. NStack.ustring message Message to display, might contain multiple lines. NStack.ustring [] buttons Array of buttons to add. Returns Type Description System.Int32 The index of the selected button, or -1 if the user pressed ESC to close the dialog. Remarks The message box will be vertically and horizontally centered in the container and the size will be automatically determined from the size of the message and buttons. Query(Int32, Int32, ustring, ustring, ustring[]) Presents a normal MessageBox with the specified title and message and a list of buttons to show to the user. Declaration public static int Query(int width, int height, ustring title, ustring message, params ustring[] buttons) Parameters Type Name Description System.Int32 width Width for the window. System.Int32 height Height for the window. NStack.ustring title Title for the query. NStack.ustring message Message to display, might contain multiple lines. NStack.ustring [] buttons Array of buttons to add. Returns Type Description System.Int32 The index of the selected button, or -1 if the user pressed ESC to close the dialog. Remarks Use Query(ustring, ustring, ustring[]) instead; it automatically sizes the MessageBox based on the contents."
  },
  "api/Terminal.Gui/Terminal.Gui.MouseEvent.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MouseEvent.html",
    "title": "Struct MouseEvent",
    "keywords": "Struct MouseEvent Describes a mouse event Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public struct MouseEvent Fields Flags Flags indicating the kind of mouse event that is being posted. Declaration public MouseFlags Flags Field Value Type Description MouseFlags OfX The offset X (column) location for the mouse event. Declaration public int OfX Field Value Type Description System.Int32 OfY The offset Y (column) location for the mouse event. Declaration public int OfY Field Value Type Description System.Int32 View The current view at the location for the mouse event. Declaration public View View Field Value Type Description View X The X (column) location for the mouse event. Declaration public int X Field Value Type Description System.Int32 Y The Y (column) location for the mouse event. Declaration public int Y Field Value Type Description System.Int32 Methods ToString() Returns a System.String that represents the current MouseEvent . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current MouseEvent . Overrides System.ValueType.ToString()"
  },
  "api/Terminal.Gui/Terminal.Gui.MouseFlags.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.MouseFlags.html",
    "title": "Enum MouseFlags",
    "keywords": "Enum MouseFlags Mouse flags reported in MouseEvent . Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax [Flags] public enum MouseFlags Remarks They just happen to map to the ncurses ones. Fields Name Description AllEvents Mask that captures all the events. Button1Clicked The first mouse button was clicked (press+release). Button1DoubleClicked The first mouse button was double-clicked. Button1Pressed The first mouse button was pressed. Button1Released The first mouse button was released. Button1TripleClicked The first mouse button was triple-clicked. Button2Clicked The second mouse button was clicked (press+release). Button2DoubleClicked The second mouse button was double-clicked. Button2Pressed The second mouse button was pressed. Button2Released The second mouse button was released. Button2TripleClicked The second mouse button was triple-clicked. Button3Clicked The third mouse button was clicked (press+release). Button3DoubleClicked The third mouse button was double-clicked. Button3Pressed The third mouse button was pressed. Button3Released The third mouse button was released. Button3TripleClicked The third mouse button was triple-clicked. Button4Clicked The fourth button was clicked (press+release). Button4DoubleClicked The fourth button was double-clicked. Button4Pressed The fourth mouse button was pressed. Button4Released The fourth mouse button was released. Button4TripleClicked The fourth button was triple-clicked. ButtonAlt Flag: the alt key was pressed when the mouse button took place. ButtonCtrl Flag: the ctrl key was pressed when the mouse button took place. ButtonShift Flag: the shift key was pressed when the mouse button took place. ReportMousePosition The mouse position is being reported in this event. WheeledDown Vertical button wheeled up. WheeledLeft Vertical button wheeled up while pressing ButtonShift. WheeledRight Vertical button wheeled down while pressing ButtonShift. WheeledUp Vertical button wheeled up."
  },
  "api/Terminal.Gui/Terminal.Gui.ObjectActivatedEventArgs-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ObjectActivatedEventArgs-1.html",
    "title": "Class ObjectActivatedEventArgs<T>",
    "keywords": "Class ObjectActivatedEventArgs<T> Event args for the ObjectActivated event Inheritance System.Object ObjectActivatedEventArgs<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ObjectActivatedEventArgs<T> where T : class Type Parameters Name Description T Constructors ObjectActivatedEventArgs(TreeView<T>, T) Creates a new instance documenting activation of the activated object Declaration public ObjectActivatedEventArgs(TreeView<T> tree, T activated) Parameters Type Name Description TreeView <T> tree Tree in which the activation is happening T activated What object is being activated Properties ActivatedObject The object that was selected at the time of activation Declaration public T ActivatedObject { get; } Property Value Type Description T Tree The tree in which the activation occurred Declaration public TreeView<T> Tree { get; } Property Value Type Description TreeView <T>"
  },
  "api/Terminal.Gui/Terminal.Gui.OpenDialog.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.OpenDialog.html",
    "title": "Class OpenDialog",
    "keywords": "Class OpenDialog The OpenDialog provides an interactive dialog box for users to select files or directories. Inheritance System.Object Responder View Toplevel Window Dialog FileDialog OpenDialog Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members FileDialog.WillPresent() FileDialog.Prompt FileDialog.NameFieldLabel FileDialog.Message FileDialog.CanCreateDirectories FileDialog.IsExtensionHidden FileDialog.DirectoryPath FileDialog.AllowedFileTypes FileDialog.AllowsOtherFileTypes FileDialog.FilePath FileDialog.Canceled Dialog.AddButton(Button) Dialog.ProcessKey(KeyEvent) Window.Title Window.Add(View) Window.Remove(View) Window.RemoveAll() Window.Redraw(Rect) Window.MouseEvent(MouseEvent) Window.Text Window.TextAlignment Toplevel.Running Toplevel.Loaded Toplevel.Ready Toplevel.Unloaded Toplevel.Create() Toplevel.CanFocus Toplevel.Modal Toplevel.MenuBar Toplevel.StatusBar Toplevel.OnKeyDown(KeyEvent) Toplevel.OnKeyUp(KeyEvent) Toplevel.ProcessColdKey(KeyEvent) View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class OpenDialog : FileDialog, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The open dialog can be used to select files for opening, it can be configured to allow multiple items to be selected (based on the AllowsMultipleSelection) variable and you can control whether this should allow files or directories to be selected. To use, create an instance of OpenDialog , and pass it to Run(Func<Exception, Boolean>) . This will run the dialog modally, and when this returns, the list of filds will be available on the FilePaths property. To select more than one file, users can use the spacebar, or control-t. Constructors OpenDialog() Initializes a new OpenDialog . Declaration public OpenDialog() OpenDialog(ustring, ustring) Initializes a new OpenDialog . Declaration public OpenDialog(ustring title, ustring message) Parameters Type Name Description NStack.ustring title NStack.ustring message Properties AllowsMultipleSelection Gets or sets a value indicating whether this OpenDialog allows multiple selection. Declaration public bool AllowsMultipleSelection { get; set; } Property Value Type Description System.Boolean true if allows multiple selection; otherwise, false , defaults to false. CanChooseDirectories Gets or sets a value indicating whether this OpenDialog can choose directories. Declaration public bool CanChooseDirectories { get; set; } Property Value Type Description System.Boolean true if can choose directories; otherwise, false defaults to false . CanChooseFiles Gets or sets a value indicating whether this OpenDialog can choose files. Declaration public bool CanChooseFiles { get; set; } Property Value Type Description System.Boolean true if can choose files; otherwise, false . Defaults to true FilePaths Returns the selected files, or an empty list if nothing has been selected Declaration public IReadOnlyList<string> FilePaths { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.String > The file paths. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.Point.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Point.html",
    "title": "Struct Point",
    "keywords": "Struct Point Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public struct Point Constructors Point(Int32, Int32) Point Constructor Declaration public Point(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Remarks Creates a Point from a specified x,y coordinate pair. Point(Size) Point Constructor Declaration public Point(Size sz) Parameters Type Name Description Size sz Remarks Creates a Point from a Size value. Fields Empty Empty Shared Field Declaration public static readonly Point Empty Field Value Type Description Point Remarks An uninitialized Point Structure. X Gets or sets the x-coordinate of this Point. Declaration public int X Field Value Type Description System.Int32 Y Gets or sets the y-coordinate of this Point. Declaration public int Y Field Value Type Description System.Int32 Properties IsEmpty IsEmpty Property Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean Remarks Indicates if both X and Y are zero. Methods Add(Point, Size) Adds the specified Size to the specified Point. Declaration public static Point Add(Point pt, Size sz) Parameters Type Name Description Point pt The Point to add. Size sz The Size to add. Returns Type Description Point The Point that is the result of the addition operation. Equals(Object) Equals Method Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Remarks Checks equivalence of this Point and another object. GetHashCode() GetHashCode Method Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Remarks Calculates a hashing value. Offset(Int32, Int32) Offset Method Declaration public void Offset(int dx, int dy) Parameters Type Name Description System.Int32 dx System.Int32 dy Remarks Moves the Point a specified distance. Offset(Point) Translates this Point by the specified Point. Declaration public void Offset(Point p) Parameters Type Name Description Point p The Point used offset this Point. Subtract(Point, Size) Returns the result of subtracting specified Size from the specified Point. Declaration public static Point Subtract(Point pt, Size sz) Parameters Type Name Description Point pt The Point to be subtracted from. Size sz The Size to subtract from the Point. Returns Type Description Point The Point that is the result of the subtraction operation. ToString() ToString Method Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Remarks Formats the Point as a string in coordinate notation. Operators Addition(Point, Size) Addition Operator Declaration public static Point operator +(Point pt, Size sz) Parameters Type Name Description Point pt Size sz Returns Type Description Point Remarks Translates a Point using the Width and Height properties of the given Size . Equality(Point, Point) Equality Operator Declaration public static bool operator ==(Point left, Point right) Parameters Type Name Description Point left Point right Returns Type Description System.Boolean Remarks Compares two Point objects. The return value is based on the equivalence of the X and Y properties of the two points. Explicit(Point to Size) Point to Size Conversion Declaration public static explicit operator Size(Point p) Parameters Type Name Description Point p Returns Type Description Size Remarks Returns a Size based on the Coordinates of a given Point. Requires explicit cast. Inequality(Point, Point) Inequality Operator Declaration public static bool operator !=(Point left, Point right) Parameters Type Name Description Point left Point right Returns Type Description System.Boolean Remarks Compares two Point objects. The return value is based on the equivalence of the X and Y properties of the two points. Subtraction(Point, Size) Subtraction Operator Declaration public static Point operator -(Point pt, Size sz) Parameters Type Name Description Point pt Size sz Returns Type Description Point Remarks Translates a Point using the negation of the Width and Height properties of the given Size."
  },
  "api/Terminal.Gui/Terminal.Gui.Pos.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Pos.html",
    "title": "Class Pos",
    "keywords": "Class Pos Describes the position of a View which can be an absolute value, a percentage, centered, or relative to the ending dimension. Integer values are implicitly convertible to an absolute Pos . These objects are created using the static methods Percent, AnchorEnd, and Center. The Pos objects can be combined with the addition and subtraction operators. Inheritance System.Object Pos Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Pos Remarks Use the Pos objects on the X or Y properties of a view to control the position. These can be used to set the absolute position, when merely assigning an integer value (via the implicit integer to Pos conversion), and they can be combined to produce more useful layouts, like: Pos.Center - 3, which would shift the position of the View 3 characters to the left after centering for example. It is possible to reference coordinates of another view by using the methods Left(View), Right(View), Bottom(View), Top(View). The X(View) and Y(View) are aliases to Left(View) and Top(View) respectively. Methods AnchorEnd(Int32) Creates a Pos object that is anchored to the end (right side or bottom) of the dimension, useful to flush the layout from the right or bottom. Declaration public static Pos AnchorEnd(int margin = 0) Parameters Type Name Description System.Int32 margin Optional margin to place to the right or below. Returns Type Description Pos The Pos object anchored to the end (the bottom or the right side). Examples This sample shows how align a Button to the bottom-right of a View . // See Issue #502 anchorButton.X = Pos.AnchorEnd () - (Pos.Right (anchorButton) - Pos.Left (anchorButton)); anchorButton.Y = Pos.AnchorEnd (1); At(Int32) Creates an Absolute Pos from the specified integer value. Declaration public static Pos At(int n) Parameters Type Name Description System.Int32 n The value to convert to the Pos . Returns Type Description Pos The Absolute Pos . Bottom(View) Returns a Pos object tracks the Bottom (Y+Height) coordinate of the specified View Declaration public static Pos Bottom(View view) Parameters Type Name Description View view The View that will be tracked. Returns Type Description Pos The Pos that depends on the other view. Center() Returns a Pos object that can be used to center the View Declaration public static Pos Center() Returns Type Description Pos The center Pos. Examples This creates a TextField that is centered horizontally, is 50% of the way down, is 30% the height, and is 80% the width of the View it added to. var textView = new TextView () { X = Pos.Center (), Y = Pos.Percent (50), Width = Dim.Percent (80), Height = Dim.Percent (30), }; Left(View) Returns a Pos object tracks the Left (X) position of the specified View . Declaration public static Pos Left(View view) Parameters Type Name Description View view The View that will be tracked. Returns Type Description Pos The Pos that depends on the other view. Percent(Single) Creates a percentage Pos object Declaration public static Pos Percent(float n) Parameters Type Name Description System.Single n A value between 0 and 100 representing the percentage. Returns Type Description Pos The percent Pos object. Examples This creates a TextField that is centered horizontally, is 50% of the way down, is 30% the height, and is 80% the width of the View it added to. var textView = new TextView () { X = Pos.Center (), Y = Pos.Percent (50), Width = Dim.Percent (80), Height = Dim.Percent (30), }; Right(View) Returns a Pos object tracks the Right (X+Width) coordinate of the specified View . Declaration public static Pos Right(View view) Parameters Type Name Description View view The View that will be tracked. Returns Type Description Pos The Pos that depends on the other view. Top(View) Returns a Pos object tracks the Top (Y) position of the specified View . Declaration public static Pos Top(View view) Parameters Type Name Description View view The View that will be tracked. Returns Type Description Pos The Pos that depends on the other view. X(View) Returns a Pos object tracks the Left (X) position of the specified View . Declaration public static Pos X(View view) Parameters Type Name Description View view The View that will be tracked. Returns Type Description Pos The Pos that depends on the other view. Y(View) Returns a Pos object tracks the Top (Y) position of the specified View . Declaration public static Pos Y(View view) Parameters Type Name Description View view The View that will be tracked. Returns Type Description Pos The Pos that depends on the other view. Operators Addition(Pos, Pos) Adds a Pos to a Pos , yielding a new Pos . Declaration public static Pos operator +(Pos left, Pos right) Parameters Type Name Description Pos left The first Pos to add. Pos right The second Pos to add. Returns Type Description Pos The Pos that is the sum of the values of left and right . Implicit(Int32 to Pos) Creates an Absolute Pos from the specified integer value. Declaration public static implicit operator Pos(int n) Parameters Type Name Description System.Int32 n The value to convert to the Pos . Returns Type Description Pos The Absolute Pos . Subtraction(Pos, Pos) Subtracts a Pos from a Pos , yielding a new Pos . Declaration public static Pos operator -(Pos left, Pos right) Parameters Type Name Description Pos left The Pos to subtract from (the minuend). Pos right The Pos to subtract (the subtrahend). Returns Type Description Pos The Pos that is the left minus right ."
  },
  "api/Terminal.Gui/Terminal.Gui.ProgressBar.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ProgressBar.html",
    "title": "Class ProgressBar",
    "keywords": "Class ProgressBar A Progress Bar view that can indicate progress of an activity visually. Inheritance System.Object Responder View ProgressBar Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessKey(KeyEvent) View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.MouseEvent(MouseEvent) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ProgressBar : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks ProgressBar can operate in two modes, percentage mode, or activity mode. The progress bar starts in percentage mode and setting the Fraction property will reflect on the UI the progress made so far. Activity mode is used when the application has no way of knowing how much time is left, and is started when the Pulse() method is called. Call Pulse() repeatedly as progress is made. Constructors ProgressBar() Initializes a new instance of the ProgressBar class, starts in percentage mode and uses relative layout. Declaration public ProgressBar() ProgressBar(Rect) Initializes a new instance of the ProgressBar class, starts in percentage mode with an absolute position and size. Declaration public ProgressBar(Rect rect) Parameters Type Name Description Rect rect Rect. Properties Fraction Gets or sets the ProgressBar fraction to display, must be a value between 0 and 1. Declaration public float Fraction { get; set; } Property Value Type Description System.Single The fraction representing the progress. Methods OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) Pulse() Notifies the ProgressBar that some progress has taken place. Declaration public void Pulse() Remarks If the ProgressBar is is percentage mode, it switches to activity mode. If is in activity mode, the marker is moved. Redraw(Rect) Declaration public override void Redraw(Rect region) Parameters Type Name Description Rect region Overrides View.Redraw(Rect) Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.RadioGroup.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.RadioGroup.html",
    "title": "Class RadioGroup",
    "keywords": "Class RadioGroup RadioGroup shows a group of radio labels, only one of those can be selected at a given time Inheritance System.Object Responder View RadioGroup Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class RadioGroup : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors RadioGroup() Initializes a new instance of the RadioGroup class using Computed layout. Declaration public RadioGroup() RadioGroup(ustring[], Int32) Initializes a new instance of the RadioGroup class using Computed layout. Declaration public RadioGroup(ustring[] radioLabels, int selected = 0) Parameters Type Name Description NStack.ustring [] radioLabels The radio labels; an array of strings that can contain hotkeys using an underscore before the letter. System.Int32 selected The index of the item to be selected, the value is clamped to the number of items. RadioGroup(Int32, Int32, ustring[], Int32) Initializes a new instance of the RadioGroup class using Absolute layout. The View frame is computed from the provided radio labels. Declaration public RadioGroup(int x, int y, ustring[] radioLabels, int selected = 0) Parameters Type Name Description System.Int32 x The x coordinate. System.Int32 y The y coordinate. NStack.ustring [] radioLabels The radio labels; an array of strings that can contain hotkeys using an underscore before the letter. System.Int32 selected The item to be selected, the value is clamped to the number of items. RadioGroup(Rect, ustring[], Int32) Initializes a new instance of the RadioGroup class using Absolute layout. Declaration public RadioGroup(Rect rect, ustring[] radioLabels, int selected = 0) Parameters Type Name Description Rect rect Boundaries for the radio group. NStack.ustring [] radioLabels The radio labels; an array of strings that can contain hotkeys using an underscore before the letter. System.Int32 selected The index of item to be selected, the value is clamped to the number of items. Properties DisplayMode Gets or sets the DisplayModeLayout for this RadioGroup . Declaration public DisplayModeLayout DisplayMode { get; set; } Property Value Type Description DisplayModeLayout HorizontalSpace Gets or sets the horizontal space for this RadioGroup if the DisplayMode is Horizontal Declaration public int HorizontalSpace { get; set; } Property Value Type Description System.Int32 RadioLabels The radio labels to display Declaration public ustring[] RadioLabels { get; set; } Property Value Type Description NStack.ustring [] The radio labels. SelectedItem The currently selected item from the list of radio labels Declaration public int SelectedItem { get; set; } Property Value Type Description System.Int32 The selected. Methods MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) OnSelectedItemChanged(Int32, Int32) Called whenever the current selected item changes. Invokes the SelectedItemChanged event. Declaration public virtual void OnSelectedItemChanged(int selectedItem, int previousSelectedItem) Parameters Type Name Description System.Int32 selectedItem System.Int32 previousSelectedItem PositionCursor() Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessColdKey(KeyEvent) Declaration public override bool ProcessColdKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessColdKey(KeyEvent) ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Refresh() Allow to invoke the SelectedItemChanged after their creation. Declaration public void Refresh() Events SelectedItemChanged Invoked when the selected radio label has changed. Declaration public event Action<RadioGroup.SelectedItemChangedArgs> SelectedItemChanged Event Type Type Description System.Action < RadioGroup.SelectedItemChangedArgs > Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.RadioGroup.SelectedItemChangedArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.RadioGroup.SelectedItemChangedArgs.html",
    "title": "Class RadioGroup.SelectedItemChangedArgs",
    "keywords": "Class RadioGroup.SelectedItemChangedArgs Event arguments for the SelectedItemChagned event. Inheritance System.Object System.EventArgs RadioGroup.SelectedItemChangedArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class SelectedItemChangedArgs : EventArgs Constructors SelectedItemChangedArgs(Int32, Int32) Initializes a new RadioGroup.SelectedItemChangedArgs class. Declaration public SelectedItemChangedArgs(int selectedItem, int previousSelectedItem) Parameters Type Name Description System.Int32 selectedItem System.Int32 previousSelectedItem Properties PreviousSelectedItem Gets the index of the item that was previously selected. -1 if there was no previous selection. Declaration public int PreviousSelectedItem { get; } Property Value Type Description System.Int32 SelectedItem Gets the index of the item that is now selected. -1 if there is no selection. Declaration public int SelectedItem { get; } Property Value Type Description System.Int32"
  },
  "api/Terminal.Gui/Terminal.Gui.Rect.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Rect.html",
    "title": "Struct Rect",
    "keywords": "Struct Rect Stores a set of four integers that represent the location and size of a rectangle Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public struct Rect Constructors Rect(Int32, Int32, Int32, Int32) Rectangle Constructor Declaration public Rect(int x, int y, int width, int height) Parameters Type Name Description System.Int32 x System.Int32 y System.Int32 width System.Int32 height Remarks Creates a Rectangle from a specified x,y location and width and height values. Rect(Point, Size) Rectangle Constructor Declaration public Rect(Point location, Size size) Parameters Type Name Description Point location Size size Remarks Creates a Rectangle from Point and Size values. Fields Empty Empty Shared Field Declaration public static readonly Rect Empty Field Value Type Description Rect Remarks An uninitialized Rectangle Structure. X Gets or sets the x-coordinate of the upper-left corner of this Rectangle structure. Declaration public int X Field Value Type Description System.Int32 Y Gets or sets the y-coordinate of the upper-left corner of this Rectangle structure. Declaration public int Y Field Value Type Description System.Int32 Properties Bottom Bottom Property Declaration public int Bottom { get; } Property Value Type Description System.Int32 Remarks The Y coordinate of the bottom edge of the Rectangle. Read only. Height Gets or sets the height of this Rectangle structure. Declaration public int Height { get; set; } Property Value Type Description System.Int32 IsEmpty IsEmpty Property Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean Remarks Indicates if the width or height are zero. Read only. Left Left Property Declaration public int Left { get; } Property Value Type Description System.Int32 Remarks The X coordinate of the left edge of the Rectangle. Read only. Location Location Property Declaration public Point Location { get; set; } Property Value Type Description Point Remarks The Location of the top-left corner of the Rectangle. Right Right Property Declaration public int Right { get; } Property Value Type Description System.Int32 Remarks The X coordinate of the right edge of the Rectangle. Read only. Size Size Property Declaration public Size Size { get; set; } Property Value Type Description Size Remarks The Size of the Rectangle. Top Top Property Declaration public int Top { get; } Property Value Type Description System.Int32 Remarks The Y coordinate of the top edge of the Rectangle. Read only. Width Gets or sets the width of this Rect structure. Declaration public int Width { get; set; } Property Value Type Description System.Int32 Methods Contains(Int32, Int32) Contains Method Declaration public bool Contains(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Returns Type Description System.Boolean Remarks Checks if an x,y coordinate lies within this Rectangle. Contains(Point) Contains Method Declaration public bool Contains(Point pt) Parameters Type Name Description Point pt Returns Type Description System.Boolean Remarks Checks if a Point lies within this Rectangle. Contains(Rect) Contains Method Declaration public bool Contains(Rect rect) Parameters Type Name Description Rect rect Returns Type Description System.Boolean Remarks Checks if a Rectangle lies entirely within this Rectangle. Equals(Object) Equals Method Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Remarks Checks equivalence of this Rectangle and another object. FromLTRB(Int32, Int32, Int32, Int32) FromLTRB Shared Method Declaration public static Rect FromLTRB(int left, int top, int right, int bottom) Parameters Type Name Description System.Int32 left System.Int32 top System.Int32 right System.Int32 bottom Returns Type Description Rect Remarks Produces a Rectangle structure from left, top, right and bottom coordinates. GetHashCode() GetHashCode Method Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Remarks Calculates a hashing value. Inflate(Int32, Int32) Inflate Method Declaration public void Inflate(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height Remarks Inflates the Rectangle by a specified width and height. Inflate(Rect, Int32, Int32) Inflate Shared Method Declaration public static Rect Inflate(Rect rect, int x, int y) Parameters Type Name Description Rect rect System.Int32 x System.Int32 y Returns Type Description Rect Remarks Produces a new Rectangle by inflating an existing Rectangle by the specified coordinate values. Inflate(Size) Inflate Method Declaration public void Inflate(Size size) Parameters Type Name Description Size size Remarks Inflates the Rectangle by a specified Size. Intersect(Rect) Intersect Method Declaration public void Intersect(Rect rect) Parameters Type Name Description Rect rect Remarks Replaces the Rectangle with the intersection of itself and another Rectangle. Intersect(Rect, Rect) Intersect Shared Method Declaration public static Rect Intersect(Rect a, Rect b) Parameters Type Name Description Rect a Rect b Returns Type Description Rect Remarks Produces a new Rectangle by intersecting 2 existing Rectangles. Returns null if there is no intersection. IntersectsWith(Rect) IntersectsWith Method Declaration public bool IntersectsWith(Rect rect) Parameters Type Name Description Rect rect Returns Type Description System.Boolean Remarks Checks if a Rectangle intersects with this one. Offset(Int32, Int32) Offset Method Declaration public void Offset(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Remarks Moves the Rectangle a specified distance. Offset(Point) Offset Method Declaration public void Offset(Point pos) Parameters Type Name Description Point pos Remarks Moves the Rectangle a specified distance. ToString() ToString Method Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Remarks Formats the Rectangle as a string in (x,y,w,h) notation. Union(Rect, Rect) Union Shared Method Declaration public static Rect Union(Rect a, Rect b) Parameters Type Name Description Rect a Rect b Returns Type Description Rect Remarks Produces a new Rectangle from the union of 2 existing Rectangles. Operators Equality(Rect, Rect) Equality Operator Declaration public static bool operator ==(Rect left, Rect right) Parameters Type Name Description Rect left Rect right Returns Type Description System.Boolean Remarks Compares two Rectangle objects. The return value is based on the equivalence of the Location and Size properties of the two Rectangles. Inequality(Rect, Rect) Inequality Operator Declaration public static bool operator !=(Rect left, Rect right) Parameters Type Name Description Rect left Rect right Returns Type Description System.Boolean Remarks Compares two Rectangle objects. The return value is based on the equivalence of the Location and Size properties of the two Rectangles."
  },
  "api/Terminal.Gui/Terminal.Gui.Responder.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Responder.html",
    "title": "Class Responder",
    "keywords": "Class Responder Responder base class implemented by objects that want to participate on keyboard and mouse input. Inheritance System.Object Responder View Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Responder : IDisposable Properties CanFocus Gets or sets a value indicating whether this Responder can focus. Declaration public virtual bool CanFocus { get; set; } Property Value Type Description System.Boolean true if can focus; otherwise, false . HasFocus Gets or sets a value indicating whether this Responder has focus. Declaration public virtual bool HasFocus { get; } Property Value Type Description System.Boolean true if has focus; otherwise, false . Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resource. Declaration public void Dispose() Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Remarks If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed. If disposing equals false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed. MouseEvent(MouseEvent) Method invoked when a mouse event is generated Declaration public virtual bool MouseEvent(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Contains the details about the mouse event. Returns Type Description System.Boolean true , if the event was handled, false otherwise. OnEnter(View) Method invoked when a view gets focus. Declaration public virtual bool OnEnter(View view) Parameters Type Name Description View view The view that is losing focus. Returns Type Description System.Boolean true , if the event was handled, false otherwise. OnKeyDown(KeyEvent) Method invoked when a key is pressed. Declaration public virtual bool OnKeyDown(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Contains the details about the key that produced the event. Returns Type Description System.Boolean true if the event was handled OnKeyUp(KeyEvent) Method invoked when a key is released. Declaration public virtual bool OnKeyUp(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Contains the details about the key that produced the event. Returns Type Description System.Boolean true if the event was handled OnLeave(View) Method invoked when a view loses focus. Declaration public virtual bool OnLeave(View view) Parameters Type Name Description View view The view that is getting focus. Returns Type Description System.Boolean true , if the event was handled, false otherwise. OnMouseEnter(MouseEvent) Method invoked when a mouse event is generated for the first time. Declaration public virtual bool OnMouseEnter(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Returns Type Description System.Boolean true , if the event was handled, false otherwise. OnMouseLeave(MouseEvent) Method invoked when a mouse event is generated for the last time. Declaration public virtual bool OnMouseLeave(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Returns Type Description System.Boolean true , if the event was handled, false otherwise. ProcessColdKey(KeyEvent) This method can be overwritten by views that want to provide accelerator functionality (Alt-key for example), but without interefering with normal ProcessKey behavior. Declaration public virtual bool ProcessColdKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Contains the details about the key that produced the event. Returns Type Description System.Boolean Remarks After keys are sent to the subviews on the current view, all the view are processed and the key is passed to the views to allow some of them to process the keystroke as a cold-key. This functionality is used, for example, by default buttons to act on the enter key. Processing this as a hot-key would prevent non-default buttons from consuming the enter keypress when they have the focus. ProcessHotKey(KeyEvent) This method can be overwritten by view that want to provide accelerator functionality (Alt-key for example). Declaration public virtual bool ProcessHotKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Remarks Before keys are sent to the subview on the current view, all the views are processed and the key is passed to the widgets to allow some of them to process the keystroke as a hot-key. For example, if you implement a button that has a hotkey ok \"o\", you would catch the combination Alt-o here. If the event is caught, you must return true to stop the keystroke from being dispatched to other views. ProcessKey(KeyEvent) If the view is focused, gives the view a chance to process the keystroke. Declaration public virtual bool ProcessKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Contains the details about the key that produced the event. Returns Type Description System.Boolean Remarks Views can override this method if they are interested in processing the given keystroke. If they consume the keystroke, they must return true to stop the keystroke from being processed by other widgets or consumed by the widget engine. If they return false, the keystroke will be passed using the ProcessColdKey method to other views to process. The View implementation does nothing but return false, so it is not necessary to call base.ProcessKey if you derive directly from View, but you should if you derive other View subclasses. Implements System.IDisposable"
  },
  "api/Terminal.Gui/Terminal.Gui.SaveDialog.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.SaveDialog.html",
    "title": "Class SaveDialog",
    "keywords": "Class SaveDialog The SaveDialog provides an interactive dialog box for users to pick a file to save. Inheritance System.Object Responder View Toplevel Window Dialog FileDialog SaveDialog Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members FileDialog.WillPresent() FileDialog.Prompt FileDialog.NameFieldLabel FileDialog.Message FileDialog.CanCreateDirectories FileDialog.IsExtensionHidden FileDialog.DirectoryPath FileDialog.AllowedFileTypes FileDialog.AllowsOtherFileTypes FileDialog.FilePath FileDialog.Canceled Dialog.AddButton(Button) Dialog.ProcessKey(KeyEvent) Window.Title Window.Add(View) Window.Remove(View) Window.RemoveAll() Window.Redraw(Rect) Window.MouseEvent(MouseEvent) Window.Text Window.TextAlignment Toplevel.Running Toplevel.Loaded Toplevel.Ready Toplevel.Unloaded Toplevel.Create() Toplevel.CanFocus Toplevel.Modal Toplevel.MenuBar Toplevel.StatusBar Toplevel.OnKeyDown(KeyEvent) Toplevel.OnKeyUp(KeyEvent) Toplevel.ProcessColdKey(KeyEvent) View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class SaveDialog : FileDialog, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks To use, create an instance of SaveDialog , and pass it to Run(Func<Exception, Boolean>) . This will run the dialog modally, and when this returns, the FileName property will contain the selected file name or null if the user canceled. Constructors SaveDialog() Initializes a new SaveDialog . Declaration public SaveDialog() SaveDialog(ustring, ustring) Initializes a new SaveDialog . Declaration public SaveDialog(ustring title, ustring message) Parameters Type Name Description NStack.ustring title The title. NStack.ustring message The message. Properties FileName Gets the name of the file the user selected for saving, or null if the user canceled the SaveDialog . Declaration public ustring FileName { get; } Property Value Type Description NStack.ustring The name of the file. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.ScrollBarView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ScrollBarView.html",
    "title": "Class ScrollBarView",
    "keywords": "Class ScrollBarView ScrollBarViews are views that display a 1-character scrollbar, either horizontal or vertical Inheritance System.Object Responder View ScrollBarView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessKey(KeyEvent) View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ScrollBarView : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The scrollbar is drawn to be a representation of the Size, assuming that the scroll position is set at Position. If the region to display the scrollbar is larger than three characters, arrow indicators are drawn. Constructors ScrollBarView() Initializes a new instance of the ScrollBarView class using Computed layout. Declaration public ScrollBarView() ScrollBarView(Int32, Int32, Boolean) Initializes a new instance of the ScrollBarView class using Computed layout. Declaration public ScrollBarView(int size, int position, bool isVertical) Parameters Type Name Description System.Int32 size The size that this scrollbar represents. System.Int32 position The position within this scrollbar. System.Boolean isVertical If set to true this is a vertical scrollbar, otherwise, the scrollbar is horizontal. ScrollBarView(Rect) Initializes a new instance of the ScrollBarView class using Absolute layout. Declaration public ScrollBarView(Rect rect) Parameters Type Name Description Rect rect Frame for the scrollbar. ScrollBarView(Rect, Int32, Int32, Boolean) Initializes a new instance of the ScrollBarView class using Absolute layout. Declaration public ScrollBarView(Rect rect, int size, int position, bool isVertical) Parameters Type Name Description Rect rect Frame for the scrollbar. System.Int32 size The size that this scrollbar represents. Sets the Size property. System.Int32 position The position within this scrollbar. Sets the Position property. System.Boolean isVertical If set to true this is a vertical scrollbar, otherwise, the scrollbar is horizontal. Sets the IsVertical property. ScrollBarView(View, Boolean, Boolean) Initializes a new instance of the ScrollBarView class using Computed layout. Declaration public ScrollBarView(View host, bool isVertical, bool showBothScrollIndicator = true) Parameters Type Name Description View host The view that will host this scrollbar. System.Boolean isVertical If set to true this is a vertical scrollbar, otherwise, the scrollbar is horizontal. System.Boolean showBothScrollIndicator If set to true (default) will have the other scrollbar, otherwise will have only one. Properties AutoHideScrollBars If true the vertical/horizontal scroll bars won't be showed if it's not needed. Declaration public bool AutoHideScrollBars { get; set; } Property Value Type Description System.Boolean Host Get or sets the view that host this View Declaration public View Host { get; } Property Value Type Description View IsVertical If set to true this is a vertical scrollbar, otherwise, the scrollbar is horizontal. Declaration public bool IsVertical { get; set; } Property Value Type Description System.Boolean KeepContentAlwaysInViewport Get or sets if the view-port is kept always visible in the area of this ScrollBarView Declaration public bool KeepContentAlwaysInViewport { get; set; } Property Value Type Description System.Boolean OtherScrollBarView Represent a vertical or horizontal ScrollBarView other than this. Declaration public ScrollBarView OtherScrollBarView { get; set; } Property Value Type Description ScrollBarView Position The position, relative to Size , to set the scrollbar at. Declaration public int Position { get; set; } Property Value Type Description System.Int32 The position. ShowScrollIndicator Gets or sets the visibility for the vertical or horizontal scroll indicator. Declaration public bool ShowScrollIndicator { get; set; } Property Value Type Description System.Boolean true if show vertical or horizontal scroll indicator; otherwise, false . Size The size of content the scrollbar represents. Declaration public int Size { get; set; } Property Value Type Description System.Int32 The size. Remarks The Size is typically the size of the virtual content. E.g. when a Scrollbar is part of a View the Size is set to the appropriate dimension of Host . Methods MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnChangedPosition() Virtual method to invoke the ChangedPosition action event. Declaration public virtual void OnChangedPosition() OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) Redraw(Rect) Declaration public override void Redraw(Rect region) Parameters Type Name Description Rect region Overrides View.Redraw(Rect) Refresh() Only used for a hosted view that will update and redraw the scrollbars. Declaration public virtual void Refresh() Events ChangedPosition This event is raised when the position on the scrollbar has changed. Declaration public event Action ChangedPosition Event Type Type Description System.Action Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.ScrollView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ScrollView.html",
    "title": "Class ScrollView",
    "keywords": "Class ScrollView Scrollviews are views that present a window into a virtual space where subviews are added. Similar to the iOS UIScrollView. Inheritance System.Object Responder View ScrollView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ScrollView : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The subviews that are added to this ScrollView are offset by the ContentOffset property. The view itself is a window into the space represented by the ContentSize . Use the Constructors ScrollView() Initializes a new instance of the ScrollView class using Computed positioning. Declaration public ScrollView() ScrollView(Rect) Initializes a new instance of the ScrollView class using Absolute positioning. Declaration public ScrollView(Rect frame) Parameters Type Name Description Rect frame Properties AutoHideScrollBars If true the vertical/horizontal scroll bars won't be showed if it's not needed. Declaration public bool AutoHideScrollBars { get; set; } Property Value Type Description System.Boolean ContentOffset Represents the top left corner coordinate that is displayed by the scrollview Declaration public Point ContentOffset { get; set; } Property Value Type Description Point The content offset. ContentSize Represents the contents of the data shown inside the scrollview Declaration public Size ContentSize { get; set; } Property Value Type Description Size The size of the content. KeepContentAlwaysInViewport Get or sets if the view-port is kept always visible in the area of this ScrollView Declaration public bool KeepContentAlwaysInViewport { get; set; } Property Value Type Description System.Boolean ShowHorizontalScrollIndicator Gets or sets the visibility for the horizontal scroll indicator. Declaration public bool ShowHorizontalScrollIndicator { get; set; } Property Value Type Description System.Boolean true if show horizontal scroll indicator; otherwise, false . ShowVerticalScrollIndicator /// Gets or sets the visibility for the vertical scroll indicator. Declaration public bool ShowVerticalScrollIndicator { get; set; } Property Value Type Description System.Boolean true if show vertical scroll indicator; otherwise, false . Methods Add(View) Adds the view to the scrollview. Declaration public override void Add(View view) Parameters Type Name Description View view The view to add to the scrollview. Overrides View.Add(View) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides View.Dispose(Boolean) MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) PositionCursor() Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect region) Parameters Type Name Description Rect region Overrides View.Redraw(Rect) RemoveAll() Removes all widgets from this container. Declaration public override void RemoveAll() Overrides View.RemoveAll() Remarks ScrollDown(Int32) Scrolls the view down. Declaration public bool ScrollDown(int lines) Parameters Type Name Description System.Int32 lines Number of lines to scroll. Returns Type Description System.Boolean true , if left was scrolled, false otherwise. ScrollLeft(Int32) Scrolls the view to the left Declaration public bool ScrollLeft(int cols) Parameters Type Name Description System.Int32 cols Number of columns to scroll by. Returns Type Description System.Boolean true , if left was scrolled, false otherwise. ScrollRight(Int32) Scrolls the view to the right. Declaration public bool ScrollRight(int cols) Parameters Type Name Description System.Int32 cols Number of columns to scroll by. Returns Type Description System.Boolean true , if right was scrolled, false otherwise. ScrollUp(Int32) Scrolls the view up. Declaration public bool ScrollUp(int lines) Parameters Type Name Description System.Int32 lines Number of lines to scroll. Returns Type Description System.Boolean true , if left was scrolled, false otherwise. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.SelectedCellChangedEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.SelectedCellChangedEventArgs.html",
    "title": "Class SelectedCellChangedEventArgs",
    "keywords": "Class SelectedCellChangedEventArgs Defines the event arguments for SelectedCellChanged Inheritance System.Object System.EventArgs SelectedCellChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class SelectedCellChangedEventArgs : EventArgs Constructors SelectedCellChangedEventArgs(DataTable, Int32, Int32, Int32, Int32) Creates a new instance of arguments describing a change in selected cell in a TableView Declaration public SelectedCellChangedEventArgs(DataTable t, int oldCol, int newCol, int oldRow, int newRow) Parameters Type Name Description System.Data.DataTable t System.Int32 oldCol System.Int32 newCol System.Int32 oldRow System.Int32 newRow Properties NewCol The newly selected column index. Declaration public int NewCol { get; } Property Value Type Description System.Int32 NewRow The newly selected row index. Declaration public int NewRow { get; } Property Value Type Description System.Int32 OldCol The previous selected column index. May be invalid e.g. when the selection has been changed as a result of replacing the existing Table with a smaller one Declaration public int OldCol { get; } Property Value Type Description System.Int32 OldRow The previous selected row index. May be invalid e.g. when the selection has been changed as a result of deleting rows from the table Declaration public int OldRow { get; } Property Value Type Description System.Int32 Table The current table to which the new indexes refer. May be null e.g. if selection change is the result of clearing the table from the view Declaration public DataTable Table { get; } Property Value Type Description System.Data.DataTable"
  },
  "api/Terminal.Gui/Terminal.Gui.SelectionChangedEventArgs-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.SelectionChangedEventArgs-1.html",
    "title": "Class SelectionChangedEventArgs<T>",
    "keywords": "Class SelectionChangedEventArgs<T> Event arguments describing a change in selected object in a tree view Inheritance System.Object System.EventArgs SelectionChangedEventArgs<T> Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class SelectionChangedEventArgs<T> : EventArgs where T : class Type Parameters Name Description T Constructors SelectionChangedEventArgs(TreeView<T>, T, T) Creates a new instance of event args describing a change of selection in tree Declaration public SelectionChangedEventArgs(TreeView<T> tree, T oldValue, T newValue) Parameters Type Name Description TreeView <T> tree T oldValue T newValue Properties NewValue The newly selected value in the Tree (can be null) Declaration public T NewValue { get; } Property Value Type Description T OldValue The previously selected value (can be null) Declaration public T OldValue { get; } Property Value Type Description T Tree The view in which the change occurred Declaration public TreeView<T> Tree { get; } Property Value Type Description TreeView <T>"
  },
  "api/Terminal.Gui/Terminal.Gui.ShortcutHelper.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.ShortcutHelper.html",
    "title": "Class ShortcutHelper",
    "keywords": "Class ShortcutHelper Represents a helper to manipulate shortcut keys used on views. Inheritance System.Object ShortcutHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class ShortcutHelper Properties Shortcut This is the global setting that can be used as a global shortcut to invoke the action on the view. Declaration public virtual Key Shortcut { get; set; } Property Value Type Description Key ShortcutAction The action to run if the Shortcut is defined. Declaration public virtual Action ShortcutAction { get; set; } Property Value Type Description System.Action ShortcutTag The keystroke combination used in the Shortcut as string. Declaration public virtual ustring ShortcutTag { get; } Property Value Type Description NStack.ustring Methods CheckKeysFlagRange(Key, Key, Key) Lookup for a Key on range of keys. Declaration public static bool CheckKeysFlagRange(Key key, Key first, Key last) Parameters Type Name Description Key key The source key. Key first First key in range. Key last Last key in range. Returns Type Description System.Boolean FindAndOpenByShortcut(KeyEvent, View) Allows a view to run a ShortcutAction if defined. Declaration public static bool FindAndOpenByShortcut(KeyEvent kb, View view = null) Parameters Type Name Description KeyEvent kb The KeyEvent View view The View Returns Type Description System.Boolean true if defined false otherwise. GetKeyToString(Key, out Key) Return key as string. Declaration public static ustring GetKeyToString(Key key, out Key knm) Parameters Type Name Description Key key The key to extract. Key knm Correspond to the non modifier key. Returns Type Description NStack.ustring GetModifiersKey(KeyEvent) Gets the key with all the keys modifiers, especially the shift key that sometimes have to be injected later. Declaration public static Key GetModifiersKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb The KeyEvent to check. Returns Type Description Key The Key with all the keys modifiers. GetShortcutFromTag(ustring) Allows to retrieve a Key from a ShortcutTag Declaration public static Key GetShortcutFromTag(ustring tag) Parameters Type Name Description NStack.ustring tag The key as string. Returns Type Description Key GetShortcutTag(Key) Get the Shortcut key as string. Declaration public static ustring GetShortcutTag(Key shortcut) Parameters Type Name Description Key shortcut The shortcut key. Returns Type Description NStack.ustring PostShortcutValidation(Key) Used at key up validation. Declaration public static bool PostShortcutValidation(Key key) Parameters Type Name Description Key key The key to validate. Returns Type Description System.Boolean true if is valid. false otherwise. PreShortcutValidation(Key) Used at key down or key press validation. Declaration public static bool PreShortcutValidation(Key key) Parameters Type Name Description Key key The key to validate. Returns Type Description System.Boolean true if is valid. false otherwise."
  },
  "api/Terminal.Gui/Terminal.Gui.Size.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Size.html",
    "title": "Struct Size",
    "keywords": "Struct Size Stores an ordered pair of integers, which specify a Height and Width. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public struct Size Constructors Size(Int32, Int32) Size Constructor Declaration public Size(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height Remarks Creates a Size from specified dimensions. Size(Point) Size Constructor Declaration public Size(Point pt) Parameters Type Name Description Point pt Remarks Creates a Size from a Point value. Fields Empty Gets a Size structure that has a Height and Width value of 0. Declaration public static readonly Size Empty Field Value Type Description Size Properties Height Height Property Declaration public int Height { get; set; } Property Value Type Description System.Int32 Remarks The Height coordinate of the Size. IsEmpty IsEmpty Property Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean Remarks Indicates if both Width and Height are zero. Width Width Property Declaration public int Width { get; set; } Property Value Type Description System.Int32 Remarks The Width coordinate of the Size. Methods Add(Size, Size) Adds the width and height of one Size structure to the width and height of another Size structure. Declaration public static Size Add(Size sz1, Size sz2) Parameters Type Name Description Size sz1 The first Size structure to add. Size sz2 The second Size structure to add. Returns Type Description Size The add. Equals(Object) Equals Method Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Remarks Checks equivalence of this Size and another object. GetHashCode() GetHashCode Method Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Remarks Calculates a hashing value. Subtract(Size, Size) Subtracts the width and height of one Size structure to the width and height of another Size structure. Declaration public static Size Subtract(Size sz1, Size sz2) Parameters Type Name Description Size sz1 The first Size structure to subtract. Size sz2 The second Size structure to subtract. Returns Type Description Size The subtract. ToString() ToString Method Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Remarks Formats the Size as a string in coordinate notation. Operators Addition(Size, Size) Addition Operator Declaration public static Size operator +(Size sz1, Size sz2) Parameters Type Name Description Size sz1 Size sz2 Returns Type Description Size Remarks Addition of two Size structures. Equality(Size, Size) Equality Operator Declaration public static bool operator ==(Size sz1, Size sz2) Parameters Type Name Description Size sz1 Size sz2 Returns Type Description System.Boolean Remarks Compares two Size objects. The return value is based on the equivalence of the Width and Height properties of the two Sizes. Explicit(Size to Point) Size to Point Conversion Declaration public static explicit operator Point(Size size) Parameters Type Name Description Size size Returns Type Description Point Remarks Returns a Point based on the dimensions of a given Size. Requires explicit cast. Inequality(Size, Size) Inequality Operator Declaration public static bool operator !=(Size sz1, Size sz2) Parameters Type Name Description Size sz1 Size sz2 Returns Type Description System.Boolean Remarks Compares two Size objects. The return value is based on the equivalence of the Width and Height properties of the two Sizes. Subtraction(Size, Size) Subtraction Operator Declaration public static Size operator -(Size sz1, Size sz2) Parameters Type Name Description Size sz1 Size sz2 Returns Type Description Size Remarks Subtracts two Size structures."
  },
  "api/Terminal.Gui/Terminal.Gui.StatusBar.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.StatusBar.html",
    "title": "Class StatusBar",
    "keywords": "Class StatusBar A status bar is a View that snaps to the bottom of a Toplevel displaying set of StatusItem s. The StatusBar should be context sensitive. This means, if the main menu and an open text editor are visible, the items probably shown will be ~F1~ Help ~F2~ Save ~F3~ Load. While a dialog to ask a file to load is executed, the remaining commands will probably be ~F1~ Help. So for each context must be a new instance of a statusbar. Inheritance System.Object Responder View StatusBar Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class StatusBar : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors StatusBar() Initializes a new instance of the StatusBar class. Declaration public StatusBar() StatusBar(StatusItem[]) Initializes a new instance of the StatusBar class with the specified set of StatusItem s. The StatusBar will be drawn on the lowest line of the terminal or SuperView (if not null). Declaration public StatusBar(StatusItem[] items) Parameters Type Name Description StatusItem [] items A list of statusbar items. Properties Items The items that compose the StatusBar Declaration public StatusItem[] Items { get; set; } Property Value Type Description StatusItem [] Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides View.Dispose(Boolean) MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) ProcessHotKey(KeyEvent) Declaration public override bool ProcessHotKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessHotKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.StatusItem.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.StatusItem.html",
    "title": "Class StatusItem",
    "keywords": "Class StatusItem StatusItem objects are contained by StatusBar View s. Each StatusItem has a title, a shortcut (hotkey), and an Action that will be invoked when the Shortcut is pressed. The Shortcut will be a global hotkey for the application in the current context of the screen. The colour of the Title will be changed after each ~. A Title set to `~F1~ Help` will render as *F1* using HotNormal and *Help* as HotNormal . Inheritance System.Object StatusItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class StatusItem Constructors StatusItem(Key, ustring, Action) Initializes a new StatusItem . Declaration public StatusItem(Key shortcut, ustring title, Action action) Parameters Type Name Description Key shortcut Shortcut to activate the StatusItem . NStack.ustring title Title for the StatusItem . System.Action action Action to invoke when the StatusItem is activated. Properties Action Gets or sets the action to be invoked when the statusbar item is triggered Declaration public Action Action { get; } Property Value Type Description System.Action Action to invoke. Shortcut Gets the global shortcut to invoke the action on the menu. Declaration public Key Shortcut { get; } Property Value Type Description Key Title Gets or sets the title. Declaration public ustring Title { get; set; } Property Value Type Description NStack.ustring The title. Remarks The colour of the Title will be changed after each ~. A Title set to `~F1~ Help` will render as *F1* using HotNormal and *Help* as HotNormal ."
  },
  "api/Terminal.Gui/Terminal.Gui.TableSelection.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TableSelection.html",
    "title": "Class TableSelection",
    "keywords": "Class TableSelection Describes a selected region of the table Inheritance System.Object TableSelection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TableSelection Constructors TableSelection(Point, Rect) Creates a new selected area starting at the origin corner and covering the provided rectangular area Declaration public TableSelection(Point origin, Rect rect) Parameters Type Name Description Point origin Rect rect Properties Origin Corner of the Rect where selection began Declaration public Point Origin { get; set; } Property Value Type Description Point Rect Area selected Declaration public Rect Rect { get; set; } Property Value Type Description Rect"
  },
  "api/Terminal.Gui/Terminal.Gui.TableStyle.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TableStyle.html",
    "title": "Class TableStyle",
    "keywords": "Class TableStyle Defines rendering options that affect how the table is displayed. See TableView Deep Dive for more information . Inheritance System.Object TableStyle Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TableStyle Properties AlwaysShowHeaders When scrolling down always lock the column headers in place as the first row of the table Declaration public bool AlwaysShowHeaders { get; set; } Property Value Type Description System.Boolean ColumnStyles Collection of columns for which you want special rendering (e.g. custom column lengths, text alignment etc) Declaration public Dictionary<DataColumn, ColumnStyle> ColumnStyles { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.Data.DataColumn , ColumnStyle > ShowHorizontalHeaderOverline True to render a solid line above the headers Declaration public bool ShowHorizontalHeaderOverline { get; set; } Property Value Type Description System.Boolean ShowHorizontalHeaderUnderline True to render a solid line under the headers Declaration public bool ShowHorizontalHeaderUnderline { get; set; } Property Value Type Description System.Boolean ShowVerticalCellLines True to render a solid line vertical line between cells Declaration public bool ShowVerticalCellLines { get; set; } Property Value Type Description System.Boolean ShowVerticalHeaderLines True to render a solid line vertical line between headers Declaration public bool ShowVerticalHeaderLines { get; set; } Property Value Type Description System.Boolean Methods GetColumnStyleIfAny(DataColumn) Returns the entry from ColumnStyles for the given col or null if no custom styling is defined for it Declaration public ColumnStyle GetColumnStyleIfAny(DataColumn col) Parameters Type Name Description System.Data.DataColumn col Returns Type Description ColumnStyle GetOrCreateColumnStyle(DataColumn) Returns an existing ColumnStyle for the given col or creates a new one with default options Declaration public ColumnStyle GetOrCreateColumnStyle(DataColumn col) Parameters Type Name Description System.Data.DataColumn col Returns Type Description ColumnStyle"
  },
  "api/Terminal.Gui/Terminal.Gui.TableView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TableView.html",
    "title": "Class TableView",
    "keywords": "Class TableView View for tabular data based on a System.Data.DataTable . See TableView Deep Dive for more information . Inheritance System.Object Responder View TableView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TableView : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors TableView() Initialzies a TableView class using Computed layout. Set the Table property to begin editing Declaration public TableView() TableView(DataTable) Initialzies a TableView class using Computed layout. Declaration public TableView(DataTable table) Parameters Type Name Description System.Data.DataTable table The table to display in the control Fields DefaultMaxCellWidth The default maximum cell width for MaxCellWidth and MaxWidth Declaration public const int DefaultMaxCellWidth = 100 Field Value Type Description System.Int32 Properties CellActivationKey The key which when pressed should trigger CellActivated event. Defaults to Enter. Declaration public Key CellActivationKey { get; set; } Property Value Type Description Key ColumnOffset Horizontal scroll offset. The index of the first column in Table to display when when rendering the view. Declaration public int ColumnOffset { get; set; } Property Value Type Description System.Int32 Remarks This property allows very wide tables to be rendered with horizontal scrolling FullRowSelect True to select the entire row at once. False to select individual cells. Defaults to false Declaration public bool FullRowSelect { get; set; } Property Value Type Description System.Boolean MaxCellWidth The maximum number of characters to render in any given column. This prevents one long column from pushing out all the others Declaration public int MaxCellWidth { get; set; } Property Value Type Description System.Int32 MultiSelect True to allow regions to be selected Declaration public bool MultiSelect { get; set; } Property Value Type Description System.Boolean MultiSelectedRegions When MultiSelect is enabled this property contain all rectangles of selected cells. Rectangles describe column/rows selected in Table (not screen coordinates) Declaration public Stack<TableSelection> MultiSelectedRegions { get; } Property Value Type Description System.Collections.Generic.Stack < TableSelection > NullSymbol The text representation that should be rendered for cells with the value System.DBNull.Value Declaration public string NullSymbol { get; set; } Property Value Type Description System.String RowOffset Vertical scroll offset. The index of the first row in Table to display in the first non header line of the control when rendering the view. Declaration public int RowOffset { get; set; } Property Value Type Description System.Int32 SelectedColumn The index of System.Data.DataTable.Columns in Table that the user has currently selected Declaration public int SelectedColumn { get; set; } Property Value Type Description System.Int32 SelectedRow The index of System.Data.DataTable.Rows in Table that the user has currently selected Declaration public int SelectedRow { get; set; } Property Value Type Description System.Int32 SeparatorSymbol The symbol to add after each cell value and header value to visually seperate values (if not using vertical gridlines) Declaration public char SeparatorSymbol { get; set; } Property Value Type Description System.Char Style Contains options for changing how the table is rendered Declaration public TableStyle Style { get; set; } Property Value Type Description TableStyle Table The data table to render in the view. Setting this property automatically updates and redraws the control. Declaration public DataTable Table { get; set; } Property Value Type Description System.Data.DataTable Methods CellToScreen(Int32, Int32) Returns the screen position (relative to the control client area) that the given cell is rendered or null if it is outside the current scroll area or no table is loaded Declaration public Point? CellToScreen(int tableColumn, int tableRow) Parameters Type Name Description System.Int32 tableColumn The index of the Table column you are looking for, use System.Data.DataColumn.Ordinal System.Int32 tableRow The index of the row in Table that you are looking for Returns Type Description System.Nullable < Point > ChangeSelectionByOffset(Int32, Int32, Boolean) Moves the SelectedRow and SelectedColumn by the provided offsets. Optionally starting a box selection (see MultiSelect ) Declaration public void ChangeSelectionByOffset(int offsetX, int offsetY, bool extendExistingSelection) Parameters Type Name Description System.Int32 offsetX Offset in number of columns System.Int32 offsetY Offset in number of rows System.Boolean extendExistingSelection True to create a multi cell selection or adjust an existing one EnsureSelectedCellIsVisible() Updates scroll offsets to ensure that the selected cell is visible. Has no effect if Table has not been set. Declaration public void EnsureSelectedCellIsVisible() Remarks Changes will not be immediately visible in the display until you call SetNeedsDisplay() EnsureValidScrollOffsets() Updates ColumnOffset and RowOffset where they are outside the bounds of the table (by adjusting them to the nearest existing cell). Has no effect if Table has not been set. Declaration public void EnsureValidScrollOffsets() Remarks Changes will not be immediately visible in the display until you call SetNeedsDisplay() EnsureValidSelection() Updates SelectedColumn , SelectedRow and MultiSelectedRegions where they are outside the bounds of the table (by adjusting them to the nearest existing cell). Has no effect if Table has not been set. Declaration public void EnsureValidSelection() Remarks Changes will not be immediately visible in the display until you call SetNeedsDisplay() GetAllSelectedCells() Returns all cells in any MultiSelectedRegions (if MultiSelect is enabled) and the selected cell Declaration public IEnumerable<Point> GetAllSelectedCells() Returns Type Description System.Collections.Generic.IEnumerable < Point > IsSelected(Int32, Int32) Returns true if the given cell is selected either because it is the active cell or part of a multi cell selection (e.g. FullRowSelect ) Declaration public bool IsSelected(int col, int row) Parameters Type Name Description System.Int32 col System.Int32 row Returns Type Description System.Boolean MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnCellActivated(CellActivatedEventArgs) Invokes the CellActivated event Declaration protected virtual void OnCellActivated(CellActivatedEventArgs args) Parameters Type Name Description CellActivatedEventArgs args OnSelectedCellChanged(SelectedCellChangedEventArgs) Invokes the SelectedCellChanged event Declaration protected virtual void OnSelectedCellChanged(SelectedCellChangedEventArgs args) Parameters Type Name Description SelectedCellChangedEventArgs args PositionCursor() Positions the cursor in the area of the screen in which the start of the active cell is rendered. Calls base implementation if active cell is not visible due to scrolling or table is loaded etc Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) ScreenToCell(Int32, Int32) Returns the column and row of Table that corresponds to a given point on the screen (relative to the control client area). Returns null if the point is in the header, no table is loaded or outside the control bounds Declaration public Point? ScreenToCell(int clientX, int clientY) Parameters Type Name Description System.Int32 clientX X offset from the top left of the control System.Int32 clientY Y offset from the top left of the control Returns Type Description System.Nullable < Point > SelectAll() When MultiSelect is on, creates selection over all cells in the table (replacing any old selection regions) Declaration public void SelectAll() SetSelection(Int32, Int32, Boolean) Moves the SelectedRow and SelectedColumn to the given col/row in Table . Optionally starting a box selection (see MultiSelect ) Declaration public void SetSelection(int col, int row, bool extendExistingSelection) Parameters Type Name Description System.Int32 col System.Int32 row System.Boolean extendExistingSelection True to create a multi cell selection or adjust an existing one Update() Updates the view to reflect changes to Table and to ( ColumnOffset / RowOffset ) etc Declaration public void Update() Remarks This always calls SetNeedsDisplay() Events CellActivated This event is raised when a cell is activated e.g. by double clicking or pressing CellActivationKey Declaration public event Action<CellActivatedEventArgs> CellActivated Event Type Type Description System.Action < CellActivatedEventArgs > SelectedCellChanged This event is raised when the selected cell in the table changes. Declaration public event Action<SelectedCellChangedEventArgs> SelectedCellChanged Event Type Type Description System.Action < SelectedCellChangedEventArgs > Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.TextAlignment.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TextAlignment.html",
    "title": "Enum TextAlignment",
    "keywords": "Enum TextAlignment Text alignment enumeration, controls how text is displayed. Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public enum TextAlignment Fields Name Description Centered Centers the text in the frame. Justified Shows the text as justified text in the frame. Left Aligns the text to the left of the frame. Right Aligns the text to the right side of the frame."
  },
  "api/Terminal.Gui/Terminal.Gui.TextChangingEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TextChangingEventArgs.html",
    "title": "Class TextChangingEventArgs",
    "keywords": "Class TextChangingEventArgs An System.EventArgs which allows passing a cancelable new text value event. Inheritance System.Object System.EventArgs TextChangingEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TextChangingEventArgs : EventArgs Constructors TextChangingEventArgs(ustring) Initializes a new instance of TextChangingEventArgs Declaration public TextChangingEventArgs(ustring newText) Parameters Type Name Description NStack.ustring newText The new Text to be replaced. Properties Cancel Flag which allows to cancel the new text value. Declaration public bool Cancel { get; set; } Property Value Type Description System.Boolean NewText The new text to be replaced. Declaration public ustring NewText { get; set; } Property Value Type Description NStack.ustring"
  },
  "api/Terminal.Gui/Terminal.Gui.TextField.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TextField.html",
    "title": "Class TextField",
    "keywords": "Class TextField Single-line text entry View Inheritance System.Object Responder View TextField DateField TimeField Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TextField : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The TextField View provides editing functionality and mouse support. Constructors TextField() Initializes a new instance of the TextField class using Computed positioning. Declaration public TextField() TextField(ustring) Initializes a new instance of the TextField class using Computed positioning. Declaration public TextField(ustring text) Parameters Type Name Description NStack.ustring text Initial text contents. TextField(Int32, Int32, Int32, ustring) Initializes a new instance of the TextField class using Absolute positioning. Declaration public TextField(int x, int y, int w, ustring text) Parameters Type Name Description System.Int32 x The x coordinate. System.Int32 y The y coordinate. System.Int32 w The width. NStack.ustring text Initial text contents. TextField(String) Initializes a new instance of the TextField class using Computed positioning. Declaration public TextField(string text) Parameters Type Name Description System.String text Initial text contents. Properties CanFocus Declaration public override bool CanFocus { get; set; } Property Value Type Description System.Boolean Overrides View.CanFocus CursorPosition Sets or gets the current cursor position. Declaration public int CursorPosition { get; set; } Property Value Type Description System.Int32 DesiredCursorVisibility Get / Set the wished cursor when the field is focused Declaration public CursorVisibility DesiredCursorVisibility { get; set; } Property Value Type Description CursorVisibility Frame Declaration public override Rect Frame { get; set; } Property Value Type Description Rect Overrides View.Frame ReadOnly If set to true its not allow any changes in the text. Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean Secret Sets the secret property. Declaration public bool Secret { get; set; } Property Value Type Description System.Boolean Remarks This makes the text entry suitable for entering passwords. SelectedLength Length of the selected text. Declaration public int SelectedLength { get; set; } Property Value Type Description System.Int32 SelectedStart Start position of the selected text. Declaration public int SelectedStart { get; set; } Property Value Type Description System.Int32 SelectedText The selected text. Declaration public ustring SelectedText { get; set; } Property Value Type Description NStack.ustring Text Sets or gets the text held by the view. Declaration public ustring Text { get; set; } Property Value Type Description NStack.ustring Remarks Used Tracks whether the text field should be considered \"used\", that is, that the user has moved in the entry, so new input should be appended at the cursor position, rather than clearing the entry Declaration public bool Used { get; set; } Property Value Type Description System.Boolean Methods ClearAllSelection() Clear the selected text. Declaration public void ClearAllSelection() Copy() Copy the selected text to the clipboard. Declaration public virtual void Copy() Cut() Cut the selected text to the clipboard. Declaration public virtual void Cut() MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent ev) Parameters Type Name Description MouseEvent ev Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) OnLeave(View) Declaration public override bool OnLeave(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnLeave(View) OnTextChanging(ustring) Virtual method that invoke the TextChanging event if it's defined. Declaration public virtual TextChangingEventArgs OnTextChanging(ustring newText) Parameters Type Name Description NStack.ustring newText The new text to be replaced. Returns Type Description TextChangingEventArgs Returns the TextChangingEventArgs Paste() Paste the selected text from the clipboard. Declaration public virtual void Paste() PositionCursor() Sets the cursor position. Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Processes key presses for the TextField . Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Remarks The TextField control responds to the following keys: Keys Function Delete , Backspace Deletes the character before cursor. Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Events TextChanged Changed event, raised when the text has changed. Declaration public event Action<ustring> TextChanged Event Type Type Description System.Action < NStack.ustring > Remarks This event is raised when the Text changes. TextChanging Changing event, raised before the Text changes and can be canceled or changing the new text. Declaration public event Action<TextChangingEventArgs> TextChanging Event Type Type Description System.Action < TextChangingEventArgs > Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.TextFormatter.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TextFormatter.html",
    "title": "Class TextFormatter",
    "keywords": "Class TextFormatter Provides text formatting capabilities for console apps. Supports, hotkeys, horizontal alignment, multiple lines, and word-based line wrap. Inheritance System.Object TextFormatter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TextFormatter Properties Alignment Controls the horizontal text-alignment property. Declaration public TextAlignment Alignment { get; set; } Property Value Type Description TextAlignment The text alignment. CursorPosition Gets the cursor position from HotKey . If the HotKey is defined, the cursor will be positioned over it. Declaration public int CursorPosition { get; set; } Property Value Type Description System.Int32 HotKey Gets the hotkey. Will be an upper case letter or digit. Declaration public Key HotKey { get; } Property Value Type Description Key HotKeyPos The position in the text of the hotkey. The hotkey will be rendered using the hot color. Declaration public int HotKeyPos { get; set; } Property Value Type Description System.Int32 HotKeySpecifier The specifier character for the hotkey (e.g. '_'). Set to '\\xffff' to disable hotkey support for this View instance. The default is '\\xffff'. Declaration public Rune HotKeySpecifier { get; set; } Property Value Type Description System.Rune HotKeyTagMask Specifies the mask to apply to the hotkey to tag it as the hotkey. The default value of 0x100000 causes the underlying Rune to be identified as a \"private use\" Unicode character. Declaration public uint HotKeyTagMask { get; set; } Property Value Type Description System.UInt32 Lines Gets the formatted lines. Declaration public List<ustring> Lines { get; } Property Value Type Description System.Collections.Generic.List < NStack.ustring > Remarks Upon a 'get' of this property, if the text needs to be formatted (if NeedsFormat is true ) Format(ustring, Int32, TextAlignment, Boolean) will be called internally. NeedsFormat Gets or sets whether the TextFormatter needs to format the text when Draw(Rect, Attribute, Attribute) is called. If it is false when Draw is called, the Draw call will be faster. Declaration public bool NeedsFormat { get; set; } Property Value Type Description System.Boolean Remarks This is set to true when the properties of TextFormatter are set. Size Gets or sets the size of the area the text will be constrained to when formatted. Declaration public Size Size { get; set; } Property Value Type Description Size Text The text to be displayed. This text is never modified. Declaration public virtual ustring Text { get; set; } Property Value Type Description NStack.ustring Methods CalcRect(Int32, Int32, ustring) Calculates the rectangle required to hold text, assuming no word wrapping. Declaration public static Rect CalcRect(int x, int y, ustring text) Parameters Type Name Description System.Int32 x The x location of the rectangle System.Int32 y The y location of the rectangle NStack.ustring text The text to measure Returns Type Description Rect ClipAndJustify(ustring, Int32, TextAlignment) Justifies text within a specified width. Declaration public static ustring ClipAndJustify(ustring text, int width, TextAlignment talign) Parameters Type Name Description NStack.ustring text The text to justify. System.Int32 width If the text length is greater that width it will be clipped. TextAlignment talign Alignment. Returns Type Description NStack.ustring Justified and clipped text. Draw(Rect, Attribute, Attribute) Draws the text held by TextFormatter to Driver using the colors specified. Declaration public void Draw(Rect bounds, Attribute normalColor, Attribute hotColor) Parameters Type Name Description Rect bounds Specifies the screen-relative location and maximum size for drawing the text. Attribute normalColor The color to use for all text except the hotkey Attribute hotColor The color to use to draw the hotkey FindHotKey(ustring, Rune, Boolean, out Int32, out Key) Finds the hotkey and its location in text. Declaration public static bool FindHotKey(ustring text, Rune hotKeySpecifier, bool firstUpperCase, out int hotPos, out Key hotKey) Parameters Type Name Description NStack.ustring text The text to look in. System.Rune hotKeySpecifier The hotkey specifier (e.g. '_') to look for. System.Boolean firstUpperCase If true the legacy behavior of identifying the first upper case character as the hotkey will be enabled. Regardless of the value of this parameter, hotKeySpecifier takes precedence. System.Int32 hotPos Outputs the Rune index into text . Key hotKey Outputs the hotKey. Returns Type Description System.Boolean true if a hotkey was found; false otherwise. Format(ustring, Int32, TextAlignment, Boolean) Reformats text into lines, applying text alignment and optionally wrapping text to new lines on word boundaries. Declaration public static List<ustring> Format(ustring text, int width, TextAlignment talign, bool wordWrap) Parameters Type Name Description NStack.ustring text System.Int32 width The width to bound the text to for word wrapping and clipping. TextAlignment talign Specifies how the text will be aligned horizontally. System.Boolean wordWrap If true , the text will be wrapped to new lines as need. If false , forces text to fit a single line. Line breaks are converted to spaces. The text will be clipped to width Returns Type Description System.Collections.Generic.List < NStack.ustring > A list of word wrapped lines. Remarks An empty text string will result in one empty line. If width is 0, a single, empty line will be returned. If width is int.MaxValue, the text will be formatted to the maximum width possible. Justify(ustring, Int32, Char) Justifies the text to fill the width provided. Space will be added between words (demarked by spaces and tabs) to make the text just fit width . Spaces will not be added to the ends. Declaration public static ustring Justify(ustring text, int width, char spaceChar = ' ') Parameters Type Name Description NStack.ustring text System.Int32 width System.Char spaceChar Character to replace whitespace and pad with. For debugging purposes. Returns Type Description NStack.ustring The justified text. MaxLines(ustring, Int32) Computes the number of lines needed to render the specified text given the width. Declaration public static int MaxLines(ustring text, int width) Parameters Type Name Description NStack.ustring text Text, may contain newlines. System.Int32 width The minimum width for the text. Returns Type Description System.Int32 Number of lines. MaxWidth(ustring, Int32) Computes the maximum width needed to render the text (single line or multiple lines) given a minimum width. Declaration public static int MaxWidth(ustring text, int width) Parameters Type Name Description NStack.ustring text Text, may contain newlines. System.Int32 width The minimum width for the text. Returns Type Description System.Int32 Max width of lines. RemoveHotKeySpecifier(ustring, Int32, Rune) Removes the hotkey specifier from text. Declaration public static ustring RemoveHotKeySpecifier(ustring text, int hotPos, Rune hotKeySpecifier) Parameters Type Name Description NStack.ustring text The text to manipulate. System.Int32 hotPos Returns the position of the hot-key in the text. -1 if not found. System.Rune hotKeySpecifier The hot-key specifier (e.g. '_') to look for. Returns Type Description NStack.ustring The input text with the hotkey specifier ('_') removed. ReplaceHotKeyWithTag(ustring, Int32) Replaces the Rune at the index specified by the hotPos parameter with a tag identifying it as the hotkey. Declaration public ustring ReplaceHotKeyWithTag(ustring text, int hotPos) Parameters Type Name Description NStack.ustring text The text to tag the hotkey in. System.Int32 hotPos The Rune index of the hotkey in text . Returns Type Description NStack.ustring The text with the hotkey tagged. Remarks The returned string will not render correctly without first un-doing the tag. To undo the tag, search for Runes with a bitmask of otKeyTagMask and remove that bitmask. WordWrap(ustring, Int32) Formats the provided text to fit within the width provided using word wrapping. Declaration public static List<ustring> WordWrap(ustring text, int width) Parameters Type Name Description NStack.ustring text The text to word wrap System.Int32 width The width to contain the text to Returns Type Description System.Collections.Generic.List < NStack.ustring > Returns a list of word wrapped lines. Remarks This method does not do any justification. This method strips Newline ('\\n' and '\\r\\n') sequences before processing."
  },
  "api/Terminal.Gui/Terminal.Gui.TextView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TextView.html",
    "title": "Class TextView",
    "keywords": "Class TextView Multi-line text editing View Inheritance System.Object Responder View TextView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TextView : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks TextView provides a multi-line text editor. Users interact with it with the standard Emacs commands for movement or the arrow keys. Shortcut Action performed Left cursor, Control-b Moves the editing point left. Right cursor, Control-f Moves the editing point right. Alt-b Moves one word back. Alt-f Moves one word forward. Up cursor, Control-p Moves the editing point one line up. Down cursor, Control-n Moves the editing point one line down Home key, Control-a Moves the cursor to the beginning of the line. End key, Control-e Moves the cursor to the end of the line. Control-Home Scrolls to the first line and moves the cursor there. Control-End Scrolls to the last line and moves the cursor there. Delete, Control-d Deletes the character in front of the cursor. Backspace Deletes the character behind the cursor. Control-k Deletes the text until the end of the line and replaces the kill buffer with the deleted text. You can paste this text in a different place by using Control-y. Control-y Pastes the content of the kill ring into the current position. Alt-d Deletes the word above the cursor and adds it to the kill ring. You can paste the contents of the kill ring with Control-y. Control-q Quotes the next input character, to prevent the normal processing of key handling to take place. Constructors TextView() Initializes a TextView on the specified area, with dimensions controlled with the X, Y, Width and Height properties. Declaration public TextView() TextView(Rect) Initializes a TextView on the specified area, with absolute position and size. Declaration public TextView(Rect frame) Parameters Type Name Description Rect frame Remarks Properties CanFocus Declaration public override bool CanFocus { get; set; } Property Value Type Description System.Boolean Overrides View.CanFocus CurrentColumn Gets the cursor column. Declaration public int CurrentColumn { get; } Property Value Type Description System.Int32 The cursor column. CurrentRow Gets the current cursor row. Declaration public int CurrentRow { get; } Property Value Type Description System.Int32 DesiredCursorVisibility Get / Set the wished cursor when the field is focused Declaration public CursorVisibility DesiredCursorVisibility { get; set; } Property Value Type Description CursorVisibility Frame Declaration public override Rect Frame { get; set; } Property Value Type Description Rect Overrides View.Frame LeftColumn Gets or sets the left column. Declaration public int LeftColumn { get; set; } Property Value Type Description System.Int32 Lines Gets the number of lines. Declaration public int Lines { get; } Property Value Type Description System.Int32 Maxlength Gets the maximum visible length line. Declaration public int Maxlength { get; } Property Value Type Description System.Int32 ReadOnly Gets or sets whether the TextView is in read-only mode or not Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean Boolean value(Default false) Text Sets or gets the text in the TextView . Declaration public override ustring Text { get; set; } Property Value Type Description NStack.ustring Overrides View.Text Remarks TopRow Gets or sets the top row. Declaration public int TopRow { get; set; } Property Value Type Description System.Int32 Methods CloseFile() Closes the contents of the stream into the TextView . Declaration public bool CloseFile() Returns Type Description System.Boolean true , if stream was closed, false otherwise. LoadFile(String) Loads the contents of the file into the TextView . Declaration public bool LoadFile(string path) Parameters Type Name Description System.String path Path to the file to load. Returns Type Description System.Boolean true , if file was loaded, false otherwise. LoadStream(Stream) Loads the contents of the stream into the TextView . Declaration public void LoadStream(Stream stream) Parameters Type Name Description System.IO.Stream stream Stream to load the contents from. MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent ev) Parameters Type Name Description MouseEvent ev Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) MoveEnd() Will scroll the TextView to the last line and position the cursor there. Declaration public void MoveEnd() MoveHome() Will scroll the TextView to the first line and position the cursor there. Declaration public void MoveHome() OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides View.OnEnter(View) PositionCursor() Positions the cursor on the current row and column Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) ScrollTo(Int32, Boolean) Will scroll the TextView to display the specified row at the top if isRow is true or will scroll the TextView to display the specified column at the left if isRow is false. Declaration public void ScrollTo(int idx, bool isRow = true) Parameters Type Name Description System.Int32 idx Row that should be displayed at the top or Column that should be displayed at the left, if the value is negative it will be reset to zero System.Boolean isRow If true (default) the idx is a row, column otherwise. Events TextChanged Raised when the Text of the TextView changes. Declaration public event Action TextChanged Event Type Type Description System.Action Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.TimeField.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TimeField.html",
    "title": "Class TimeField",
    "keywords": "Class TimeField Time editing View Inheritance System.Object Responder View TextField TimeField Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members TextField.Used TextField.ReadOnly TextField.TextChanging TextField.TextChanged TextField.OnLeave(View) TextField.Frame TextField.Text TextField.Secret TextField.CursorPosition TextField.PositionCursor() TextField.Redraw(Rect) TextField.CanFocus TextField.SelectedStart TextField.SelectedLength TextField.SelectedText TextField.ClearAllSelection() TextField.Copy() TextField.Cut() TextField.Paste() TextField.OnTextChanging(ustring) TextField.DesiredCursorVisibility TextField.OnEnter(View) View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TimeField : TextField, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The TimeField View provides time editing functionality with mouse support. Constructors TimeField() Initializes a new instance of TimeField using Computed positioning. Declaration public TimeField() TimeField(Int32, Int32, TimeSpan, Boolean) Initializes a new instance of TimeField using Absolute positioning. Declaration public TimeField(int x, int y, TimeSpan time, bool isShort = false) Parameters Type Name Description System.Int32 x The x coordinate. System.Int32 y The y coordinate. System.TimeSpan time Initial time. System.Boolean isShort If true, the seconds are hidden. Sets the IsShortFormat property. TimeField(TimeSpan) Initializes a new instance of TimeField using Computed positioning. Declaration public TimeField(TimeSpan time) Parameters Type Name Description System.TimeSpan time Initial time Properties IsShortFormat Get or sets whether TimeField uses the short or long time format. Declaration public bool IsShortFormat { get; set; } Property Value Type Description System.Boolean Time Gets or sets the time of the TimeField . Declaration public TimeSpan Time { get; set; } Property Value Type Description System.TimeSpan Remarks Methods MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent ev) Parameters Type Name Description MouseEvent ev Returns Type Description System.Boolean Overrides TextField.MouseEvent(MouseEvent) OnTimeChanged(DateTimeEventArgs<TimeSpan>) Event firing method that invokes the TimeChanged event. Declaration public virtual void OnTimeChanged(DateTimeEventArgs<TimeSpan> args) Parameters Type Name Description DateTimeEventArgs < System.TimeSpan > args The event arguments ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent kb) Parameters Type Name Description KeyEvent kb Returns Type Description System.Boolean Overrides TextField.ProcessKey(KeyEvent) Events TimeChanged TimeChanged event, raised when the Date has changed. Declaration public event Action<DateTimeEventArgs<TimeSpan>> TimeChanged Event Type Type Description System.Action < DateTimeEventArgs < System.TimeSpan >> Remarks This event is raised when the Time changes. Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.Toplevel.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Toplevel.html",
    "title": "Class Toplevel",
    "keywords": "Class Toplevel Toplevel views can be modally executed. Inheritance System.Object Responder View Toplevel Window Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.MouseEvent(MouseEvent) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Toplevel : View, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks Toplevels can be modally executing views, started by calling Run(Toplevel, Func<Exception, Boolean>) . They return control to the caller when RequestStop() has been called (which sets the Running property to false). A Toplevel is created when an application initialzies Terminal.Gui by callling Init(ConsoleDriver, IMainLoopDriver) . The application Toplevel can be accessed via Top . Additional Toplevels can be created and run (e.g. Dialog s. To run a Toplevel, create the Toplevel and call Run(Toplevel, Func<Exception, Boolean>) . Toplevels can also opt-in to more sophisticated initialization by implementing System.ComponentModel.ISupportInitialize . When they do so, the System.ComponentModel.ISupportInitialize.BeginInit() and System.ComponentModel.ISupportInitialize.EndInit() methods will be called before running the view. If first-run-only initialization is preferred, the System.ComponentModel.ISupportInitializeNotification can be implemented too, in which case the System.ComponentModel.ISupportInitialize methods will only be called if System.ComponentModel.ISupportInitializeNotification.IsInitialized is false . This allows proper View inheritance hierarchies to override base class layout code optimally by doing so only on first run, instead of on every run. Constructors Toplevel() Initializes a new instance of the Toplevel class with Computed layout, defaulting to full screen. Declaration public Toplevel() Toplevel(Rect) Initializes a new instance of the Toplevel class with the specified absolute layout. Declaration public Toplevel(Rect frame) Parameters Type Name Description Rect frame A superview-relative rectangle specifying the location and size for the new Toplevel Properties CanFocus Gets or sets a value indicating whether this Toplevel can focus. Declaration public override bool CanFocus { get; } Property Value Type Description System.Boolean true if can focus; otherwise, false . Overrides View.CanFocus MenuBar Gets or sets the menu for this Toplevel Declaration public MenuBar MenuBar { get; set; } Property Value Type Description MenuBar Modal Determines whether the Toplevel is modal or not. Causes ProcessKey(KeyEvent) to propagate keys upwards by default unless set to true . Declaration public bool Modal { get; set; } Property Value Type Description System.Boolean Running Gets or sets whether the MainLoop for this Toplevel is running or not. Declaration public bool Running { get; set; } Property Value Type Description System.Boolean Remarks Setting this property directly is discouraged. Use RequestStop() instead. StatusBar Gets or sets the status bar for this Toplevel Declaration public StatusBar StatusBar { get; set; } Property Value Type Description StatusBar Methods Add(View) Declaration public override void Add(View view) Parameters Type Name Description View view Overrides View.Add(View) Create() Convenience factory method that creates a new Toplevel with the current terminal dimensions. Declaration public static Toplevel Create() Returns Type Description Toplevel The create. OnKeyDown(KeyEvent) Declaration public override bool OnKeyDown(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.OnKeyDown(KeyEvent) OnKeyUp(KeyEvent) Declaration public override bool OnKeyUp(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.OnKeyUp(KeyEvent) ProcessColdKey(KeyEvent) Declaration public override bool ProcessColdKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.ProcessColdKey(KeyEvent) ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) Remove(View) Declaration public override void Remove(View view) Parameters Type Name Description View view Overrides View.Remove(View) RemoveAll() Declaration public override void RemoveAll() Overrides View.RemoveAll() WillPresent() Invoked by Begin(Toplevel) as part of the Run(Toplevel, Func<Exception, Boolean>) after the views have been laid out, and before the views are drawn for the first time. Declaration public virtual void WillPresent() Events Loaded Fired once the Toplevel's Application.RunState has begin loaded. A Loaded event handler is a good place to finalize initialization before calling ` RunLoop(Application.RunState, Boolean) . Declaration public event Action Loaded Event Type Type Description System.Action Ready Fired once the Toplevel's MainLoop has started it's first iteration. Subscribe to this event to perform tasks when the Toplevel has been laid out and focus has been set. changes. A Ready event handler is a good place to finalize initialization after calling ` Run(Func<Exception, Boolean>) (topLevel)`. Declaration public event Action Ready Event Type Type Description System.Action Unloaded Fired once the Toplevel's Application.RunState has begin unloaded. A Unloaded event handler is a good place to disposing after calling ` End(Application.RunState) . Declaration public event Action Unloaded Event Type Type Description System.Action Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.TreeBuilder-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TreeBuilder-1.html",
    "title": "Class TreeBuilder<T>",
    "keywords": "Class TreeBuilder<T> Abstract implementation of ITreeBuilder<T> . Inheritance System.Object TreeBuilder<T> DelegateTreeBuilder<T> TreeNodeBuilder Implements ITreeBuilder <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public abstract class TreeBuilder<T> : ITreeBuilder<T> Type Parameters Name Description T Constructors TreeBuilder(Boolean) Constructs base and initializes SupportsCanExpand Declaration public TreeBuilder(bool supportsCanExpand) Parameters Type Name Description System.Boolean supportsCanExpand Pass true if you intend to implement CanExpand(T) otherwise false Properties SupportsCanExpand Declaration public bool SupportsCanExpand { get; protected set; } Property Value Type Description System.Boolean Methods CanExpand(T) Override this method to return a rapid answer as to whether GetChildren(T) returns results. If you are implementing this method ensure you passed true in base constructor or set SupportsCanExpand Declaration public virtual bool CanExpand(T toExpand) Parameters Type Name Description T toExpand Returns Type Description System.Boolean GetChildren(T) Declaration public abstract IEnumerable<T> GetChildren(T forObject) Parameters Type Name Description T forObject Returns Type Description System.Collections.Generic.IEnumerable <T> Implements ITreeBuilder<T>"
  },
  "api/Terminal.Gui/Terminal.Gui.TreeNode.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TreeNode.html",
    "title": "Class TreeNode",
    "keywords": "Class TreeNode Simple class for representing nodes, use with regular (non generic) TreeView . Inheritance System.Object TreeNode Implements ITreeNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TreeNode : ITreeNode Constructors TreeNode() Initialises a new instance with no Text Declaration public TreeNode() TreeNode(String) Initialises a new instance and sets starting Text Declaration public TreeNode(string text) Parameters Type Name Description System.String text Properties Children Children of the current node Declaration public virtual IList<ITreeNode> Children { get; set; } Property Value Type Description System.Collections.Generic.IList < ITreeNode > Tag Optionally allows you to store some custom data/class here. Declaration public object Tag { get; set; } Property Value Type Description System.Object Text Text to display in tree node for current entry Declaration public virtual string Text { get; set; } Property Value Type Description System.String Methods ToString() returns Text Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements ITreeNode"
  },
  "api/Terminal.Gui/Terminal.Gui.TreeNodeBuilder.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TreeNodeBuilder.html",
    "title": "Class TreeNodeBuilder",
    "keywords": "Class TreeNodeBuilder ITreeBuilder<T> implementation for ITreeNode objects Inheritance System.Object TreeBuilder < ITreeNode > TreeNodeBuilder Implements ITreeBuilder < ITreeNode > Inherited Members TreeBuilder<ITreeNode>.SupportsCanExpand TreeBuilder<ITreeNode>.CanExpand(ITreeNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TreeNodeBuilder : TreeBuilder<ITreeNode>, ITreeBuilder<ITreeNode> Constructors TreeNodeBuilder() Initialises a new instance of builder for any model objects of Type ITreeNode Declaration public TreeNodeBuilder() Methods GetChildren(ITreeNode) Returns Children from model Declaration public override IEnumerable<ITreeNode> GetChildren(ITreeNode model) Parameters Type Name Description ITreeNode model Returns Type Description System.Collections.Generic.IEnumerable < ITreeNode > Overrides Terminal.Gui.TreeBuilder<Terminal.Gui.ITreeNode>.GetChildren(Terminal.Gui.ITreeNode) Implements ITreeBuilder<T>"
  },
  "api/Terminal.Gui/Terminal.Gui.TreeStyle.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TreeStyle.html",
    "title": "Class TreeStyle",
    "keywords": "Class TreeStyle Defines rendering options that affect how the tree is displayed Inheritance System.Object TreeStyle Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TreeStyle Properties CollapseableSymbol Symbol to use for branch nodes that can be collapsed (are currently expanded). Defaults to '-'. Set to null to hide Declaration public Rune? CollapseableSymbol { get; set; } Property Value Type Description System.Nullable < System.Rune > ColorExpandSymbol Set to true to highlight expand/collapse symbols in hot key color Declaration public bool ColorExpandSymbol { get; set; } Property Value Type Description System.Boolean ExpandableSymbol Symbol to use for branch nodes that can be expanded to indicate this to the user. Defaults to '+'. Set to null to hide Declaration public Rune? ExpandableSymbol { get; set; } Property Value Type Description System.Nullable < System.Rune > InvertExpandSymbolColors Invert console colours used to render the expand symbol Declaration public bool InvertExpandSymbolColors { get; set; } Property Value Type Description System.Boolean LeaveLastRow True to leave the last row of the control free for overwritting (e.g. by a scrollbar) When True scrolling will be triggered on the second last row of the control rather than the last. Declaration public bool LeaveLastRow { get; set; } Property Value Type Description System.Boolean ShowBranchLines True to render vertical lines under expanded nodes to show which node belongs to which parent. False to use only whitespace Declaration public bool ShowBranchLines { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Terminal.Gui/Terminal.Gui.TreeView.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TreeView.html",
    "title": "Class TreeView",
    "keywords": "Class TreeView Convenience implementation of generic TreeView<T> for any tree were all nodes implement ITreeNode . See TreeView Deep Dive for more information . Inheritance System.Object Responder View TreeView < ITreeNode > TreeView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize ITreeView Inherited Members TreeView<ITreeNode>.TreeBuilder TreeView<ITreeNode>.Style TreeView<ITreeNode>.MultiSelect TreeView<ITreeNode>.AllowLetterBasedNavigation TreeView<ITreeNode>.SelectedObject TreeView<ITreeNode>.ObjectActivated TreeView<ITreeNode>.ObjectActivationKey TreeView<ITreeNode>.ObjectActivationButton TreeView<ITreeNode>.NoBuilderError TreeView<ITreeNode>.SelectionChanged TreeView<ITreeNode>.Objects TreeView<ITreeNode>.ScrollOffsetVertical TreeView<ITreeNode>.ScrollOffsetHorizontal TreeView<ITreeNode>.ContentHeight TreeView<ITreeNode>.AspectGetter TreeView<ITreeNode>.AddObject(ITreeNode) TreeView<ITreeNode>.ClearObjects() TreeView<ITreeNode>.Remove(ITreeNode) TreeView<ITreeNode>.AddObjects(IEnumerable<ITreeNode>) TreeView<ITreeNode>.RefreshObject(ITreeNode, Boolean) TreeView<ITreeNode>.RebuildTree() TreeView<ITreeNode>.GetChildren(ITreeNode) TreeView<ITreeNode>.GetParent(ITreeNode) TreeView<ITreeNode>.Redraw(Rect) TreeView<ITreeNode>.GetScrollOffsetOf(ITreeNode) TreeView<ITreeNode>.GetContentWidth(Boolean) TreeView<ITreeNode>.ProcessKey(KeyEvent) TreeView<ITreeNode>.OnObjectActivated(ObjectActivatedEventArgs<ITreeNode>) TreeView<ITreeNode>.MouseEvent(MouseEvent) TreeView<ITreeNode>.PositionCursor() TreeView<ITreeNode>.CursorLeft(Boolean) TreeView<ITreeNode>.GoToFirst() TreeView<ITreeNode>.GoToEnd() TreeView<ITreeNode>.GoTo(ITreeNode) TreeView<ITreeNode>.AdjustSelection(Int32, Boolean) TreeView<ITreeNode>.AdjustSelectionToBranchStart() TreeView<ITreeNode>.AdjustSelectionToBranchEnd() TreeView<ITreeNode>.EnsureVisible(ITreeNode) TreeView<ITreeNode>.Expand(ITreeNode) TreeView<ITreeNode>.ExpandAll(ITreeNode) TreeView<ITreeNode>.ExpandAll() TreeView<ITreeNode>.CanExpand(ITreeNode) TreeView<ITreeNode>.IsExpanded(ITreeNode) TreeView<ITreeNode>.Collapse(ITreeNode) TreeView<ITreeNode>.CollapseAll(ITreeNode) TreeView<ITreeNode>.CollapseAll() TreeView<ITreeNode>.CollapseImpl(ITreeNode, Boolean) TreeView<ITreeNode>.InvalidateLineMap() TreeView<ITreeNode>.IsSelected(ITreeNode) TreeView<ITreeNode>.GetAllSelectedObjects() TreeView<ITreeNode>.SelectAll() TreeView<ITreeNode>.OnSelectionChanged(SelectionChangedEventArgs<ITreeNode>) View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TreeView : TreeView<ITreeNode>, IDisposable, ISupportInitializeNotification, ISupportInitialize, ITreeView Constructors TreeView() Creates a new instance of the tree control with absolute positioning and initialises TreeBuilder<T> with default ITreeNode based builder Declaration public TreeView() Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize ITreeView"
  },
  "api/Terminal.Gui/Terminal.Gui.TreeView-1.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.TreeView-1.html",
    "title": "Class TreeView<T>",
    "keywords": "Class TreeView<T> Hierarchical tree view with expandable branches. Branch objects are dynamically determined when expanded using a user defined ITreeBuilder<T> See TreeView Deep Dive for more information . Inheritance System.Object Responder View TreeView<T> TreeView Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize ITreeView Inherited Members View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View) View.Add(View[]) View.RemoveAll() View.Remove(View) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.Text View.AutoSize View.TextAlignment View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class TreeView<T> : View, IDisposable, ISupportInitializeNotification, ISupportInitialize, ITreeView where T : class Type Parameters Name Description T Constructors TreeView() Creates a new tree view with absolute positioning. Use AddObjects(IEnumerable<T>) to set set root objects for the tree. Children will not be rendered until you set TreeBuilder Declaration public TreeView() TreeView(ITreeBuilder<T>) Initialises TreeBuilder .Creates a new tree view with absolute positioning. Use AddObjects(IEnumerable<T>) to set set root objects for the tree. Declaration public TreeView(ITreeBuilder<T> builder) Parameters Type Name Description ITreeBuilder <T> builder Fields NoBuilderError Error message to display when the control is not properly initialized at draw time (nodes added but no tree builder set) Declaration public static ustring NoBuilderError Field Value Type Description NStack.ustring Properties AllowLetterBasedNavigation True makes a letter key press navigate to the next visible branch that begins with that letter/digit Declaration public bool AllowLetterBasedNavigation { get; set; } Property Value Type Description System.Boolean AspectGetter Returns the string representation of model objects hosted in the tree. Default implementation is to call System.Object.ToString() Declaration public AspectGetterDelegate<T> AspectGetter { get; set; } Property Value Type Description AspectGetterDelegate <T> ContentHeight The current number of rows in the tree (ignoring the controls bounds) Declaration public int ContentHeight { get; } Property Value Type Description System.Int32 MultiSelect True to allow multiple objects to be selected at once Declaration public bool MultiSelect { get; set; } Property Value Type Description System.Boolean ObjectActivationButton Mouse event to trigger ObjectActivated . Defaults to double click ( Button1DoubleClicked ). Set to null to disable this feature. Declaration public MouseFlags? ObjectActivationButton { get; set; } Property Value Type Description System.Nullable < MouseFlags > ObjectActivationKey Key which when pressed triggers ObjectActivated . Defaults to Enter Declaration public Key ObjectActivationKey { get; set; } Property Value Type Description Key Objects The root objects in the tree, note that this collection is of root objects only Declaration public IEnumerable<T> Objects { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> ScrollOffsetHorizontal The amount of tree view that has been scrolled to the right (horizontally) Declaration public int ScrollOffsetHorizontal { get; set; } Property Value Type Description System.Int32 Remarks Setting a value of less than 0 will result in a offset of 0. To see changes in the UI call SetNeedsDisplay() ScrollOffsetVertical The amount of tree view that has been scrolled off the top of the screen (by the user scrolling down) Declaration public int ScrollOffsetVertical { get; set; } Property Value Type Description System.Int32 Remarks Setting a value of less than 0 will result in a offset of 0. To see changes in the UI call SetNeedsDisplay() SelectedObject The currently selected object in the tree. When MultiSelect is true this is the object at which the cursor is at Declaration public T SelectedObject { get; set; } Property Value Type Description T Style Contains options for changing how the tree is rendered Declaration public TreeStyle Style { get; set; } Property Value Type Description TreeStyle TreeBuilder Determines how sub branches of the tree are dynamically built at runtime as the user expands root nodes Declaration public ITreeBuilder<T> TreeBuilder { get; set; } Property Value Type Description ITreeBuilder <T> Methods AddObject(T) Adds a new root level object unless it is already a root of the tree Declaration public void AddObject(T o) Parameters Type Name Description T o AddObjects(IEnumerable<T>) Adds many new root level objects. Objects that are already root objects are ignored Declaration public void AddObjects(IEnumerable<T> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection Objects to add as new root level objects AdjustSelection(Int32, Boolean) The number of screen lines to move the currently selected object by. Supports negative offset . Each branch occupies 1 line on screen Declaration public void AdjustSelection(int offset, bool expandSelection = false) Parameters Type Name Description System.Int32 offset Positive to move the selection down the screen, negative to move it up System.Boolean expandSelection True to expand the selection (assuming MultiSelect is enabled). False to replace Remarks If nothing is currently selected or the selected object is no longer in the tree then the first object in the tree is selected instead AdjustSelectionToBranchEnd() Moves the selection to the last child in the currently selected level Declaration public void AdjustSelectionToBranchEnd() AdjustSelectionToBranchStart() Moves the selection to the first child in the currently selected level Declaration public void AdjustSelectionToBranchStart() CanExpand(T) Returns true if the given object o is exposed in the tree and can be expanded otherwise false Declaration public bool CanExpand(T o) Parameters Type Name Description T o Returns Type Description System.Boolean ClearObjects() Removes all objects from the tree and clears SelectedObject Declaration public void ClearObjects() Collapse(T) Collapses the supplied object if it is currently expanded Declaration public void Collapse(T toCollapse) Parameters Type Name Description T toCollapse The object to collapse CollapseAll() Collapses all root nodes in the tree Declaration public void CollapseAll() CollapseAll(T) Collapses the supplied object if it is currently expanded. Also collapses all children branches (this will only become apparent when/if the user expands it again) Declaration public void CollapseAll(T toCollapse) Parameters Type Name Description T toCollapse The object to collapse CollapseImpl(T, Boolean) Implementation of Collapse(T) and CollapseAll(T) . Performs operation and updates selection if disapeared Declaration protected void CollapseImpl(T toCollapse, bool all) Parameters Type Name Description T toCollapse System.Boolean all CursorLeft(Boolean) Determines systems behaviour when the left arrow key is pressed. Default behaviour is to collapse the current tree node if possible otherwise changes selection to current branches parent Declaration protected virtual void CursorLeft(bool ctrl) Parameters Type Name Description System.Boolean ctrl EnsureVisible(T) Adjusts the ScrollOffsetVertical to ensure the given model is visible. Has no effect if already visible Declaration public void EnsureVisible(T model) Parameters Type Name Description T model Expand(T) Expands the supplied object if it is contained in the tree (either as a root object or as an exposed branch object) Declaration public void Expand(T toExpand) Parameters Type Name Description T toExpand The object to expand ExpandAll() Fully expands all nodes in the tree, if the tree is very big and built dynamically this may take a while (e.g. for file system) Declaration public void ExpandAll() ExpandAll(T) Expands the supplied object and all child objects Declaration public void ExpandAll(T toExpand) Parameters Type Name Description T toExpand The object to expand GetAllSelectedObjects() Returns SelectedObject (if not null) and all multi selected objects if MultiSelect is true Declaration public IEnumerable<T> GetAllSelectedObjects() Returns Type Description System.Collections.Generic.IEnumerable <T> GetChildren(T) Returns the currently expanded children of the passed object. Returns an empty collection if the branch is not exposed or not expanded Declaration public IEnumerable<T> GetChildren(T o) Parameters Type Name Description T o An object in the tree Returns Type Description System.Collections.Generic.IEnumerable <T> GetContentWidth(Boolean) Returns the maximum width line in the tree including prefix and expansion symbols Declaration public int GetContentWidth(bool visible) Parameters Type Name Description System.Boolean visible True to consider only rows currently visible (based on window bounds and ScrollOffsetVertical . False to calculate the width of every exposed branch in the tree Returns Type Description System.Int32 GetParent(T) Returns the parent object of o in the tree. Returns null if the object is not exposed in the tree Declaration public T GetParent(T o) Parameters Type Name Description T o An object in the tree Returns Type Description T GetScrollOffsetOf(T) Returns the index of the object o if it is currently exposed (it's parent(s) have been expanded). This can be used with ScrollOffsetVertical and SetNeedsDisplay() to scroll to a specific object Declaration public int GetScrollOffsetOf(T o) Parameters Type Name Description T o An object that appears in your tree and is currently exposed Returns Type Description System.Int32 The index the object was found at or -1 if it is not currently revealed or not in the tree at all Remarks Uses the Equals method and returns the first index at which the object is found or -1 if it is not found GoTo(T) Changes the SelectedObject to toSelect and scrolls to ensure it is visible. Has no effect if toSelect is not exposed in the tree (e.g. its parents are collapsed) Declaration public void GoTo(T toSelect) Parameters Type Name Description T toSelect GoToEnd() Changes the SelectedObject to the last object in the tree and scrolls so that it is visible Declaration public void GoToEnd() GoToFirst() Changes the SelectedObject to the first root object and resets the ScrollOffsetVertical to 0 Declaration public void GoToFirst() InvalidateLineMap() Clears any cached results of Terminal.Gui.TreeView`1.BuildLineMap Declaration protected void InvalidateLineMap() IsExpanded(T) Returns true if the given object o is exposed in the tree and expanded otherwise false Declaration public bool IsExpanded(T o) Parameters Type Name Description T o Returns Type Description System.Boolean IsSelected(T) Returns true if the model is either the SelectedObject or part of a MultiSelect Declaration public bool IsSelected(T model) Parameters Type Name Description T model Returns Type Description System.Boolean MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent me) Parameters Type Name Description MouseEvent me Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) OnObjectActivated(ObjectActivatedEventArgs<T>) Raises the ObjectActivated event Declaration protected virtual void OnObjectActivated(ObjectActivatedEventArgs<T> e) Parameters Type Name Description ObjectActivatedEventArgs <T> e OnSelectionChanged(SelectionChangedEventArgs<T>) Raises the SelectionChanged event Declaration protected virtual void OnSelectionChanged(SelectionChangedEventArgs<T> e) Parameters Type Name Description SelectionChangedEventArgs <T> e PositionCursor() Positions the cursor at the start of the selected objects line (if visible) Declaration public override void PositionCursor() Overrides View.PositionCursor() ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides View.ProcessKey(KeyEvent) RebuildTree() Rebuilds the tree structure for all exposed objects starting with the root objects. Call this method when you know there are changes to the tree but don't know which objects have changed (otherwise use RefreshObject(T, Boolean) ) Declaration public void RebuildTree() Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides View.Redraw(Rect) RefreshObject(T, Boolean) Refreshes the state of the object o in the tree. This will recompute children, string representation etc Declaration public void RefreshObject(T o, bool startAtTop = false) Parameters Type Name Description T o System.Boolean startAtTop True to also refresh all ancestors of the objects branch (starting with the root). False to refresh only the passed node Remarks This has no effect if the object is not exposed in the tree. Remove(T) Removes the given root object from the tree Declaration public void Remove(T o) Parameters Type Name Description T o Remarks If o is the currently SelectedObject then the selection is cleared SelectAll() Selects all objects in the tree when MultiSelect is enabled otherwise does nothing Declaration public void SelectAll() Events ObjectActivated This event is raised when an object is activated e.g. by double clicking or pressing ObjectActivationKey Declaration public event Action<ObjectActivatedEventArgs<T>> ObjectActivated Event Type Type Description System.Action < ObjectActivatedEventArgs <T>> SelectionChanged Called when the SelectedObject changes Declaration public event EventHandler<SelectionChangedEventArgs<T>> SelectionChanged Event Type Type Description System.EventHandler < SelectionChangedEventArgs <T>> Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize ITreeView"
  },
  "api/Terminal.Gui/Terminal.Gui.View.FocusEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.View.FocusEventArgs.html",
    "title": "Class View.FocusEventArgs",
    "keywords": "Class View.FocusEventArgs Defines the event arguments for Terminal.Gui.View.SetFocus(Terminal.Gui.View) Inheritance System.Object System.EventArgs View.FocusEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class FocusEventArgs : EventArgs Constructors FocusEventArgs(View) Constructs. Declaration public FocusEventArgs(View view) Parameters Type Name Description View view The view that gets or loses focus. Properties Handled Indicates if the current focus event has already been processed and the driver should stop notifying any other event subscriber. Its important to set this value to true specially when updating any View's layout from inside the subscriber method. Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean View Indicates the current view that gets or loses focus. Declaration public View View { get; set; } Property Value Type Description View"
  },
  "api/Terminal.Gui/Terminal.Gui.View.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.View.html",
    "title": "Class View",
    "keywords": "Class View View is the base class for all views on the screen and represents a visible element that can render itself and contains zero or more nested views. Inheritance System.Object Responder View Button CheckBox ComboBox FrameView HexView Label ListView MenuBar ProgressBar RadioGroup ScrollBarView ScrollView StatusBar TableView TextField TextView Toplevel TreeView<T> Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members Responder.MouseEvent(MouseEvent) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class View : Responder, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The View defines the base functionality for user interface elements in Terminal.Gui. Views can contain one or more subviews, can respond to user input and render themselves on the screen. Views supports two layout styles: Absolute or Computed. The choice as to which layout style is used by the View is determined when the View is initizlied. To create a View using Absolute layout, call a constructor that takes a Rect parameter to specify the absolute position and size (the View. Frame )/. To create a View using Computed layout use a constructor that does not take a Rect parametr and set the X, Y, Width and Height properties on the view. Both approaches use coordinates that are relative to the container they are being added to. To switch between Absolute and Computed layout, use the LayoutStyle property. Computed layout is more flexible and supports dynamic console apps where controls adjust layout as the terminal resizes or other Views change size or position. The X, Y, Width and Height properties are Dim and Pos objects that dynamically update the position of a view. The X and Y properties are of type Pos and you can use either absolute positions, percentages or anchor points. The Width and Height properties are of type Dim and can use absolute position, percentages and anchors. These are useful as they will take care of repositioning views when view's frames are resized or if the terminal size changes. Absolute layout requires specifying coordinates and sizes of Views explicitly, and the View will typcialy stay in a fixed position and size. To change the position and size use the Frame property. Subviews (child views) can be added to a View by calling the Add(View) method. The container of a View can be accessed with the SuperView property. To flag a region of the View's Bounds to be redrawn call SetNeedsDisplay(Rect) . To flag the entire view for redraw call SetNeedsDisplay() . Views have a ColorScheme property that defines the default colors that subviews should use for rendering. This ensures that the views fit in the context where they are being used, and allows for themes to be plugged in. For example, the default colors for windows and toplevels uses a blue background, while it uses a white background for dialog boxes and a red background for errors. Subclasses should not rely on ColorScheme being set at construction time. If a ColorScheme is not set on a view, the view will inherit the value from its SuperView and the value might only be valid once a view has been added to a SuperView. By using ColorScheme applications will work both in color as well as black and white displays. Views that are focusable should implement the PositionCursor() to make sure that the cursor is placed in a location that makes sense. Unix terminals do not have a way of hiding the cursor, so it can be distracting to have the cursor left at the last focused view. So views should make sure that they place the cursor in a visually sensible place. The LayoutSubviews() method is invoked when the size or layout of a view has changed. The default processing system will keep the size and dimensions for views that use the Absolute , and will recompute the frames for the vies that use Computed . Constructors View() Initializes a new instance of View using Computed layout. Declaration public View() Remarks Use X , Y , Width , and Height properties to dynamically control the size and location of the view. The Label will be created using Computed coordinates. The initial size ( Frame will be adjusted to fit the contents of Text , including newlines ('\\n') for multiple lines. If Height is greater than one, word wrapping is provided. This constructor intitalize a View with a LayoutStyle of Computed . Use X , Y , Width , and Height properties to dynamically control the size and location of the view. View(ustring) Initializes a new instance of View using Computed layout. Declaration public View(ustring text) Parameters Type Name Description NStack.ustring text text to initialize the Text property with. Remarks The View will be created using Computed coordinates with the given string. The initial size ( Frame will be adjusted to fit the contents of Text , including newlines ('\\n') for multiple lines. If Height is greater than one, word wrapping is provided. View(Int32, Int32, ustring) Initializes a new instance of View using Absolute layout. Declaration public View(int x, int y, ustring text) Parameters Type Name Description System.Int32 x column to locate the Label. System.Int32 y row to locate the Label. NStack.ustring text text to initialize the Text property with. Remarks The View will be created at the given coordinates with the given string. The size ( Frame will be adjusted to fit the contents of Text , including newlines ('\\n') for multiple lines. No line wrapping is provided. View(Rect) Initializes a new instance of a Absolute View class with the absolute dimensions specified in the frame parameter. Declaration public View(Rect frame) Parameters Type Name Description Rect frame The region covered by this view. Remarks This constructor intitalize a View with a LayoutStyle of Absolute . Use View() to initialize a View with LayoutStyle of Computed View(Rect, ustring) Initializes a new instance of View using Absolute layout. Declaration public View(Rect rect, ustring text) Parameters Type Name Description Rect rect Location. NStack.ustring text text to initialize the Text property with. Remarks The View will be created at the given coordinates with the given string. The initial size ( Frame will be adjusted to fit the contents of Text , including newlines ('\\n') for multiple lines. If rect.Height is greater than one, word wrapping is provided. Properties AutoSize Used by Text to resize the view's Bounds with the Size . Setting AutoSize to true only work if the Width and Height are null or Absolute values and doesn't work with Computed layout, to avoid breaking the Pos and Dim settings. Declaration public virtual bool AutoSize { get; set; } Property Value Type Description System.Boolean Bounds The bounds represent the View-relative rectangle used for this view; the area inside of the view. Declaration public Rect Bounds { get; set; } Property Value Type Description Rect The bounds. Remarks Updates to the Bounds update the Frame , and has the same side effects as updating the Frame . Because Bounds coordinates are relative to the upper-left corner of the View , the coordinates of the upper-left corner of the rectangle returned by this property are (0,0). Use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control. CanFocus Declaration public override bool CanFocus { get; set; } Property Value Type Description System.Boolean Overrides Responder.CanFocus ColorScheme The color scheme for this view, if it is not defined, it returns the SuperView 's color scheme. Declaration public ColorScheme ColorScheme { get; set; } Property Value Type Description ColorScheme Data Gets or sets arbitrary data for the view. Declaration public object Data { get; set; } Property Value Type Description System.Object Remarks This property is not used internally. Driver Points to the current driver in use by the view, it is a convenience property for simplifying the development of new views. Declaration public static ConsoleDriver Driver { get; } Property Value Type Description ConsoleDriver Focused Returns the currently focused view inside this view, or null if nothing is focused. Declaration public View Focused { get; } Property Value Type Description View The focused. Frame Gets or sets the frame for the view. The frame is relative to the view's container ( SuperView ). Declaration public virtual Rect Frame { get; set; } Property Value Type Description Rect The frame. Remarks Change the Frame when using the Absolute layout style to move or resize views. Altering the Frame of a view will trigger the redrawing of the view as well as the redrawing of the affected regions of the SuperView . HasFocus Declaration public override bool HasFocus { get; } Property Value Type Description System.Boolean Overrides Responder.HasFocus Height Gets or sets the height of the view. Only used whe LayoutStyle is Computed . Declaration public Dim Height { get; set; } Property Value Type Description Dim The height. HotKey Gets or sets the HotKey defined for this view. A user pressing HotKey on the keyboard while this view has focus will cause the Clicked event to fire. Declaration public Key HotKey { get; set; } Property Value Type Description Key HotKeySpecifier Gets or sets the specifier character for the hotkey (e.g. '_'). Set to '\\xffff' to disable hotkey support for this View instance. The default is '\\xffff'. Declaration public Rune HotKeySpecifier { get; set; } Property Value Type Description System.Rune Id Gets or sets an identifier for the view; Declaration public ustring Id { get; set; } Property Value Type Description NStack.ustring The identifier. Remarks The id should be unique across all Views that share a SuperView. IsCurrentTop Returns a value indicating if this View is currently on Top (Active) Declaration public bool IsCurrentTop { get; } Property Value Type Description System.Boolean IsInitialized Get or sets if the View was already initialized. This derived from System.ComponentModel.ISupportInitializeNotification to allow notify all the views that are being initialized. Declaration public bool IsInitialized { get; set; } Property Value Type Description System.Boolean LayoutStyle Controls how the View's Frame is computed during the LayoutSubviews method, if the style is set to Absolute , LayoutSubviews does not change the Frame . If the style is Computed the Frame is updated using the X , Y , Width , and Height properties. Declaration public LayoutStyle LayoutStyle { get; set; } Property Value Type Description LayoutStyle The layout style. MostFocused Returns the most focused view in the chain of subviews (the leaf view that has the focus). Declaration public View MostFocused { get; } Property Value Type Description View The most focused. Shortcut This is the global setting that can be used as a global shortcut to invoke an action if provided. Declaration public Key Shortcut { get; set; } Property Value Type Description Key ShortcutAction The action to run if the Shortcut is defined. Declaration public virtual Action ShortcutAction { get; set; } Property Value Type Description System.Action ShortcutTag The keystroke combination used in the Shortcut as string. Declaration public ustring ShortcutTag { get; } Property Value Type Description NStack.ustring Subviews This returns a list of the subviews contained by this view. Declaration public IList<View> Subviews { get; } Property Value Type Description System.Collections.Generic.IList < View > The subviews. SuperView Returns the container for this view, or null if this view has not been added to a container. Declaration public View SuperView { get; } Property Value Type Description View The super view. TabIndex Indicates the index of the current View from the TabIndexes list. Declaration public int TabIndex { get; set; } Property Value Type Description System.Int32 TabIndexes This returns a tab index list of the subviews contained by this view. Declaration public IList<View> TabIndexes { get; } Property Value Type Description System.Collections.Generic.IList < View > The tabIndexes. TabStop This only be true if the CanFocus is also true and the focus can be avoided by setting this to false Declaration public bool TabStop { get; set; } Property Value Type Description System.Boolean Text The text displayed by the View . Declaration public virtual ustring Text { get; set; } Property Value Type Description NStack.ustring Remarks If provided, the text will be drawn before any subviews are drawn. The text will be drawn starting at the view origin (0, 0) and will be formatted according to the TextAlignment property. If the view's height is greater than 1, the text will word-wrap to additional lines if it does not fit horizontally. If the view's height is 1, the text will be clipped. Set the HotKeySpecifier to enable hotkey support. To disable hotkey support set HotKeySpecifier to (Rune)0xffff . TextAlignment Gets or sets how the View's Text is aligned horizontally when drawn. Changing this property will redisplay the View . Declaration public virtual TextAlignment TextAlignment { get; set; } Property Value Type Description TextAlignment The text alignment. Visible Gets or sets the view visibility. Declaration public bool Visible { get; set; } Property Value Type Description System.Boolean WantContinuousButtonPressed Gets or sets a value indicating whether this View want continuous button pressed event. Declaration public virtual bool WantContinuousButtonPressed { get; set; } Property Value Type Description System.Boolean WantMousePositionReports Gets or sets a value indicating whether this View wants mouse position reports. Declaration public virtual bool WantMousePositionReports { get; set; } Property Value Type Description System.Boolean true if want mouse position reports; otherwise, false . Width Gets or sets the width of the view. Only used whe LayoutStyle is Computed . Declaration public Dim Width { get; set; } Property Value Type Description Dim The width. Remarks If LayoutStyle is Absolute changing this property has no effect and its value is indeterminate. X Gets or sets the X position for the view (the column). Only used whe LayoutStyle is Computed . Declaration public Pos X { get; set; } Property Value Type Description Pos The X Position. Remarks If LayoutStyle is Absolute changing this property has no effect and its value is indeterminate. Y Gets or sets the Y position for the view (the row). Only used whe LayoutStyle is Computed . Declaration public Pos Y { get; set; } Property Value Type Description Pos The y position (line). Remarks If LayoutStyle is Absolute changing this property has no effect and its value is indeterminate. Methods Add(View) Adds a subview (child) to this view. Declaration public virtual void Add(View view) Parameters Type Name Description View view Remarks The Views that have been added to this view can be retrieved via the Subviews property. See also Remove(View) RemoveAll() Add(View[]) Adds the specified views (children) to the view. Declaration public void Add(params View[] views) Parameters Type Name Description View [] views Array of one or more views (can be optional parameter). Remarks The Views that have been added to this view can be retrieved via the Subviews property. See also Remove(View) RemoveAll() AddRune(Int32, Int32, Rune) Displays the specified character in the specified column and row of the View. Declaration public void AddRune(int col, int row, Rune ch) Parameters Type Name Description System.Int32 col Column (view-relative). System.Int32 row Row (view-relative). System.Rune ch Ch. BeginInit() This derived from System.ComponentModel.ISupportInitializeNotification to allow notify all the views that are beginning initialized. Declaration public void BeginInit() BringSubviewForward(View) Moves the subview backwards in the hierarchy, only one step Declaration public void BringSubviewForward(View subview) Parameters Type Name Description View subview The subview to send backwards Remarks If you want to send the view all the way to the back use SendSubviewToBack. BringSubviewToFront(View) Brings the specified subview to the front so it is drawn on top of any other views. Declaration public void BringSubviewToFront(View subview) Parameters Type Name Description View subview The subview to send to the front Remarks SendSubviewToBack(View) . Clear() Clears the view region with the current color. Declaration public void Clear() Remarks This clears the entire region used by this view. Clear(Rect) Clears the specified region with the current color. Declaration public void Clear(Rect regionScreen) Parameters Type Name Description Rect regionScreen The screen-relative region to clear. Remarks ClearLayoutNeeded() Removes the Terminal.Gui.View.SetNeedsLayout setting on this view. Declaration protected void ClearLayoutNeeded() ClearNeedsDisplay() Removes the SetNeedsDisplay() and the Terminal.Gui.View.ChildNeedsDisplay() setting on this view. Declaration protected void ClearNeedsDisplay() ClipToBounds() Sets the ConsoleDriver 's clip region to the current View's Bounds . Declaration public Rect ClipToBounds() Returns Type Description Rect The existing driver's clip region, which can be then re-eapplied by setting Driver .Clip ( Clip ). Remarks Bounds is View-relative. Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Responder.Dispose(Boolean) DrawFrame(Rect, Int32, Boolean) Draws a frame in the current view, clipped by the boundary of this view Declaration public void DrawFrame(Rect region, int padding = 0, bool fill = false) Parameters Type Name Description Rect region View-relative region for the frame to be drawn. System.Int32 padding The padding to add around the outside of the drawn frame. System.Boolean fill If set to true it fill will the contents. DrawHotString(ustring, Boolean, ColorScheme) Utility function to draw strings that contains a hotkey using a ColorScheme and the \"focused\" state. Declaration public void DrawHotString(ustring text, bool focused, ColorScheme scheme) Parameters Type Name Description NStack.ustring text String to display, the underscoore before a letter flags the next letter as the hotkey. System.Boolean focused If set to true this uses the focused colors from the color scheme, otherwise the regular ones. ColorScheme scheme The color scheme to use. DrawHotString(ustring, Attribute, Attribute) Utility function to draw strings that contain a hotkey. Declaration public void DrawHotString(ustring text, Attribute hotColor, Attribute normalColor) Parameters Type Name Description NStack.ustring text String to display, the hotkey specifier before a letter flags the next letter as the hotkey. Attribute hotColor Hot color. Attribute normalColor Normal color. Remarks The hotkey is any character following the hotkey specifier, which is the underscore ('_') character by default. The hotkey specifier can be changed via HotKeySpecifier EndInit() This derived from System.ComponentModel.ISupportInitializeNotification to allow notify all the views that are ending initialized. Declaration public void EndInit() EnsureFocus() Finds the first view in the hierarchy that wants to get the focus if nothing is currently focused, otherwise, it does nothing. Declaration public void EnsureFocus() FocusFirst() Focuses the first focusable subview if one exists. Declaration public void FocusFirst() FocusLast() Focuses the last focusable subview if one exists. Declaration public void FocusLast() FocusNext() Focuses the next view. Declaration public bool FocusNext() Returns Type Description System.Boolean true , if next was focused, false otherwise. FocusPrev() Focuses the previous view. Declaration public bool FocusPrev() Returns Type Description System.Boolean true , if previous was focused, false otherwise. LayoutSubviews() Invoked when a view starts executing or when the dimensions of the view have changed, for example in response to the container view or terminal resizing. Declaration public virtual void LayoutSubviews() Remarks Calls Terminal.Gui.View.OnLayoutComplete(Terminal.Gui.View.LayoutEventArgs) (which raises the LayoutComplete event) before it returns. Move(Int32, Int32) This moves the cursor to the specified column and row in the view. Declaration public void Move(int col, int row) Parameters Type Name Description System.Int32 col Col. System.Int32 row Row. OnAdded(View) Method invoked when a subview is being added to this view. Declaration public virtual void OnAdded(View view) Parameters Type Name Description View view The subview being added. OnDrawContent(Rect) Enables overrides to draw infinitely scrolled content and/or a background behind added controls. Declaration public virtual void OnDrawContent(Rect viewport) Parameters Type Name Description Rect viewport The view-relative rectangle describing the currently visible viewport into the View Remarks This method will be called before any subviews added with Add(View) have been drawn. OnEnter(View) Declaration public override bool OnEnter(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides Responder.OnEnter(View) OnKeyDown(KeyEvent) Declaration public override bool OnKeyDown(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Contains the details about the key that produced the event. Returns Type Description System.Boolean Overrides Responder.OnKeyDown(KeyEvent) OnKeyUp(KeyEvent) Declaration public override bool OnKeyUp(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Contains the details about the key that produced the event. Returns Type Description System.Boolean Overrides Responder.OnKeyUp(KeyEvent) OnLeave(View) Declaration public override bool OnLeave(View view) Parameters Type Name Description View view Returns Type Description System.Boolean Overrides Responder.OnLeave(View) OnMouseClick(View.MouseEventArgs) Invokes the MouseClick event. Declaration protected void OnMouseClick(View.MouseEventArgs args) Parameters Type Name Description View.MouseEventArgs args OnMouseEnter(MouseEvent) Declaration public override bool OnMouseEnter(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Returns Type Description System.Boolean Overrides Responder.OnMouseEnter(MouseEvent) OnMouseEvent(MouseEvent) Method invoked when a mouse event is generated Declaration public virtual bool OnMouseEvent(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Returns Type Description System.Boolean true , if the event was handled, false otherwise. OnMouseLeave(MouseEvent) Declaration public override bool OnMouseLeave(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Returns Type Description System.Boolean Overrides Responder.OnMouseLeave(MouseEvent) OnRemoved(View) Method invoked when a subview is being removed from this view. Declaration public virtual void OnRemoved(View view) Parameters Type Name Description View view The subview being removed. PositionCursor() Positions the cursor in the right position based on the currently focused view in the chain. Declaration public virtual void PositionCursor() ProcessColdKey(KeyEvent) Declaration public override bool ProcessColdKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides Responder.ProcessColdKey(KeyEvent) ProcessHotKey(KeyEvent) Declaration public override bool ProcessHotKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides Responder.ProcessHotKey(KeyEvent) ProcessKey(KeyEvent) Declaration public override bool ProcessKey(KeyEvent keyEvent) Parameters Type Name Description KeyEvent keyEvent Returns Type Description System.Boolean Overrides Responder.ProcessKey(KeyEvent) Redraw(Rect) Redraws this view and its subviews; only redraws the views that have been flagged for a re-display. Declaration public virtual void Redraw(Rect bounds) Parameters Type Name Description Rect bounds The bounds (view-relative region) to redraw. Remarks Always use Bounds (view-relative) when calling Redraw(Rect) , NOT Frame (superview-relative). Views should set the color that they want to use on entry, as otherwise this will inherit the last color that was set globally on the driver. Overrides of Redraw(Rect) must ensure they do not set Driver.Clip to a clip region larger than the region parameter. Remove(View) Removes a subview added via Add(View) or Add(View[]) from this View. Declaration public virtual void Remove(View view) Parameters Type Name Description View view Remarks RemoveAll() Removes all subviews (children) added via Add(View) or Add(View[]) from this View. Declaration public virtual void RemoveAll() ScreenToView(Int32, Int32) Converts a point from screen-relative coordinates to view-relative coordinates. Declaration public Point ScreenToView(int x, int y) Parameters Type Name Description System.Int32 x X screen-coordinate point. System.Int32 y Y screen-coordinate point. Returns Type Description Point The mapped point. SendSubviewBackwards(View) Moves the subview backwards in the hierarchy, only one step Declaration public void SendSubviewBackwards(View subview) Parameters Type Name Description View subview The subview to send backwards Remarks If you want to send the view all the way to the back use SendSubviewToBack. SendSubviewToBack(View) Sends the specified subview to the front so it is the first view drawn Declaration public void SendSubviewToBack(View subview) Parameters Type Name Description View subview The subview to send to the front Remarks BringSubviewToFront(View) . SetChildNeedsDisplay() Indicates that any child views (in the Subviews list) need to be repainted. Declaration public void SetChildNeedsDisplay() SetClip(Rect) Sets the clip region to the specified view-relative region. Declaration public Rect SetClip(Rect region) Parameters Type Name Description Rect region View-relative clip region. Returns Type Description Rect The previous screen-relative clip region. SetFocus() Causes the specified view and the entire parent hierarchy to have the focused order updated. Declaration public void SetFocus() SetHeight(Int32, out Int32) Calculate the height based on the Height settings. Declaration public bool SetHeight(int desiredHeight, out int resultHeight) Parameters Type Name Description System.Int32 desiredHeight The desired height. System.Int32 resultHeight The real result height. Returns Type Description System.Boolean True if the height can be directly assigned, false otherwise. SetNeedsDisplay() Sets a flag indicating this view needs to be redisplayed because its state has changed. Declaration public void SetNeedsDisplay() SetNeedsDisplay(Rect) Flags the view-relative region on this View as needing to be repainted. Declaration public void SetNeedsDisplay(Rect region) Parameters Type Name Description Rect region The view-relative region that must be flagged for repaint. SetWidth(Int32, out Int32) Calculate the width based on the Width settings. Declaration public bool SetWidth(int desiredWidth, out int resultWidth) Parameters Type Name Description System.Int32 desiredWidth The desired width. System.Int32 resultWidth The real result width. Returns Type Description System.Boolean True if the width can be directly assigned, false otherwise. ToString() Pretty prints the View Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Events Added Event fired when a subview is being added to this view. Declaration public event Action<View> Added Event Type Type Description System.Action < View > DrawContent Event invoked when the content area of the View is to be drawn. Declaration public event Action<Rect> DrawContent Event Type Type Description System.Action < Rect > Remarks Will be invoked before any subviews added with Add(View) have been drawn. Rect provides the view-relative rectangle describing the currently visible viewport into the View . Enter Event fired when the view gets focus. Declaration public event Action<View.FocusEventArgs> Enter Event Type Type Description System.Action < View.FocusEventArgs > Initialized Event called only once when the View is being initialized for the first time. Allows configurations and assignments to be performed before the View being shown. This derived from System.ComponentModel.ISupportInitializeNotification to allow notify all the views that are being initialized. Declaration public event EventHandler Initialized Event Type Type Description System.EventHandler KeyDown Invoked when a key is pressed Declaration public event Action<View.KeyEventEventArgs> KeyDown Event Type Type Description System.Action < View.KeyEventEventArgs > KeyPress Invoked when a character key is pressed and occurs after the key up event. Declaration public event Action<View.KeyEventEventArgs> KeyPress Event Type Type Description System.Action < View.KeyEventEventArgs > KeyUp Invoked when a key is released Declaration public event Action<View.KeyEventEventArgs> KeyUp Event Type Type Description System.Action < View.KeyEventEventArgs > LayoutComplete Fired after the Views's LayoutSubviews() method has completed. Declaration public event Action<View.LayoutEventArgs> LayoutComplete Event Type Type Description System.Action < View.LayoutEventArgs > Remarks Subscribe to this event to perform tasks when the View has been resized or the layout has otherwise changed. LayoutStarted Fired after the Views's LayoutSubviews() method has completed. Declaration public event Action<View.LayoutEventArgs> LayoutStarted Event Type Type Description System.Action < View.LayoutEventArgs > Remarks Subscribe to this event to perform tasks when the View has been resized or the layout has otherwise changed. Leave Event fired when the view looses focus. Declaration public event Action<View.FocusEventArgs> Leave Event Type Type Description System.Action < View.FocusEventArgs > MouseClick Event fired when a mouse event is generated. Declaration public event Action<View.MouseEventArgs> MouseClick Event Type Type Description System.Action < View.MouseEventArgs > MouseEnter Event fired when the view receives the mouse event for the first time. Declaration public event Action<View.MouseEventArgs> MouseEnter Event Type Type Description System.Action < View.MouseEventArgs > MouseLeave Event fired when the view receives a mouse event for the last time. Declaration public event Action<View.MouseEventArgs> MouseLeave Event Type Type Description System.Action < View.MouseEventArgs > Removed Event fired when a subview is being removed from this view. Declaration public event Action<View> Removed Event Type Type Description System.Action < View > Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Terminal.Gui.View.KeyEventEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.View.KeyEventEventArgs.html",
    "title": "Class View.KeyEventEventArgs",
    "keywords": "Class View.KeyEventEventArgs Defines the event arguments for KeyEvent Inheritance System.Object System.EventArgs View.KeyEventEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class KeyEventEventArgs : EventArgs Constructors KeyEventEventArgs(KeyEvent) Constructs. Declaration public KeyEventEventArgs(KeyEvent ke) Parameters Type Name Description KeyEvent ke Properties Handled Indicates if the current Key event has already been processed and the driver should stop notifying any other event subscriber. Its important to set this value to true specially when updating any View's layout from inside the subscriber method. Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean KeyEvent The KeyEvent for the event. Declaration public KeyEvent KeyEvent { get; set; } Property Value Type Description KeyEvent"
  },
  "api/Terminal.Gui/Terminal.Gui.View.LayoutEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.View.LayoutEventArgs.html",
    "title": "Class View.LayoutEventArgs",
    "keywords": "Class View.LayoutEventArgs Event arguments for the LayoutComplete event. Inheritance System.Object System.EventArgs View.LayoutEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class LayoutEventArgs : EventArgs Properties OldBounds The view-relative bounds of the View before it was laid out. Declaration public Rect OldBounds { get; set; } Property Value Type Description Rect"
  },
  "api/Terminal.Gui/Terminal.Gui.View.MouseEventArgs.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.View.MouseEventArgs.html",
    "title": "Class View.MouseEventArgs",
    "keywords": "Class View.MouseEventArgs Specifies the event arguments for MouseEvent Inheritance System.Object System.EventArgs View.MouseEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class MouseEventArgs : EventArgs Constructors MouseEventArgs(MouseEvent) Constructs. Declaration public MouseEventArgs(MouseEvent me) Parameters Type Name Description MouseEvent me Properties Handled Indicates if the current mouse event has already been processed and the driver should stop notifying any other event subscriber. Its important to set this value to true specially when updating any View's layout from inside the subscriber method. Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean MouseEvent The MouseEvent for the event. Declaration public MouseEvent MouseEvent { get; set; } Property Value Type Description MouseEvent"
  },
  "api/Terminal.Gui/Terminal.Gui.Window.html": {
    "href": "api/Terminal.Gui/Terminal.Gui.Window.html",
    "title": "Class Window",
    "keywords": "Class Window A Toplevel View that draws a border around its Frame with a Title at the top. Inheritance System.Object Responder View Toplevel Window Dialog Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members Toplevel.Running Toplevel.Loaded Toplevel.Ready Toplevel.Unloaded Toplevel.Create() Toplevel.CanFocus Toplevel.Modal Toplevel.MenuBar Toplevel.StatusBar Toplevel.OnKeyDown(KeyEvent) Toplevel.OnKeyUp(KeyEvent) Toplevel.ProcessKey(KeyEvent) Toplevel.ProcessColdKey(KeyEvent) Toplevel.WillPresent() View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) View.DrawHotString(ustring, Attribute, Attribute) View.DrawHotString(ustring, Boolean, ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme View.AddRune(Int32, Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Terminal.Gui Assembly : Terminal.Gui.dll Syntax public class Window : Toplevel, IDisposable, ISupportInitializeNotification, ISupportInitialize Remarks The 'client area' of a Window is a rectangle deflated by one or more rows/columns from Bounds . A this time there is no API to determine this rectangle. Constructors Window() Initializes a new instance of the Window class using Computed positioning. Declaration public Window() Window(ustring) Initializes a new instance of the Window class with an optional title using Computed positioning. Declaration public Window(ustring title = null) Parameters Type Name Description NStack.ustring title Title. Remarks This constructor intitalize a View with a LayoutStyle of Computed . Use X , Y , Width , and Height properties to dynamically control the size and location of the view. Window(ustring, Int32) Initializes a new instance of the Window using Absolute positioning with the specified frame for its location, with the specified frame padding, and an optional title. Declaration public Window(ustring title = null, int padding = 0) Parameters Type Name Description NStack.ustring title Title. System.Int32 padding Number of characters to use for padding of the drawn frame. Remarks This constructor intitalize a View with a LayoutStyle of Computed . Use X , Y , Width , and Height properties to dynamically control the size and location of the view. Window(Rect, ustring) Initializes a new instance of the Window class with an optional title using Absolute positioning. Declaration public Window(Rect frame, ustring title = null) Parameters Type Name Description Rect frame Superview-relative rectangle specifying the location and size NStack.ustring title Title Remarks This constructor intitalizes a Window with a LayoutStyle of Absolute . Use constructors that do not take Rect parameters to initialize a Window with Computed . Window(Rect, ustring, Int32) Initializes a new instance of the Window using Absolute positioning with the specified frame for its location, with the specified frame padding, and an optional title. Declaration public Window(Rect frame, ustring title = null, int padding = 0) Parameters Type Name Description Rect frame Superview-relative rectangle specifying the location and size NStack.ustring title Title System.Int32 padding Number of characters to use for padding of the drawn frame. Remarks This constructor intitalizes a Window with a LayoutStyle of Absolute . Use constructors that do not take Rect parameters to initialize a Window with LayoutStyle of Computed Properties Text The text displayed by the Label . Declaration public override ustring Text { get; set; } Property Value Type Description NStack.ustring Overrides View.Text TextAlignment Controls the text-alignment property of the label, changing it will redisplay the Label . Declaration public override TextAlignment TextAlignment { get; set; } Property Value Type Description TextAlignment The text alignment. Overrides View.TextAlignment Title The title to be displayed for this window. Declaration public ustring Title { get; set; } Property Value Type Description NStack.ustring The title Methods Add(View) Declaration public override void Add(View view) Parameters Type Name Description View view Overrides Toplevel.Add(View) MouseEvent(MouseEvent) Declaration public override bool MouseEvent(MouseEvent mouseEvent) Parameters Type Name Description MouseEvent mouseEvent Returns Type Description System.Boolean Overrides Responder.MouseEvent(MouseEvent) Redraw(Rect) Declaration public override void Redraw(Rect bounds) Parameters Type Name Description Rect bounds Overrides Toplevel.Redraw(Rect) Remove(View) Declaration public override void Remove(View view) Parameters Type Name Description View view Overrides Toplevel.Remove(View) RemoveAll() Declaration public override void RemoveAll() Overrides Toplevel.RemoveAll() Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/Terminal.Gui/Unix.Terminal.Curses.Event.html": {
    "href": "api/Terminal.Gui/Unix.Terminal.Curses.Event.html",
    "title": "Enum Curses.Event",
    "keywords": "Enum Curses.Event Namespace : Unix.Terminal Assembly : Terminal.Gui.dll Syntax [Flags] public enum Event : long Fields Name Description AllEvents Button1Clicked Button1DoubleClicked Button1Pressed Button1Released Button1TripleClicked Button2Clicked Button2DoubleClicked Button2Pressed Button2Released Button2TrippleClicked Button3Clicked Button3DoubleClicked Button3Pressed Button3Released Button3TripleClicked Button4Clicked Button4DoubleClicked Button4Pressed Button4Released Button4TripleClicked ButtonAlt ButtonCtrl ButtonShift ButtonWheeledDown ButtonWheeledUp ReportMousePosition"
  },
  "api/Terminal.Gui/Unix.Terminal.Curses.html": {
    "href": "api/Terminal.Gui/Unix.Terminal.Curses.html",
    "title": "Class Curses",
    "keywords": "Class Curses Inheritance System.Object Curses Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Unix.Terminal Assembly : Terminal.Gui.dll Syntax public class Curses Fields A_BLINK Declaration public const int A_BLINK = 524288 Field Value Type Description System.Int32 A_BOLD Declaration public const int A_BOLD = 2097152 Field Value Type Description System.Int32 A_DIM Declaration public const int A_DIM = 1048576 Field Value Type Description System.Int32 A_INVIS Declaration public const int A_INVIS = 8388608 Field Value Type Description System.Int32 A_NORMAL Declaration public const int A_NORMAL = 0 Field Value Type Description System.Int32 A_PROTECT Declaration public const int A_PROTECT = 16777216 Field Value Type Description System.Int32 A_REVERSE Declaration public const int A_REVERSE = 262144 Field Value Type Description System.Int32 A_STANDOUT Declaration public const int A_STANDOUT = 65536 Field Value Type Description System.Int32 A_UNDERLINE Declaration public const int A_UNDERLINE = 131072 Field Value Type Description System.Int32 ACS_BLOCK Declaration public const int ACS_BLOCK = 4194352 Field Value Type Description System.Int32 ACS_BOARD Declaration public const int ACS_BOARD = 4194408 Field Value Type Description System.Int32 ACS_BTEE Declaration public const int ACS_BTEE = 4194422 Field Value Type Description System.Int32 ACS_BULLET Declaration public const int ACS_BULLET = 4194430 Field Value Type Description System.Int32 ACS_CKBOARD Declaration public const int ACS_CKBOARD = 4194401 Field Value Type Description System.Int32 ACS_DARROW Declaration public const int ACS_DARROW = 4194350 Field Value Type Description System.Int32 ACS_DEGREE Declaration public const int ACS_DEGREE = 4194406 Field Value Type Description System.Int32 ACS_DIAMOND Declaration public const int ACS_DIAMOND = 4194400 Field Value Type Description System.Int32 ACS_HLINE Declaration public const int ACS_HLINE = 4194417 Field Value Type Description System.Int32 ACS_LANTERN Declaration public const int ACS_LANTERN = 4194409 Field Value Type Description System.Int32 ACS_LARROW Declaration public const int ACS_LARROW = 4194348 Field Value Type Description System.Int32 ACS_LLCORNER Declaration public const int ACS_LLCORNER = 4194413 Field Value Type Description System.Int32 ACS_LRCORNER Declaration public const int ACS_LRCORNER = 4194410 Field Value Type Description System.Int32 ACS_LTEE Declaration public const int ACS_LTEE = 4194420 Field Value Type Description System.Int32 ACS_PLMINUS Declaration public const int ACS_PLMINUS = 4194407 Field Value Type Description System.Int32 ACS_PLUS Declaration public const int ACS_PLUS = 4194414 Field Value Type Description System.Int32 ACS_RARROW Declaration public const int ACS_RARROW = 4194347 Field Value Type Description System.Int32 ACS_RTEE Declaration public const int ACS_RTEE = 4194421 Field Value Type Description System.Int32 ACS_S1 Declaration public const int ACS_S1 = 4194415 Field Value Type Description System.Int32 ACS_S9 Declaration public const int ACS_S9 = 4194419 Field Value Type Description System.Int32 ACS_TTEE Declaration public const int ACS_TTEE = 4194423 Field Value Type Description System.Int32 ACS_UARROW Declaration public const int ACS_UARROW = 4194349 Field Value Type Description System.Int32 ACS_ULCORNER Declaration public const int ACS_ULCORNER = 4194412 Field Value Type Description System.Int32 ACS_URCORNER Declaration public const int ACS_URCORNER = 4194411 Field Value Type Description System.Int32 ACS_VLINE Declaration public const int ACS_VLINE = 4194424 Field Value Type Description System.Int32 AltCtrlKeyEnd Declaration public const int AltCtrlKeyEnd = 532 Field Value Type Description System.Int32 AltCtrlKeyHome Declaration public const int AltCtrlKeyHome = 537 Field Value Type Description System.Int32 AltCtrlKeyNPage Declaration public const int AltCtrlKeyNPage = 552 Field Value Type Description System.Int32 AltCtrlKeyPPage Declaration public const int AltCtrlKeyPPage = 557 Field Value Type Description System.Int32 AltKeyDown Declaration public const int AltKeyDown = 523 Field Value Type Description System.Int32 AltKeyEnd Declaration public const int AltKeyEnd = 528 Field Value Type Description System.Int32 AltKeyHome Declaration public const int AltKeyHome = 533 Field Value Type Description System.Int32 AltKeyLeft Declaration public const int AltKeyLeft = 543 Field Value Type Description System.Int32 AltKeyNPage Declaration public const int AltKeyNPage = 548 Field Value Type Description System.Int32 AltKeyPPage Declaration public const int AltKeyPPage = 553 Field Value Type Description System.Int32 AltKeyRight Declaration public const int AltKeyRight = 558 Field Value Type Description System.Int32 AltKeyUp Declaration public const int AltKeyUp = 564 Field Value Type Description System.Int32 COLOR_BLACK Declaration public const int COLOR_BLACK = 0 Field Value Type Description System.Int32 COLOR_BLUE Declaration public const int COLOR_BLUE = 4 Field Value Type Description System.Int32 COLOR_CYAN Declaration public const int COLOR_CYAN = 6 Field Value Type Description System.Int32 COLOR_GREEN Declaration public const int COLOR_GREEN = 2 Field Value Type Description System.Int32 COLOR_MAGENTA Declaration public const int COLOR_MAGENTA = 5 Field Value Type Description System.Int32 COLOR_RED Declaration public const int COLOR_RED = 1 Field Value Type Description System.Int32 COLOR_WHITE Declaration public const int COLOR_WHITE = 7 Field Value Type Description System.Int32 COLOR_YELLOW Declaration public const int COLOR_YELLOW = 3 Field Value Type Description System.Int32 CtrlKeyDown Declaration public const int CtrlKeyDown = 525 Field Value Type Description System.Int32 CtrlKeyEnd Declaration public const int CtrlKeyEnd = 530 Field Value Type Description System.Int32 CtrlKeyHome Declaration public const int CtrlKeyHome = 535 Field Value Type Description System.Int32 CtrlKeyLeft Declaration public const int CtrlKeyLeft = 545 Field Value Type Description System.Int32 CtrlKeyNPage Declaration public const int CtrlKeyNPage = 550 Field Value Type Description System.Int32 CtrlKeyPPage Declaration public const int CtrlKeyPPage = 555 Field Value Type Description System.Int32 CtrlKeyRight Declaration public const int CtrlKeyRight = 560 Field Value Type Description System.Int32 CtrlKeyUp Declaration public const int CtrlKeyUp = 566 Field Value Type Description System.Int32 DownEnd Declaration public const int DownEnd = 0 Field Value Type Description System.Int32 ERR Declaration public const int ERR = -1 Field Value Type Description System.Int32 Home Declaration public const int Home = 0 Field Value Type Description System.Int32 KEY_CODE_SEQ Declaration public const int KEY_CODE_SEQ = 91 Field Value Type Description System.Int32 KEY_CODE_YES Declaration public const int KEY_CODE_YES = 256 Field Value Type Description System.Int32 KeyAlt Declaration public const int KeyAlt = 8192 Field Value Type Description System.Int32 KeyBackspace Declaration public const int KeyBackspace = 263 Field Value Type Description System.Int32 KeyBackTab Declaration public const int KeyBackTab = 353 Field Value Type Description System.Int32 KeyDeleteChar Declaration public const int KeyDeleteChar = 330 Field Value Type Description System.Int32 KeyDown Declaration public const int KeyDown = 258 Field Value Type Description System.Int32 KeyEnd Declaration public const int KeyEnd = 360 Field Value Type Description System.Int32 KeyF1 Declaration public const int KeyF1 = 265 Field Value Type Description System.Int32 KeyF10 Declaration public const int KeyF10 = 274 Field Value Type Description System.Int32 KeyF11 Declaration public const int KeyF11 = 275 Field Value Type Description System.Int32 KeyF12 Declaration public const int KeyF12 = 276 Field Value Type Description System.Int32 KeyF2 Declaration public const int KeyF2 = 266 Field Value Type Description System.Int32 KeyF3 Declaration public const int KeyF3 = 267 Field Value Type Description System.Int32 KeyF4 Declaration public const int KeyF4 = 268 Field Value Type Description System.Int32 KeyF5 Declaration public const int KeyF5 = 269 Field Value Type Description System.Int32 KeyF6 Declaration public const int KeyF6 = 270 Field Value Type Description System.Int32 KeyF7 Declaration public const int KeyF7 = 271 Field Value Type Description System.Int32 KeyF8 Declaration public const int KeyF8 = 272 Field Value Type Description System.Int32 KeyF9 Declaration public const int KeyF9 = 273 Field Value Type Description System.Int32 KeyHome Declaration public const int KeyHome = 262 Field Value Type Description System.Int32 KeyInsertChar Declaration public const int KeyInsertChar = 331 Field Value Type Description System.Int32 KeyLeft Declaration public const int KeyLeft = 260 Field Value Type Description System.Int32 KeyMouse Declaration public const int KeyMouse = 409 Field Value Type Description System.Int32 KeyNPage Declaration public const int KeyNPage = 338 Field Value Type Description System.Int32 KeyPPage Declaration public const int KeyPPage = 339 Field Value Type Description System.Int32 KeyResize Declaration public const int KeyResize = 410 Field Value Type Description System.Int32 KeyRight Declaration public const int KeyRight = 261 Field Value Type Description System.Int32 KeyTab Declaration public const int KeyTab = 9 Field Value Type Description System.Int32 KeyUp Declaration public const int KeyUp = 259 Field Value Type Description System.Int32 LeftRightUpNPagePPage Declaration public const int LeftRightUpNPagePPage = 0 Field Value Type Description System.Int32 ShiftAltKeyDown Declaration public const int ShiftAltKeyDown = 524 Field Value Type Description System.Int32 ShiftAltKeyEnd Declaration public const int ShiftAltKeyEnd = 529 Field Value Type Description System.Int32 ShiftAltKeyHome Declaration public const int ShiftAltKeyHome = 534 Field Value Type Description System.Int32 ShiftAltKeyLeft Declaration public const int ShiftAltKeyLeft = 544 Field Value Type Description System.Int32 ShiftAltKeyNPage Declaration public const int ShiftAltKeyNPage = 549 Field Value Type Description System.Int32 ShiftAltKeyPPage Declaration public const int ShiftAltKeyPPage = 554 Field Value Type Description System.Int32 ShiftAltKeyRight Declaration public const int ShiftAltKeyRight = 559 Field Value Type Description System.Int32 ShiftAltKeyUp Declaration public const int ShiftAltKeyUp = 565 Field Value Type Description System.Int32 ShiftCtrlKeyDown Declaration public const int ShiftCtrlKeyDown = 526 Field Value Type Description System.Int32 ShiftCtrlKeyEnd Declaration public const int ShiftCtrlKeyEnd = 531 Field Value Type Description System.Int32 ShiftCtrlKeyHome Declaration public const int ShiftCtrlKeyHome = 536 Field Value Type Description System.Int32 ShiftCtrlKeyLeft Declaration public const int ShiftCtrlKeyLeft = 546 Field Value Type Description System.Int32 ShiftCtrlKeyNPage Declaration public const int ShiftCtrlKeyNPage = 551 Field Value Type Description System.Int32 ShiftCtrlKeyPPage Declaration public const int ShiftCtrlKeyPPage = 556 Field Value Type Description System.Int32 ShiftCtrlKeyRight Declaration public const int ShiftCtrlKeyRight = 561 Field Value Type Description System.Int32 ShiftCtrlKeyUp Declaration public const int ShiftCtrlKeyUp = 567 Field Value Type Description System.Int32 ShiftKeyDown Declaration public const int ShiftKeyDown = 336 Field Value Type Description System.Int32 ShiftKeyEnd Declaration public const int ShiftKeyEnd = 386 Field Value Type Description System.Int32 ShiftKeyHome Declaration public const int ShiftKeyHome = 391 Field Value Type Description System.Int32 ShiftKeyLeft Declaration public const int ShiftKeyLeft = 393 Field Value Type Description System.Int32 ShiftKeyNPage Declaration public const int ShiftKeyNPage = 396 Field Value Type Description System.Int32 ShiftKeyPPage Declaration public const int ShiftKeyPPage = 398 Field Value Type Description System.Int32 ShiftKeyRight Declaration public const int ShiftKeyRight = 402 Field Value Type Description System.Int32 ShiftKeyUp Declaration public const int ShiftKeyUp = 337 Field Value Type Description System.Int32 Properties ColorPairs Declaration public static int ColorPairs { get; } Property Value Type Description System.Int32 Cols Declaration public static int Cols { get; } Property Value Type Description System.Int32 HasColors Declaration public static bool HasColors { get; } Property Value Type Description System.Boolean LC_ALL Declaration public static int LC_ALL { get; } Property Value Type Description System.Int32 Lines Declaration public static int Lines { get; } Property Value Type Description System.Int32 Methods addch(Int32) Declaration public static int addch(int ch) Parameters Type Name Description System.Int32 ch Returns Type Description System.Int32 addstr(String, Object[]) Declaration public static int addstr(string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args Returns Type Description System.Int32 addwstr(String) Declaration public static int addwstr(string s) Parameters Type Name Description System.String s Returns Type Description System.Int32 attroff(Int32) Declaration public static int attroff(int attrs) Parameters Type Name Description System.Int32 attrs Returns Type Description System.Int32 attron(Int32) Declaration public static int attron(int attrs) Parameters Type Name Description System.Int32 attrs Returns Type Description System.Int32 attrset(Int32) Declaration public static int attrset(int attrs) Parameters Type Name Description System.Int32 attrs Returns Type Description System.Int32 cbreak() Declaration public static int cbreak() Returns Type Description System.Int32 CheckWinChange() Declaration public static bool CheckWinChange() Returns Type Description System.Boolean clearok(IntPtr, Boolean) Declaration public static int clearok(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 COLOR_PAIRS() Declaration public static int COLOR_PAIRS() Returns Type Description System.Int32 ColorPair(Int32) Declaration public static int ColorPair(int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Int32 curs_set(Int32) Declaration public static int curs_set(int visibility) Parameters Type Name Description System.Int32 visibility Returns Type Description System.Int32 doupdate() Declaration public static int doupdate() Returns Type Description System.Int32 echo() Declaration public static int echo() Returns Type Description System.Int32 endwin() Declaration public static int endwin() Returns Type Description System.Int32 get_wch(out Int32) Declaration public static int get_wch(out int sequence) Parameters Type Name Description System.Int32 sequence Returns Type Description System.Int32 getch() Declaration public static int getch() Returns Type Description System.Int32 getmouse(out Curses.MouseEvent) Declaration public static uint getmouse(out Curses.MouseEvent ev) Parameters Type Name Description Curses.MouseEvent ev Returns Type Description System.UInt32 halfdelay(Int32) Declaration public static int halfdelay(int t) Parameters Type Name Description System.Int32 t Returns Type Description System.Int32 has_colors() Declaration public static bool has_colors() Returns Type Description System.Boolean idcok(IntPtr, Boolean) Declaration public static void idcok(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf idlok(IntPtr, Boolean) Declaration public static int idlok(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 immedok(IntPtr, Boolean) Declaration public static void immedok(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf init_pair(Int16, Int16, Int16) Declaration public static int init_pair(short pair, short f, short b) Parameters Type Name Description System.Int16 pair System.Int16 f System.Int16 b Returns Type Description System.Int32 InitColorPair(Int16, Int16, Int16) Declaration public static int InitColorPair(short pair, short foreground, short background) Parameters Type Name Description System.Int16 pair System.Int16 foreground System.Int16 background Returns Type Description System.Int32 initscr() Declaration public static Curses.Window initscr() Returns Type Description Curses.Window intrflush(IntPtr, Boolean) Declaration public static int intrflush(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 IsAlt(Int32) Declaration public static int IsAlt(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Int32 isendwin() Declaration public static bool isendwin() Returns Type Description System.Boolean keypad(IntPtr, Boolean) Declaration public static int keypad(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 leaveok(IntPtr, Boolean) Declaration public static int leaveok(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 meta(IntPtr, Boolean) Declaration public static int meta(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 mouseinterval(Int32) Declaration public static int mouseinterval(int interval) Parameters Type Name Description System.Int32 interval Returns Type Description System.Int32 mousemask(Curses.Event, out Curses.Event) Declaration public static Curses.Event mousemask(Curses.Event newmask, out Curses.Event oldmask) Parameters Type Name Description Curses.Event newmask Curses.Event oldmask Returns Type Description Curses.Event move(Int32, Int32) Declaration public static int move(int line, int col) Parameters Type Name Description System.Int32 line System.Int32 col Returns Type Description System.Int32 mvgetch(Int32, Int32) Declaration public static int mvgetch(int y, int x) Parameters Type Name Description System.Int32 y System.Int32 x Returns Type Description System.Int32 nl() Declaration public static int nl() Returns Type Description System.Int32 nocbreak() Declaration public static int nocbreak() Returns Type Description System.Int32 noecho() Declaration public static int noecho() Returns Type Description System.Int32 nonl() Declaration public static int nonl() Returns Type Description System.Int32 noqiflush() Declaration public static void noqiflush() noraw() Declaration public static int noraw() Returns Type Description System.Int32 notimeout(IntPtr, Boolean) Declaration public static int notimeout(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 qiflush() Declaration public static void qiflush() raw() Declaration public static int raw() Returns Type Description System.Int32 redrawwin(IntPtr) Declaration public static int redrawwin(IntPtr win) Parameters Type Name Description System.IntPtr win Returns Type Description System.Int32 refresh() Declaration public static int refresh() Returns Type Description System.Int32 scrollok(IntPtr, Boolean) Declaration public static int scrollok(IntPtr win, bool bf) Parameters Type Name Description System.IntPtr win System.Boolean bf Returns Type Description System.Int32 setlocale(Int32, String) Declaration public static int setlocale(int cate, string locale) Parameters Type Name Description System.Int32 cate System.String locale Returns Type Description System.Int32 setscrreg(Int32, Int32) Declaration public static int setscrreg(int top, int bot) Parameters Type Name Description System.Int32 top System.Int32 bot Returns Type Description System.Int32 start_color() Declaration public static int start_color() Returns Type Description System.Int32 StartColor() Declaration public static int StartColor() Returns Type Description System.Int32 timeout(Int32) Declaration public static int timeout(int delay) Parameters Type Name Description System.Int32 delay Returns Type Description System.Int32 typeahead(IntPtr) Declaration public static int typeahead(IntPtr fd) Parameters Type Name Description System.IntPtr fd Returns Type Description System.Int32 ungetch(Int32) Declaration public static int ungetch(int ch) Parameters Type Name Description System.Int32 ch Returns Type Description System.Int32 ungetmouse(ref Curses.MouseEvent) Declaration public static uint ungetmouse(ref Curses.MouseEvent ev) Parameters Type Name Description Curses.MouseEvent ev Returns Type Description System.UInt32 use_default_colors() Declaration public static int use_default_colors() Returns Type Description System.Int32 UseDefaultColors() Declaration public static int UseDefaultColors() Returns Type Description System.Int32 waddch(IntPtr, Int32) Declaration public static int waddch(IntPtr win, int ch) Parameters Type Name Description System.IntPtr win System.Int32 ch Returns Type Description System.Int32 wmove(IntPtr, Int32, Int32) Declaration public static int wmove(IntPtr win, int line, int col) Parameters Type Name Description System.IntPtr win System.Int32 line System.Int32 col Returns Type Description System.Int32 wnoutrefresh(IntPtr) Declaration public static int wnoutrefresh(IntPtr win) Parameters Type Name Description System.IntPtr win Returns Type Description System.Int32 wrefresh(IntPtr) Declaration public static int wrefresh(IntPtr win) Parameters Type Name Description System.IntPtr win Returns Type Description System.Int32 wsetscrreg(IntPtr, Int32, Int32) Declaration public static int wsetscrreg(IntPtr win, int top, int bot) Parameters Type Name Description System.IntPtr win System.Int32 top System.Int32 bot Returns Type Description System.Int32 wtimeout(IntPtr, Int32) Declaration public static int wtimeout(IntPtr win, int delay) Parameters Type Name Description System.IntPtr win System.Int32 delay Returns Type Description System.Int32"
  },
  "api/Terminal.Gui/Unix.Terminal.Curses.MouseEvent.html": {
    "href": "api/Terminal.Gui/Unix.Terminal.Curses.MouseEvent.html",
    "title": "Struct Curses.MouseEvent",
    "keywords": "Struct Curses.MouseEvent Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Unix.Terminal Assembly : Terminal.Gui.dll Syntax public struct MouseEvent Fields ButtonState Declaration public Curses.Event ButtonState Field Value Type Description Curses.Event ID Declaration public short ID Field Value Type Description System.Int16 X Declaration public int X Field Value Type Description System.Int32 Y Declaration public int Y Field Value Type Description System.Int32 Z Declaration public int Z Field Value Type Description System.Int32"
  },
  "api/Terminal.Gui/Unix.Terminal.Curses.Window.html": {
    "href": "api/Terminal.Gui/Unix.Terminal.Curses.Window.html",
    "title": "Class Curses.Window",
    "keywords": "Class Curses.Window Inheritance System.Object Curses.Window Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Unix.Terminal Assembly : Terminal.Gui.dll Syntax public class Window Fields Handle Declaration public readonly IntPtr Handle Field Value Type Description System.IntPtr Properties Current Declaration public static Curses.Window Current { get; } Property Value Type Description Curses.Window Standard Declaration public static Curses.Window Standard { get; } Property Value Type Description Curses.Window Methods addch(Char) Declaration public int addch(char ch) Parameters Type Name Description System.Char ch Returns Type Description System.Int32 clearok(Boolean) Declaration public int clearok(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 idcok(Boolean) Declaration public void idcok(bool bf) Parameters Type Name Description System.Boolean bf idlok(Boolean) Declaration public int idlok(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 immedok(Boolean) Declaration public void immedok(bool bf) Parameters Type Name Description System.Boolean bf intrflush(Boolean) Declaration public int intrflush(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 keypad(Boolean) Declaration public int keypad(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 leaveok(Boolean) Declaration public int leaveok(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 meta(Boolean) Declaration public int meta(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 move(Int32, Int32) Declaration public int move(int line, int col) Parameters Type Name Description System.Int32 line System.Int32 col Returns Type Description System.Int32 notimeout(Boolean) Declaration public int notimeout(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 redrawwin() Declaration public int redrawwin() Returns Type Description System.Int32 refresh() Declaration public int refresh() Returns Type Description System.Int32 scrollok(Boolean) Declaration public int scrollok(bool bf) Parameters Type Name Description System.Boolean bf Returns Type Description System.Int32 setscrreg(Int32, Int32) Declaration public int setscrreg(int top, int bot) Parameters Type Name Description System.Int32 top System.Int32 bot Returns Type Description System.Int32 wnoutrefresh() Declaration public int wnoutrefresh() Returns Type Description System.Int32 wrefresh() Declaration public int wrefresh() Returns Type Description System.Int32 wtimeout(Int32) Declaration public int wtimeout(int delay) Parameters Type Name Description System.Int32 delay Returns Type Description System.Int32"
  },
  "api/Terminal.Gui/Unix.Terminal.html": {
    "href": "api/Terminal.Gui/Unix.Terminal.html",
    "title": "Namespace Unix.Terminal",
    "keywords": "Namespace Unix.Terminal Classes Curses Curses.Window Structs Curses.MouseEvent Enums Curses.Event"
  },
  "api/UICatalog/UICatalog.Binding.html": {
    "href": "api/UICatalog/UICatalog.Binding.html",
    "title": "Class Binding",
    "keywords": "Class Binding Inheritance System.Object Binding Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax public class Binding Constructors Binding(View, String, View, String, IValueConverter) Declaration public Binding(View source, string sourcePropertyName, View target, string targetPropertyName, IValueConverter valueConverter = null) Parameters Type Name Description View source System.String sourcePropertyName View target System.String targetPropertyName IValueConverter valueConverter Properties Source Declaration public View Source { get; } Property Value Type Description View SourcePropertyName Declaration public string SourcePropertyName { get; } Property Value Type Description System.String Target Declaration public View Target { get; } Property Value Type Description View TargetPropertyName Declaration public string TargetPropertyName { get; } Property Value Type Description System.String"
  },
  "api/UICatalog/UICatalog.DynamicMenuBarDetails.html": {
    "href": "api/UICatalog/UICatalog.DynamicMenuBarDetails.html",
    "title": "Class DynamicMenuBarDetails",
    "keywords": "Class DynamicMenuBarDetails Inheritance System.Object Responder View FrameView DynamicMenuBarDetails Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members FrameView.Title FrameView.Add(View) FrameView.Remove(View) FrameView.RemoveAll() FrameView.Redraw(Rect) FrameView.Text FrameView.TextAlignment FrameView.OnEnter(View) View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.CanFocus View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) Terminal.Gui.View.DrawHotString(ustring, Terminal.Gui.Attribute, Terminal.Gui.Attribute) Terminal.Gui.View.DrawHotString(ustring, System.Boolean, Terminal.Gui.ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme Terminal.Gui.View.AddRune(System.Int32, System.Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessKey(KeyEvent) View.ProcessHotKey(KeyEvent) View.ProcessColdKey(KeyEvent) View.KeyDown View.OnKeyDown(KeyEvent) View.KeyUp View.OnKeyUp(KeyEvent) View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.MouseEvent(MouseEvent) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UICatalog Assembly : UICatalog.dll Syntax public class DynamicMenuBarDetails : FrameView, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors DynamicMenuBarDetails(MenuItem, Boolean) Declaration public DynamicMenuBarDetails(MenuItem menuItem = null, bool hasParent = false) Parameters Type Name Description MenuItem menuItem System.Boolean hasParent DynamicMenuBarDetails(ustring) Declaration public DynamicMenuBarDetails(ustring title) Parameters Type Name Description ustring title Fields _ckbIsTopLevel Declaration public CheckBox _ckbIsTopLevel Field Value Type Description CheckBox _ckbSubMenu Declaration public CheckBox _ckbSubMenu Field Value Type Description CheckBox _menuItem Declaration public MenuItem _menuItem Field Value Type Description MenuItem _rbChkStyle Declaration public RadioGroup _rbChkStyle Field Value Type Description RadioGroup _txtAction Declaration public TextView _txtAction Field Value Type Description TextView _txtHelp Declaration public TextField _txtHelp Field Value Type Description TextField _txtShortcut Declaration public TextField _txtShortcut Field Value Type Description TextField _txtTitle Declaration public TextField _txtTitle Field Value Type Description TextField Methods CreateAction(MenuItem, DynamicMenuItem) Declaration public Action CreateAction(MenuItem menuItem, DynamicMenuItem item) Parameters Type Name Description MenuItem menuItem DynamicMenuItem item Returns Type Description System.Action EditMenuBarItem(MenuItem) Declaration public void EditMenuBarItem(MenuItem menuItem) Parameters Type Name Description MenuItem menuItem EnterMenuItem() Declaration public DynamicMenuItem EnterMenuItem() Returns Type Description DynamicMenuItem UpdateParent(ref MenuItem) Declaration public void UpdateParent(ref MenuItem menuItem) Parameters Type Name Description MenuItem menuItem Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/UICatalog/UICatalog.DynamicMenuBarSample.html": {
    "href": "api/UICatalog/UICatalog.DynamicMenuBarSample.html",
    "title": "Class DynamicMenuBarSample",
    "keywords": "Class DynamicMenuBarSample Inheritance System.Object Responder View Toplevel Window DynamicMenuBarSample Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize Inherited Members Window.Title Window.Add(View) Window.Remove(View) Window.RemoveAll() Window.Redraw(Rect) Window.MouseEvent(MouseEvent) Window.Text Window.TextAlignment Toplevel.Running Toplevel.Loaded Toplevel.Ready Toplevel.Unloaded Toplevel.Create() Toplevel.CanFocus Toplevel.Modal Toplevel.MenuBar Toplevel.StatusBar Toplevel.OnKeyDown(KeyEvent) Toplevel.OnKeyUp(KeyEvent) Toplevel.ProcessKey(KeyEvent) Toplevel.ProcessColdKey(KeyEvent) Toplevel.WillPresent() View.Added View.Removed View.Enter View.Leave View.MouseEnter View.MouseLeave View.MouseClick View.HotKey View.HotKeySpecifier View.Shortcut View.ShortcutTag View.ShortcutAction View.Data View.Driver View.Subviews View.TabIndexes View.TabIndex View.TabStop View.Id View.IsCurrentTop View.WantMousePositionReports View.WantContinuousButtonPressed View.Frame View.LayoutStyle View.Bounds View.X View.Y View.Width View.Height View.SuperView View.SetNeedsDisplay() View.ClearLayoutNeeded() View.SetNeedsDisplay(Rect) View.SetChildNeedsDisplay() View.Add(View[]) View.BringSubviewToFront(View) View.SendSubviewToBack(View) View.SendSubviewBackwards(View) View.BringSubviewForward(View) View.Clear() View.Clear(Rect) View.ScreenToView(Int32, Int32) View.ClipToBounds() View.SetClip(Rect) View.DrawFrame(Rect, Int32, Boolean) Terminal.Gui.View.DrawHotString(ustring, Terminal.Gui.Attribute, Terminal.Gui.Attribute) Terminal.Gui.View.DrawHotString(ustring, System.Boolean, Terminal.Gui.ColorScheme) View.Move(Int32, Int32) View.PositionCursor() View.HasFocus View.OnAdded(View) View.OnRemoved(View) View.OnEnter(View) View.OnLeave(View) View.Focused View.MostFocused View.ColorScheme Terminal.Gui.View.AddRune(System.Int32, System.Int32, Rune) View.ClearNeedsDisplay() View.DrawContent View.OnDrawContent(Rect) View.SetFocus() View.KeyPress View.ProcessHotKey(KeyEvent) View.KeyDown View.KeyUp View.EnsureFocus() View.FocusFirst() View.FocusLast() View.FocusPrev() View.FocusNext() View.LayoutStarted View.LayoutComplete View.Initialized View.LayoutSubviews() View.AutoSize View.IsInitialized View.ToString() View.OnMouseEnter(MouseEvent) View.OnMouseLeave(MouseEvent) View.OnMouseEvent(MouseEvent) View.OnMouseClick(View.MouseEventArgs) View.Dispose(Boolean) View.BeginInit() View.EndInit() View.Visible View.SetWidth(Int32, Int32) View.SetHeight(Int32, Int32) Responder.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UICatalog Assembly : UICatalog.dll Syntax public class DynamicMenuBarSample : Window, IDisposable, ISupportInitializeNotification, ISupportInitialize Constructors DynamicMenuBarSample(ustring) Declaration public DynamicMenuBarSample(ustring title) Parameters Type Name Description ustring title Properties DataContext Declaration public DynamicMenuItemModel DataContext { get; set; } Property Value Type Description DynamicMenuItemModel Implements System.IDisposable System.ComponentModel.ISupportInitializeNotification System.ComponentModel.ISupportInitialize"
  },
  "api/UICatalog/UICatalog.DynamicMenuItem.html": {
    "href": "api/UICatalog/UICatalog.DynamicMenuItem.html",
    "title": "Class DynamicMenuItem",
    "keywords": "Class DynamicMenuItem Inheritance System.Object DynamicMenuItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax public class DynamicMenuItem Constructors DynamicMenuItem() Declaration public DynamicMenuItem() DynamicMenuItem(ustring, Boolean) Declaration public DynamicMenuItem(ustring title, bool hasSubMenu = false) Parameters Type Name Description ustring title System.Boolean hasSubMenu DynamicMenuItem(ustring, ustring, ustring, Boolean, Boolean, MenuItemCheckStyle, ustring) Declaration public DynamicMenuItem(ustring title, ustring help, ustring action, bool isTopLevel, bool hasSubMenu, MenuItemCheckStyle checkStyle = MenuItemCheckStyle.NoCheck, ustring shortcut = null) Parameters Type Name Description ustring title ustring help ustring action System.Boolean isTopLevel System.Boolean hasSubMenu MenuItemCheckStyle checkStyle ustring shortcut Fields action Declaration public ustring action Field Value Type Description ustring checkStyle Declaration public MenuItemCheckStyle checkStyle Field Value Type Description MenuItemCheckStyle hasSubMenu Declaration public bool hasSubMenu Field Value Type Description System.Boolean help Declaration public ustring help Field Value Type Description ustring isTopLevel Declaration public bool isTopLevel Field Value Type Description System.Boolean shortcut Declaration public ustring shortcut Field Value Type Description ustring title Declaration public ustring title Field Value Type Description ustring"
  },
  "api/UICatalog/UICatalog.DynamicMenuItemList.html": {
    "href": "api/UICatalog/UICatalog.DynamicMenuItemList.html",
    "title": "Class DynamicMenuItemList",
    "keywords": "Class DynamicMenuItemList Inheritance System.Object DynamicMenuItemList Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UICatalog Assembly : UICatalog.dll Syntax public class DynamicMenuItemList Constructors DynamicMenuItemList() Declaration public DynamicMenuItemList() DynamicMenuItemList(ustring, MenuItem) Declaration public DynamicMenuItemList(ustring title, MenuItem menuItem) Parameters Type Name Description ustring title MenuItem menuItem Properties MenuItem Declaration public MenuItem MenuItem { get; set; } Property Value Type Description MenuItem Title Declaration public ustring Title { get; set; } Property Value Type Description ustring Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/UICatalog/UICatalog.DynamicMenuItemModel.html": {
    "href": "api/UICatalog/UICatalog.DynamicMenuItemModel.html",
    "title": "Class DynamicMenuItemModel",
    "keywords": "Class DynamicMenuItemModel Inheritance System.Object DynamicMenuItemModel Implements System.ComponentModel.INotifyPropertyChanged Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax public class DynamicMenuItemModel : INotifyPropertyChanged Constructors DynamicMenuItemModel() Declaration public DynamicMenuItemModel() Properties MenuBar Declaration public ustring MenuBar { get; set; } Property Value Type Description ustring Menus Declaration public List<DynamicMenuItemList> Menus { get; set; } Property Value Type Description System.Collections.Generic.List < DynamicMenuItemList > Parent Declaration public ustring Parent { get; set; } Property Value Type Description ustring Methods GetPropertyName(String) Declaration public string GetPropertyName(string propertyName = null) Parameters Type Name Description System.String propertyName Returns Type Description System.String Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/UICatalog/UICatalog.html": {
    "href": "api/UICatalog/UICatalog.html",
    "title": "Namespace UICatalog",
    "keywords": "Namespace UICatalog Classes Binding DynamicMenuBarDetails DynamicMenuBarSample DynamicMenuItem DynamicMenuItemList DynamicMenuItemModel ListWrapperConverter NumberToWords Scenario Base class for each demo/scenario. To define a new scenario: Create a new .cs file in the Scenarios directory that derives from Scenario . Annotate the Scenario derived class with a attribute specifying the scenario's name and description. Add one or more Scenario.ScenarioCategory attributes to the class specifying which categories the sceanrio belongs to. If you don't specify a category the sceanrio will show up in \"All\". Implement the Setup() override which will be called when a user selects the scenario to run. Optionally, implement the and/or Run() overrides to provide a custom implementation. The UI Catalog program uses reflection to find all scenarios and adds them to the ListViews. Press ENTER to run the selected scenario. Press CTRL-Q to exit it. / Scenario.ScenarioCategory Defines the category names used to catagorize a Scenario Scenario.ScenarioMetadata Defines the metadata (Name and Description) for a Scenario UICatalogApp UI Catalog is a comprehensive sample app and scenario library for Terminal.Gui UStringValueConverter Interfaces IValueConverter"
  },
  "api/UICatalog/UICatalog.IValueConverter.html": {
    "href": "api/UICatalog/UICatalog.IValueConverter.html",
    "title": "Interface IValueConverter",
    "keywords": "Interface IValueConverter Namespace : UICatalog Assembly : UICatalog.dll Syntax public interface IValueConverter Methods Convert(Object, Object) Declaration object Convert(object value, object parameter = null) Parameters Type Name Description System.Object value System.Object parameter Returns Type Description System.Object"
  },
  "api/UICatalog/UICatalog.ListWrapperConverter.html": {
    "href": "api/UICatalog/UICatalog.ListWrapperConverter.html",
    "title": "Class ListWrapperConverter",
    "keywords": "Class ListWrapperConverter Inheritance System.Object ListWrapperConverter Implements IValueConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax public class ListWrapperConverter : IValueConverter Methods Convert(Object, Object) Declaration public object Convert(object value, object parameter = null) Parameters Type Name Description System.Object value System.Object parameter Returns Type Description System.Object Implements IValueConverter"
  },
  "api/UICatalog/UICatalog.NumberToWords.html": {
    "href": "api/UICatalog/UICatalog.NumberToWords.html",
    "title": "Class NumberToWords",
    "keywords": "Class NumberToWords Inheritance System.Object NumberToWords Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax public static class NumberToWords Methods Convert(Int64) Declaration public static string Convert(long i) Parameters Type Name Description System.Int64 i Returns Type Description System.String ConvertAmount(Double) Declaration public static string ConvertAmount(double amount) Parameters Type Name Description System.Double amount Returns Type Description System.String"
  },
  "api/UICatalog/UICatalog.Scenario.html": {
    "href": "api/UICatalog/UICatalog.Scenario.html",
    "title": "Class Scenario",
    "keywords": "Class Scenario Base class for each demo/scenario. To define a new scenario: Create a new .cs file in the Scenarios directory that derives from Scenario . Annotate the Scenario derived class with a attribute specifying the scenario's name and description. Add one or more Scenario.ScenarioCategory attributes to the class specifying which categories the sceanrio belongs to. If you don't specify a category the sceanrio will show up in \"All\". Implement the Setup() override which will be called when a user selects the scenario to run. Optionally, implement the and/or Run() overrides to provide a custom implementation. The UI Catalog program uses reflection to find all scenarios and adds them to the ListViews. Press ENTER to run the selected scenario. Press CTRL-Q to exit it. / Inheritance System.Object Scenario CsvEditor TableEditor Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UICatalog Assembly : UICatalog.dll Syntax public class Scenario : IDisposable Examples The example below is provided in the Scenarios directory as a generic sample that can be copied and re-named: using Terminal.Gui; namespace UICatalog { [ScenarioMetadata (Name: \"Generic\", Description: \"Generic sample - A template for creating new Scenarios\")] [ScenarioCategory (\"Controls\")] class MyScenario : Scenario { public override void Setup () { // Put your scenario code here, e.g. Win.Add (new Button (\"Press me!\") { X = Pos.Center (), Y = Pos.Center (), Clicked = () => MessageBox.Query (20, 7, \"Hi\", \"Neat?\", \"Yes\", \"No\") }); } } } Properties Top The Top level for the Scenario . This should be set to Top in most cases. Declaration public Toplevel Top { get; set; } Property Value Type Description Toplevel Win The Window for the Scenario . This should be set within the Top in most cases. Declaration public Window Win { get; set; } Property Value Type Description Window Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetCategories() Helper function to get the list of categories a Scenario belongs to (defined in Scenario.ScenarioCategory ) Declaration public List<string> GetCategories() Returns Type Description System.Collections.Generic.List < System.String > list of category names GetDerivedClasses<T>() Returns an instance of each Scenario defined in the project. https://stackoverflow.com/questions/5411694/get-all-inherited-classes-of-an-abstract-class Declaration public static List<Type> GetDerivedClasses<T>() Returns Type Description System.Collections.Generic.List < System.Type > Type Parameters Name Description T GetDescription() Helper to get the Scenario Description (defined in Scenario.ScenarioMetadata ) Declaration public string GetDescription() Returns Type Description System.String GetName() Helper to get the Scenario Name (defined in Scenario.ScenarioMetadata ) Declaration public string GetName() Returns Type Description System.String Init(Toplevel, ColorScheme) Helper that provides the default Window implementation with a frame and label showing the name of the Scenario and logic to exit back to the Scenario picker UI. Override to provide any Toplevel behavior needed. Declaration public virtual void Init(Toplevel top, ColorScheme colorScheme) Parameters Type Name Description Toplevel top The Toplevel created by the UI Catalog host. ColorScheme colorScheme The colorscheme to use. Remarks Thg base implementation calls Init(ConsoleDriver, IMainLoopDriver) , sets Top to the passed in Toplevel , creates a Window for Win and adds it to Top . Overrides that do not call the base. Run() , must call Init(ConsoleDriver, IMainLoopDriver) before creating any views or calling other Terminal.Gui APIs. RequestStop() Stops the scenario. Override to change shutdown behavior for the Scenario . Declaration public virtual void RequestStop() Run() Runs the Scenario . Override to start the Scenario using a Toplevel different than Top . Declaration public virtual void Run() Remarks Overrides that do not call the base. Run() , must call Shutdown() before returning. Setup() Override this to implement the Scenario setup logic (create controls, etc...). Declaration public virtual void Setup() Remarks This is typically the best place to put scenario logic code. ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "api/UICatalog/UICatalog.Scenario.ScenarioCategory.html": {
    "href": "api/UICatalog/UICatalog.Scenario.ScenarioCategory.html",
    "title": "Class Scenario.ScenarioCategory",
    "keywords": "Class Scenario.ScenarioCategory Defines the category names used to catagorize a Scenario Inheritance System.Object System.Attribute Scenario.ScenarioCategory Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class ScenarioCategory : Attribute Constructors ScenarioCategory(String) Declaration public ScenarioCategory(string Name) Parameters Type Name Description System.String Name Properties Name Category Name Declaration public string Name { get; set; } Property Value Type Description System.String Methods GetCategories(Type) Static helper function to get the Scenario Categories given a Type Declaration public static List<string> GetCategories(Type t) Parameters Type Name Description System.Type t Returns Type Description System.Collections.Generic.List < System.String > list of category names GetName(Type) Static helper function to get the Scenario Name given a Type Declaration public static string GetName(Type t) Parameters Type Name Description System.Type t Returns Type Description System.String Name of the category"
  },
  "api/UICatalog/UICatalog.Scenario.ScenarioMetadata.html": {
    "href": "api/UICatalog/UICatalog.Scenario.ScenarioMetadata.html",
    "title": "Class Scenario.ScenarioMetadata",
    "keywords": "Class Scenario.ScenarioMetadata Defines the metadata (Name and Description) for a Scenario Inheritance System.Object System.Attribute Scenario.ScenarioMetadata Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ScenarioMetadata : Attribute Constructors ScenarioMetadata(String, String) Declaration public ScenarioMetadata(string Name, string Description) Parameters Type Name Description System.String Name System.String Description Properties Description Scenario Description Declaration public string Description { get; set; } Property Value Type Description System.String Name Scenario Name Declaration public string Name { get; set; } Property Value Type Description System.String Methods GetDescription(Type) Static helper function to get the Scenario Description given a Type Declaration public static string GetDescription(Type t) Parameters Type Name Description System.Type t Returns Type Description System.String GetName(Type) Static helper function to get the Scenario Name given a Type Declaration public static string GetName(Type t) Parameters Type Name Description System.Type t Returns Type Description System.String"
  },
  "api/UICatalog/UICatalog.Scenarios.CsvEditor.html": {
    "href": "api/UICatalog/UICatalog.Scenarios.CsvEditor.html",
    "title": "Class CsvEditor",
    "keywords": "Class CsvEditor Inheritance System.Object Scenario CsvEditor Implements System.IDisposable Inherited Members Scenario.Top Scenario.Win Scenario.Init(Toplevel, ColorScheme) Scenario.GetName() Scenario.GetDescription() Scenario.GetCategories() Scenario.ToString() Scenario.Run() Scenario.RequestStop() Scenario.GetDerivedClasses<T>() Scenario.Dispose(Boolean) Scenario.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UICatalog.Scenarios Assembly : UICatalog.dll Syntax [Scenario.ScenarioMetadata(\"Csv Editor\", \"Open and edit simple CSV files\")] [Scenario.ScenarioCategory(\"Controls\")] [Scenario.ScenarioCategory(\"Dialogs\")] [Scenario.ScenarioCategory(\"Text\")] [Scenario.ScenarioCategory(\"Dialogs\")] [Scenario.ScenarioCategory(\"TopLevel\")] public class CsvEditor : Scenario, IDisposable Methods Setup() Declaration public override void Setup() Overrides Scenario.Setup() Implements System.IDisposable"
  },
  "api/UICatalog/UICatalog.Scenarios.html": {
    "href": "api/UICatalog/UICatalog.Scenarios.html",
    "title": "Namespace UICatalog.Scenarios",
    "keywords": "Namespace UICatalog.Scenarios Classes CsvEditor TableEditor"
  },
  "api/UICatalog/UICatalog.Scenarios.TableEditor.html": {
    "href": "api/UICatalog/UICatalog.Scenarios.TableEditor.html",
    "title": "Class TableEditor",
    "keywords": "Class TableEditor Inheritance System.Object Scenario TableEditor Implements System.IDisposable Inherited Members Scenario.Top Scenario.Win Scenario.Init(Toplevel, ColorScheme) Scenario.GetName() Scenario.GetDescription() Scenario.GetCategories() Scenario.ToString() Scenario.Run() Scenario.RequestStop() Scenario.GetDerivedClasses<T>() Scenario.Dispose(Boolean) Scenario.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UICatalog.Scenarios Assembly : UICatalog.dll Syntax [Scenario.ScenarioMetadata(\"TableEditor\", \"A Terminal.Gui DataTable editor via TableView\")] [Scenario.ScenarioCategory(\"Controls\")] [Scenario.ScenarioCategory(\"Dialogs\")] [Scenario.ScenarioCategory(\"Text\")] [Scenario.ScenarioCategory(\"Dialogs\")] [Scenario.ScenarioCategory(\"TopLevel\")] public class TableEditor : Scenario, IDisposable Methods BuildDemoDataTable(Int32, Int32) Generates a new demo System.Data.DataTable with the given number of cols (min 5) and rows Declaration public static DataTable BuildDemoDataTable(int cols, int rows) Parameters Type Name Description System.Int32 cols System.Int32 rows Returns Type Description System.Data.DataTable BuildSimpleDataTable(Int32, Int32) Builds a simple table in which cell values contents are the index of the cell. This helps testing that scrolling etc is working correctly and not skipping out any rows/columns when paging Declaration public static DataTable BuildSimpleDataTable(int cols, int rows) Parameters Type Name Description System.Int32 cols System.Int32 rows Returns Type Description System.Data.DataTable Setup() Declaration public override void Setup() Overrides Scenario.Setup() Implements System.IDisposable"
  },
  "api/UICatalog/UICatalog.UICatalogApp.html": {
    "href": "api/UICatalog/UICatalog.UICatalogApp.html",
    "title": "Class UICatalogApp",
    "keywords": "Class UICatalogApp UI Catalog is a comprehensive sample app and scenario library for Terminal.Gui Inheritance System.Object UICatalogApp Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax public class UICatalogApp"
  },
  "api/UICatalog/UICatalog.UStringValueConverter.html": {
    "href": "api/UICatalog/UICatalog.UStringValueConverter.html",
    "title": "Class UStringValueConverter",
    "keywords": "Class UStringValueConverter Inheritance System.Object UStringValueConverter Implements IValueConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UICatalog Assembly : UICatalog.dll Syntax public class UStringValueConverter : IValueConverter Methods Convert(Object, Object) Declaration public object Convert(object value, object parameter = null) Parameters Type Name Description System.Object value System.Object parameter Returns Type Description System.Object Implements IValueConverter"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Conceptual Documentation",
    "keywords": "Conceptual Documentation Terminal.Gui Overview Keyboard Event Processing Event Processing and the Application Main Loop TableView Deep Dive TreeView Deep Dive"
  },
  "articles/keyboard.html": {
    "href": "articles/keyboard.html",
    "title": "Keyboard Event Processing",
    "keywords": "Keyboard Event Processing Keyboard events are sent by the Main Loop to the Application class for processing. The keyboard events are sent exclusively to the current Toplevel , this being either the default that is created when you call Application.Init , or one that you created an passed to Application.Run(Toplevel) . Flow Keystrokes are first processes as hotkeys, then as regular keys, and there is a final cold post-processing event that is invoked if no view processed the key. HotKey Processing Events are first send to all views as a \"HotKey\", this means that the View.ProcessHotKey method is invoked on the current toplevel, which in turns propagates this to all the views in the hierarchy. If any view decides to process the event, no further processing takes place. This is how hotkeys for buttons are implemented. For example, the keystroke \"Alt-A\" is handled by Buttons that have a hot-letter \"A\" to activate the button. Regular Processing Unlike the hotkey processing, the regular processing is only sent to the currently focused view in the focus chain. The regular key processing is only invoked if no hotkey was caught. Cold-key Processing This stage only is executed if the focused view did not process the event, and is broadcast to all the views in the Toplevel. This method can be overwritten by views that want to provide accelerator functionality (Alt-key for example), but without interefering with normal ProcessKey behavior."
  },
  "articles/mainloop.html": {
    "href": "articles/mainloop.html",
    "title": "Event Processing and the Application Main Loop",
    "keywords": "Event Processing and the Application Main Loop The method Application.Run that we covered before will wait for events from either the keyboard or mouse and route those events to the proper view. The job of waiting for events and dispatching them in the Application is implemented by an instance of the MainLoop class. Mainloops are a common idiom in many user interface toolkits so many of the concepts will be familiar to you if you have used other toolkits before. This class provides the following capabilities: Keyboard and mouse processing .NET Async support Timers processing Invoking of UI code from a background thread Idle processing handlers Possibility of integration with other mainloops. On Unix systems, it can monitor file descriptors for readability or writability. The MainLoop property in the the Application provides access to these functions. When your code invokes Application.Run (Toplevel) , the application will prepare the current Toplevel instance by redrawing the screen appropriately and then calling the mainloop to run. You can configure the Mainloop before calling Application.Run, or you can configure the MainLoop in response to events during the execution. The keyboard inputs is dispatched by the application class to the current TopLevel window this is covered in more detail in the Keyboard Event Processing document. Async Execution On startup, the Application class configured the .NET Asynchronous machinery to allow you to use the await keyword to run tasks in the background and have the execution of those tasks resume on the context of the main thread running the main loop. Once you invoke Application.Main the async machinery will be ready to use, and you can merely call methods using await from your main thread, and the awaited code will resume execution on the main thread. Timers Processing You can register timers to be executed at specified intervals by calling the AddTimeout method, like this: void UpdateTimer () { time.Text = DateTime.Now.ToString (); } var token = Application.MainLoop.AddTimeout (TimeSpan.FromSeconds (20), UpdateTimer); The return value from AddTimeout is a token value that you can use if you desire to cancel the timer before it runs: Application.MainLoop.RemoveTimeout (token); Idle Handlers You can register code to be executed when the application is idling and there are no events to process by calling the AddIdle method. This method takes as a parameter a function that will be invoked when the application is idling. Idle functions should return true if they should be invoked again, and false if the idle invocations should stop. Like the timer APIs, the return value is a token that can be used to cancel the scheduled idle function from being executed. Threading Like other UI toolkits, Terminal.Gui is generally not thread safe. You should avoid calling methods in the UI classes from a background thread as there is no guarantee that they will not corrupt the state of the UI application. Generally, as there is not much state, you will get lucky, but the application will not behave properly. You will be served better off by using C# async machinery and the various APIs in the System.Threading.Tasks.Task APIs. But if you absolutely must work with threads on your own you should only invoke APIs in Terminal.Gui from the main thread. To make this simple, you can use the Application.MainLoop.Invoke method and pass an Action . This action will be queued for execution on the main thread at an appropriate time and will run your code there. For example, the following shows how to properly update a label from a background thread: void BackgroundThreadUpdateProgress () { Application.MainLoop.Invoke (() => { progress.Text = $\"Progress: {bytesDownloaded/totalBytes}\"; }); } Integration With Other Main Loop Drivers It is possible to run the main loop in a way that it does not take over control of your application, but rather in a cooperative way. To do this, you must use the lower-level APIs in Application : the Begin method to prepare a toplevel for execution, followed by calls to MainLoop.EventsPending to determine whether the events must be processed, and in that case, calling RunLoop method and finally completing the process by calling End . The method Run is implemented like this: void Run (Toplevel top) { var runToken = Begin (view); RunLoop (runToken); End (runToken); } Unix File Descriptor Monitoring On Unix, it is possible to monitor file descriptors for input being available, or for the file descriptor being available for data to be written without blocking the application. To do this, you on Unix, you can cast the MainLoop instance to a UnixMainLoop and use the AddWatch method to register an interest on a particular condition."
  },
  "articles/overview.html": {
    "href": "articles/overview.html",
    "title": "Terminal.Gui API Overview",
    "keywords": "Terminal.Gui API Overview Terminal.Gui is a library intended to create console-based applications using C#. The framework has been designed to make it easy to write applications that will work on monochrome terminals, as well as modern color terminals with mouse support. This library works across Windows, Linux and MacOS. This library provides a text-based toolkit as works in a way similar to graphic toolkits. There are many controls that can be used to create your applications and it is event based, meaning that you create the user interface, hook up various events and then let the a processing loop run your application, and your code is invoked via one or more callbacks. The simplest application looks like this: using Terminal.Gui; class Demo { static int Main () { Application.Init (); var n = MessageBox.Query (50, 7, \"Question\", \"Do you like console apps?\", \"Yes\", \"No\"); return n; } } This example shows a prompt and returns an integer value depending on which value was selected by the user (Yes, No, or if they use chose not to make a decision and instead pressed the ESC key). More interesting user interfaces can be created by composing some of the various views that are included. In the following sections, you will see how applications are put together. In the example above, you can see that we have initialized the runtime by calling the Init method in the Application class - this sets up the environment, initializes the color schemes available for your application and clears the screen to start your application. The Application class, additionally creates an instance of the [Toplevel]((../api/Terminal.Gui/Terminal.Gui.Toplevel.html) class that is ready to be consumed, this instance is available in the Application.Top property, and can be used like this: using Terminal.Gui; class Demo { static int Main () { Application.Init (); var label = new Label (\"Hello World\") { X = Pos.Center (), Y = Pos.Center (), Height = 1, }; Application.Top.Add (label); Application.Run (); } } Typically, you will want your application to have more than a label, you might want a menu, and a region for your application to live in, the following code does this: using Terminal.Gui; class Demo { static int Main () { Application.Init (); var menu = new MenuBar (new MenuBarItem [] { new MenuBarItem (\"_File\", new MenuItem [] { new MenuItem (\"_Quit\", \"\", () => { Application.RequestStop (); }) }), }); var win = new Window (\"Hello\") { X = 0, Y = 1, Width = Dim.Fill (), Height = Dim.Fill () - 1 }; // Add both menu and win in a single call Application.Top.Add (menu, win); Application.Run (); } } Views All visible elements on a Terminal.Gui application are implemented as Views . Views are self-contained objects that take care of displaying themselves, can receive keyboard and mouse input and participate in the focus mechanism. Every view can contain an arbitrary number of children views. These are called the Subviews. You can add a view to an existing view, by calling the Add method, for example, to add a couple of buttons to a UI, you can do this: void SetupMyView (View myView) { var label = new Label (\"Username: \") { X = 1, Y = 1, Width = 20, Height = 1 }; myView.Add (label); var username = new TextField (\"\") { X = 1, Y = 2, Width = 30, Height = 1 }; myView.Add (username); } The container of a given view is called the SuperView and it is a property of every View. There are many views that you can use to spice up your application: Buttons , Labels , Text entry , Text view , Radio buttons , Checkboxes , Dialog boxes , Message boxes , Windows , Menus , ListViews , Frames , ProgressBars , Scroll views and Scrollbars . Layout Terminal.Gui supports two different layout systems, absolute and computed \\ (controlled by the LayoutStyle property on the view. The absolute system is used when you want the view to be positioned exactly in one location and want to manually control where the view is. This is done by invoking your View constructor with an argument of type Rect . When you do this, to change the position of the View, you can change the Frame property on the View. The computed layout system offers a few additional capabilities, like automatic centering, expanding of dimensions and a handful of other features. To use this you construct your object without an initial Frame , but set the X , Y , Width and Height properties after the object has been created. Examples: // Dynamically computed var label = new Label (\"Hello\") { X = 1, Y = Pos.Center (), Width = Dim.Fill (), Height = 1 }; // Absolute position using the provided rectangle var label2 = new Label (new Rect (1, 2, 20, 1), \"World\") The computed layout system does not take integers, instead the X and Y properties are of type Pos and the Width and Height properties are of type Dim both which can be created implicitly from integer values. The Pos Type The Pos type on X and Y offers a few options: Absolute position, by passing an integer Percentage of the parent's view size - Pos.Percent(n) Anchored from the end of the dimension - AnchorEnd(int margin=0) Centered, using Center() Reference the Left (X), Top (Y), Bottom, Right positions of another view The Pos values can be added or subtracted, like this: // Set the X coordinate to 10 characters left from the center view.X = Pos.Center () - 10; view.Y = Pos.Percent (20); anotherView.X = AnchorEnd (10); anotherView.Width = 9; myView.X = Pos.X (view); myView.Y = Pos.Bottom (anotherView); The Dim Type The Dim type is used for the Width and Height properties on the View and offers the following options: Absolute size, by passing an integer Percentage of the parent's view size - Dim.Percent(n) Fill to the end - Dim.Fill () Reference the Width or Height of another view Like, Pos , objects of type Dim can be added an subtracted, like this: // Set the Width to be 10 characters less than filling // the remaining portion of the screen view.Width = Dim.Fill () - 10; view.Height = Dim.Percent(20) - 1; anotherView.Height = Dim.Height (view)+1 TopLevels, Windows and Dialogs. Among the many kinds of views, you typically will create a Toplevel view (or any of its subclasses, like Window or Dialog which is special kind of views that can be executed modally - that is, the view can take over all input and returns only when the user chooses to complete their work there. The following sections cover the differences. TopLevel Views Toplevel views have no visible user interface elements and occupy an arbitrary portion of the screen. You would use a toplevel Modal view for example to launch an entire new experience in your application, one where you would have a new top-level menu for example. You typically would add a Menu and a Window to your Toplevel, it would look like this: using Terminal.Gui; class Demo { static void Edit (string filename) { var top = new Toplevel () { X = 0, Y = 0, Width = Dim.Fill (), Height = Dim.Fill () }; var menu = new MenuBar (new MenuBarItem [] { new MenuBarItem (\"_File\", new MenuItem [] { new MenuItem (\"_Close\", \"\", () => { Application.RequestStop (); }) }), }); // nest a window for the editor var win = new Window (filename) { X = 0, Y = 1, Width = Dim.Fill (), Height = Dim.Fill () - 1 }; var editor = new TextView () { X = 0, Y = 0, Width = Dim.Fill (), Height = Dim.Fill () }; editor.Text = System.IO.File.ReadAllText (filename); win.Add (editor); // Add both menu and win in a single call top.Add (win, menu); Application.Run (top); } } Window Views Window views extend the Toplevel view by providing a frame and a title around the toplevel - and can be moved on the screen with the mouse (caveat: code is currently disabled) From a user interface perspective, you might have more than one Window on the screen at a given time. Dialogs Dialog are Window objects that happen to be centered in the middle of the screen. Dialogs are instances of a Window that are centered in the screen, and are intended to be used modally - that is, they run, and they are expected to return a result before resuming execution of your application. Dialogs are a subclass of Window and additionally expose the AddButton API which manages the layout of any button passed to it, ensuring that the buttons are at the bottom of the dialog. Example: bool okpressed = false; var ok = new Button(\"Ok\"); var cancel = new Button(\"Cancel\"); var dialog = new Dialog (\"Quit\", 60, 7, ok, cancel); Which will show something like this: +- Quit -----------------------------------------------+ | | | | | [ Ok ] [ Cancel ] | +------------------------------------------------------+ Running Modally To run your Dialog, Window or Toplevel modally, you will invoke the Application.Run method on the toplevel. It is up to your code and event handlers to invoke the Application.RequestStop() method to terminate the modal execution. bool okpressed = false; var ok = new Button(3, 14, \"Ok\") { Clicked = () => { Application.RequestStop (); okpressed = true; } }; var cancel = new Button(10, 14, \"Cancel\") { Clicked = () => Application.RequestStop () }; var dialog = new Dialog (\"Login\", 60, 18, ok, cancel); var entry = new TextField () { X = 1, Y = 1, Width = Dim.Fill (), Height = 1 }; dialog.Add (entry); Application.Run (dialog); if (okpressed) Console.WriteLine (\"The user entered: \" + entry.Text); There is no return value from running modally, so your code will need to have a mechanism of indicating the reason that the execution of the modal dialog was completed, in the case above, the okpressed value is set to true if the user pressed or selected the Ok button. Input Handling Every view has a focused view, and if that view has nested views, one of those is the focused view. This is called the focus chain, and at any given time, only one View has the focus. The library binds the key Tab to focus the next logical view, and the Shift-Tab combination to focus the previous logical view. Keyboard processing is divided in three stages: HotKey processing, regular processing and cold key processing. Hot key processing happens first, and it gives all the views in the current toplevel a chance to monitor whether the key needs to be treated specially. This for example handles the scenarios where the user pressed Alt-o, and a view with a highlighted \"o\" is being displayed. If no view processed the hotkey, then the key is sent to the currently focused view. If the key was not processed by the normal processing, all views are given a chance to process the keystroke in their cold processing stage. Examples include the processing of the \"return\" key in a dialog when a button in the dialog has been flagged as the \"default\" action. The most common case is the normal processing, which sends the keystrokes to the currently focused view. Mouse events are processed in visual order, and the event will be sent to the view on the screen. The only exception is that no mouse events are delivered to background views when a modal view is running. More details are available on the Keyboard Event Processing document. Colors and Color Schemes All views have been configured with a color scheme that will work both in color terminals as well as the more limited black and white terminals. The various styles are captured in the Colors class which defined color schemes for the normal views, the menu bar, popup dialog boxes and error dialog boxes, that you can use like this: Colors.Base Colors.Menu Colors.Dialog Colors.Error You can use them for example like this to set the colors for a new Window: var w = new Window (\"Hello\"); w.ColorScheme = Colors.Error The ColorScheme represents four values, the color used for Normal text, the color used for normal text when a view is focused an the colors for the hot-keys both in focused and unfocused modes. By using ColorSchemes you ensure that your application will work correctbly both in color and black and white terminals. Some views support setting individual color attributes, you create an attribute for a particular pair of Foreground/Background like this: var myColor = Application.Driver.MakeAttribute (Color.Blue, Color.Red); var label = new Label (...); label.TextColor = myColor MainLoop, Threads and Input Handling Detailed description of the mainlop is described on the Event Processing and the Application Main Loop document."
  },
  "articles/tableview.html": {
    "href": "articles/tableview.html",
    "title": "Table View",
    "keywords": "Table View This control supports viewing and editing tabular data. It provides a view of a System.DataTable . System.DataTable is a core class of .net standard and can be created very easily TableView API Reference Csv Example You can create a DataTable from a CSV file by creating a new instance and adding columns and rows as you read them. For a robust solution however you might want to look into a CSV parser library that deals with escaping, multi line rows etc. var dt = new DataTable(); var lines = File.ReadAllLines(filename); foreach(var h in lines[0].Split(',')){ dt.Columns.Add(h); } foreach(var line in lines.Skip(1)) { dt.Rows.Add(line.Split(',')); } Database Example All Ado.net database providers (Oracle, MySql, SqlServer etc) support reading data as DataTables for example: var dt = new DataTable(); using(var con = new SqlConnection(\"Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;\")) { con.Open(); var cmd = new SqlCommand(\"select * from myTable;\",con); var adapter = new SqlDataAdapter(cmd); adapter.Fill(dt); } Displaying the table Once you have set up your data table set it in the view: tableView = new TableView () { X = 0, Y = 0, Width = 50, Height = 10, }; tableView.Table = yourDataTable;"
  },
  "articles/treeview.html": {
    "href": "articles/treeview.html",
    "title": "Tree View",
    "keywords": "Tree View TreeView is a control for navigating hierarchical objects. It comes in two forms TreeView and TreeView<T> . TreeView API Reference Using TreeView The basic non generic TreeView class is populated by ITreeNode objects. The simplest tree you can make would look something like: var tree = new TreeView() { X = 0, Y = 0, Width = 40, Height = 20 }; var root1 = new TreeNode(\"Root1\"); root1.Children.Add(new TreeNode(\"Child1.1\")); root1.Children.Add(new TreeNode(\"Child1.2\")); var root2 = new TreeNode(\"Root2\"); root2.Children.Add(new TreeNode(\"Child2.1\")); root2.Children.Add(new TreeNode(\"Child2.2\")); tree.AddObject(root1); tree.AddObject(root2); Having to create a bunch of TreeNode objects can be a pain especially if you already have your own objects e.g. House , Room etc. There are two ways to use your own classes without having to create nodes manually. Firstly you can implement the ITreeNode interface: // Your data class private class House : TreeNode { // Your properties public string Address {get;set;} public List<Room> Rooms {get;set;} // ITreeNode member: public override IList<ITreeNode> Children => Rooms.Cast<ITreeNode>().ToList(); public override string Text { get => Address; set => Address = value; } } // Your other data class private class Room : TreeNode{ public string Name {get;set;} public override string Text{get=>Name;set{Name=value;}} } After implementing the interface you can add your objects directly to the tree var myHouse = new House() { Address = \"23 Nowhere Street\", Rooms = new List<Room>{ new Room(){Name = \"Ballroom\"}, new Room(){Name = \"Bedroom 1\"}, new Room(){Name = \"Bedroom 2\"} } }; var tree = new TreeView() { X = 0, Y = 0, Width = 40, Height = 20 }; tree.AddObject(myHouse); Alternatively you can simply tell the tree how the objects relate to one another by implementing ITreeBuilder<T> . This is a good option if you don't have control of the data objects you are working with. TreeView<T> The generic Treeview<T> allows you to store any object hierarchy where nodes implement Type T. For example if you are working with DirectoryInfo and FileInfo objects then you could create a TreeView<FileSystemInfo> . If you don't have a shared interface/base class for all nodes you can still declare a TreeView<object> . In order to use TreeView<T> you need to tell the tree how objects relate to one another (who are children of who). To do this you must provide an ITreeBuilder<T> . Implementing ITreeBuilder<T> Consider a simple data model that already exists in your program: private abstract class GameObject { } private class Army : GameObject { public string Designation {get;set;} public List<Unit> Units {get;set;} public override string ToString () { return Designation; } } private class Unit : GameObject { public string Name {get;set;} public override string ToString () { return Name; } } An ITreeBuilder<T> for these classes might look like: private class GameObjectTreeBuilder : ITreeBuilder<GameObject> { public bool SupportsCanExpand => true; public bool CanExpand (GameObject model) { return model is Army; } public IEnumerable<GameObject> GetChildren (GameObject model) { if(model is Army a) return a.Units; return Enumerable.Empty<GameObject>(); } } To use the builder in a tree you would use: var army1 = new Army() { Designation = \"3rd Infantry\", Units = new List<Unit>{ new Unit(){Name = \"Orc\"}, new Unit(){Name = \"Troll\"}, new Unit(){Name = \"Goblin\"}, } }; var tree = new TreeView<GameObject>() { X = 0, Y = 0, Width = 40, Height = 20, TreeBuilder = new GameObjectTreeBuilder() }; tree.AddObject(army1); Alternatively you can use DelegateTreeBuilder<T> instead of implementing your own ITreeBuilder<T> . For example: tree.TreeBuilder = new DelegateTreeBuilder<GameObject>( (o)=>o is Army a ? a.Units : Enumerable.Empty<GameObject>()); Node Text and ToString The default behavior of TreeView is to use the ToString method on the objects for rendering. You can customise this by changing the AspectGetter . For example: treeViewFiles.AspectGetter = (f)=>f.FullName;"
  },
  "articles/views.html": {
    "href": "articles/views.html",
    "title": "Views",
    "keywords": "Views Layout Creating Custom Views Constructor Rendering Using Custom Colors Keyboard processing Mouse event processing"
  },
  "index.html": {
    "href": "index.html",
    "title": "Terminal.Gui - Terminal UI toolkit for .NET",
    "keywords": "Terminal.Gui - Terminal UI toolkit for .NET A simple UI toolkit for .NET, .NET Core, and Mono that works on Windows, the Mac, and Linux/Unix. Terminal.Gui Project on GitHub Terminal.Gui API Documentation API Reference Terminal.Gui API Overview Keyboard Event Processing Event Processing and the Application Main Loop TableView Deep Dive TreeView Deep Dive UI Catalog UI Catalog is a comprehensive sample library for Terminal.Gui. It provides a simple UI for adding to the catalog of scenarios. UI Catalog API Reference UI Catalog Source"
  },
  "README.html": {
    "href": "README.html",
    "title": "To Generate the Docs",
    "keywords": "This folder generates the API docs for Terminal.Gui. The API documentation is generated using the DocFX tool . The output of docfx gets put into the ./docs folder which is then checked in. The ./docs folder is then picked up by Github Pages and published to Miguel's Github Pages ( https://migueldeicaza.github.io/gui.cs/ ). To Generate the Docs Install DotFX https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html Change to the ./docfx folder and run ./build.ps1 Browse to http://localhost:8080 and verify everything looks good. Hit ctrl-c to stop the script. If docfx fails with a Stackoverflow error. Just run it again. And again. Sometimes it takes a few times. If that doesn't work, create a fresh clone or delete the docfx/api , docfx/obj , and docs/ folders and run the steps above again."
  }
}